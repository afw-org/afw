# See the 'COPYING' file in the project root for licensing information.
#
# CMake for cpack support
#
#----------------------------- N O T E -------------------------------------
#
# This file is generated by "afwdev generate".
#
# Do not change this file directly or the changes will be lost the next time
# this file is regenerated.
#
#----------------------------------------------------------------------------
#
# This is the cmake for cpack support.
#
# You can include additional set() and other cmake commands before including
# this file as needed to further customize the packaging. 
#

# Set some cpack variable with values from afw-package.json.
set(CPACK_PACKAGE_NAME                  "${afw_package_afwPackageId}")
set(CPACK_PACKAGE_DESCRIPTION           "${afw_package_description}")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY   "${afw_package_brief}")
set(CPACK_PACKAGE_HOMEPAGE_URL          "${afw_package_homePageUrl}")
set(CPACK_PACKAGE_CONTACT               "${afw_package_bugReportEmail}")
set(CPACK_PACKAGE_VERSION               "${afw_package_version}")
set(CPACK_PACKAGE_FILE_NAME             "${afw_package_afwPackageId}-${afw_package_version}_${CMAKE_SYSTEM_PROCESSOR}")

# set the output package format, based on the current distribution
if(UNIX)
  # look for dpkg and rpm to determine the package format to use
  find_program(DPKG dpkg)
  find_program(RPM rpmbuild)

  if(DPKG)
    set(CPACK_GENERATOR "DEB")
  elseif(RPM)
    set(CPACK_GENERATOR "RPM")
  else()
    set(CPACK_GENERATOR "TGZ")
  endif()
endif()

# Use git archive to generate a tarball of the source tree without untracked files
execute_process(
    COMMAND git archive --format=tar HEAD
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    OUTPUT_FILE ${CMAKE_BINARY_DIR}/nonignored_source.tar
)

# Extract archive into ${CMAKE_BINARY_DIR}/nonignored_source.
# If cmake version is >= 3.18, use its file(ARCHIVE_EXTRACT) command. If
# cmake version is < 3.18, this is not available so use tar command.
if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.18)
    file(ARCHIVE_EXTRACT
        INPUT ${CMAKE_BINARY_DIR}/nonignored_source.tar
        DESTINATION ${CMAKE_BINARY_DIR}/nonignored_source)
else()
    file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/nonignored_source)
    execute_process(
        COMMAND tar -xvf ${CMAKE_BINARY_DIR}/nonignored_source.tar -C ${CMAKE_BINARY_DIR}/nonignored_source
    )        
endif()
    
# Include CPack with CMAKE_SOURCE_DIR=${CMAKE_BINARY_DIR}/nonignored_source.
set(_PREVIOUS_CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${CMAKE_BINARY_DIR}/nonignored_source)
include(CPack)
set(CMAKE_SOURCE_DIR ${_PREVIOUS_CMAKE_SOURCE_DIR})

