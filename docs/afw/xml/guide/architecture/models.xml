<?xml version="1.0" encoding="utf-8" ?>
<doc>    
    <title>Models</title>          
    <paragraph>
        Some adaptors connect to data stores that maintain their own metadata,
        or schemas. These schemas may be harvested by the adaptor and presented
        as a collection of Adaptive Object Types and Property Types, referred to 
        as <literal>Adaptive Schemas</literal>. For instance, an SQL database 
        will contain tables that describe their table columns. A SQL adaptor may 
        translate those tables into Adaptive Schemas by converting them into the 
        appropriate Object Type definitions.
    </paragraph> 
    <paragraph>
        Adaptive Framework provides a special adaptor, known as the 
        <literal>Model Adaptor</literal>, which takes as input an 
        <literal>Adaptive Model</literal>, and uses it to transform the objects 
        provided by a separate adaptor, such as SQL. These transforms can by 
        simple, such as name mapping, or more complex, by completely 
        synthesizing new objects using Adaptive Scripts or Expressions.
    </paragraph>
    <paragraph>
        An Adaptive Model is defined by an instance of the object type
        <literal>_AdaptiveModel_</literal>. An Adaptive Model can be stored 
        by any adaptor that supports the configuration parameter 
        <literal>isModelLocation=true</literal>. The model is then 
        referenced by the Model Adaptor, using the 
        <literal>modelLocationAdaptorId</literal> and 
        <literal>modelId</literal> parameter combination.
    </paragraph>
    <header>
        Adaptive Model Example
    </header>
    <code>
{
    "modelId": "mycorp",
    "description": "Model for mycorp employees",
    "objectTypes": {
        "Employee": {
            "mappedObjectType": "Person",
            "propertyTypes": {
                "employeeEmail": {
                    "mappedPropertyName": "fullName",
                    "onGetValue": "${current::mappedPropertyName}@mycorp.com"
                }
            }
        }
    }
}
    </code>            
    <header>Model Functions</header>
    <paragraph>
        In the previous example, you'll notice a special property called 
        <literal>onGetValue</literal>. This is one of many <literal>on</literal> 
        functions that can be declared in an Adaptive Model to compute object 
        and property values on particular adaptor functions.
    </paragraph>
    <paragraph>
        Here is a table of more of these functions:
    </paragraph>
    <table>
        <columns>
            <column>Function</column>
            <column>Description</column>
        </columns>
        <rows>            
            <row>
                <column><literal>onGetObject</literal></column>
                <column>Script to execute on get_object()</column>
            </row>
            <row>
                <column><literal>onAddObject</literal></column>
                <column>Script to execute on add_object()</column>
            </row>
            <row>
                <column><literal>onDeleteObject</literal></column>
                <column>Script to execute on delete_object()</column>
            </row>
            <row>
                <column><literal>onModifyObject</literal></column>
                <column>Script to execute on modify_object()</column>
            </row>
            <row>
                <column><literal>onReplaceObject</literal></column>
                <column>Script to execute on replace_object()</column>
            </row>
            <row>
                <column><literal>onRetrieveObjects</literal></column>
                <column>Script to execute on retrieve_objects()</column>
            </row>
            <row>
                <column><literal>onGetProperty</literal></column>
                <column>Evaluated when getting an object property</column>
            </row>
            <row>
                <column><literal>onGetIntialObjectId</literal></column>
                <column>Optional hybrid value is evaluated to determine the objectId on add requests</column>
            </row>
            <row>
                <column><literal>onGetInitialValue</literal></column>
                <column>Get initial value to for this property</column>
            </row>
            <row>
                <column><literal>onSetProperty</literal></column>
                <column>Evaluated when setting an object property</column>
            </row>            
        </rows>
    </table>   
    <header>Qualified Variables</header>    
    <paragraph>
        The following lists some qualified variables that can be used during
        model processing "on" functions. For a complete list of variables, refer
        to the Developer Guide on Adaptive Models.
    </paragraph>    
    <object-type-table propertyColumn="Variable" objectTypeId="_AdaptiveModelCurrentOnGetObject_" />                            
</doc>