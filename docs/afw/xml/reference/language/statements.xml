<?xml version="1.0" encoding="utf-8" ?>
<doc>
    <title>Statements</title>
    <paragraph>
        Adaptive Script allows you to execute one or more statements, sequentially. 
        Statements are separated by the <literal>;</literal> character. This programmatic flow lets the 
        programmer write logic procedurally. The following is a list of the 
        statements that are available in Adaptive Script.
    </paragraph>   
    <section>
        <title>Block</title>
        <image generated-src="ebnf/syntax/diagram/Block.png" />                     
        <paragraph>
            A Block is a sequence of statements that are executed sequentially. When 
            creating a script, a new block is created initially. Blocks can be nested 
            inside existing blocks, using braces <literal>{ }</literal>.
        </paragraph>
        <section>
            <title>Example</title>
            <code><![CDATA[{
    loc x = 1;
    loc y = 2;
    loc z = x + y;
    print(z);
}]]></code>
        </section>
    </section>
    <section>
        <title>Assignment</title>
        <image generated-src="ebnf/syntax/diagram/Assignment.png" />
        <paragraph>
            The Assignment statement assigns the value of an Expression to 
            an AssignmentExpression. An AssignmentExpression is also an Expression 
            which must evaluate to one of the following: 
        </paragraph>
        <list>
            <item>VariableReference</item>
            <item>ReferenceByIndex</item>
            <item>ReferenceByName</item>
        </list>
        <paragraph>
            This flexibility allows us to support a popular technique of 
            assignment known as "destructuring". In destructuring, we assign
            an object or list into multiple variable names in one assignment.
        </paragraph>
        <section>
            <title>Example</title>
            <code><![CDATA[loc x = 1;
loc {y} = { y: 2 };
loc [z] = [ 3 ];]]></code>
        </section>
    </section>
    <section>
        <title>Break</title>
        <image generated-src="ebnf/syntax/diagram/BreakStatement.png" />        
        <paragraph>
            The <literal>break</literal> statement breaks out of the current block.
        </paragraph>    
        <section>
            <title>Example</title>            
            <code><![CDATA[while (true) {
        if (1 < 2) {
            break;
        }
}]]></code>
        </section>
    </section>
    <section>
        <title>Call</title>
        <image generated-src="ebnf/syntax/diagram/CallStatement.png" />
        <paragraph>
            A Call statement is an evaluation that compiles to the call 
            of an Adaptive Value.
        </paragraph>
    </section>
    <section>
        <title>Const</title>
        <image generated-src="ebnf/syntax/diagram/ConstStatement.png" />
        <paragraph>            
            The <literal>const</literal> statement declares constant variables.
        </paragraph>
        <section>
            <title>Example</title>
            <code><![CDATA[const x = 1;]]></code>
        </section>
    </section>
    <section>
        <title>Declare</title>
        <image generated-src="ebnf/syntax/diagram/DeclareStatement.png" />
        <paragraph>            
        </paragraph>
    </section>
    <section>
        <title>Do While</title>
        <image generated-src="ebnf/syntax/diagram/DoWhileStatement.png" />
        <paragraph>
            The do-while statement executes a block of statements until a 
            condition is met. Unlike the while statement, the do-while statement
            executes at least once.
        </paragraph>
        <section>
            <title>Example</title>
            <code><![CDATA[loc x = 0;
do {
    x = x + 1;
} while (x < 10);]]></code>
        </section>
    </section>
    <section>
        <title>For</title>
        <image generated-src="ebnf/syntax/diagram/ForStatement.png" />
        <paragraph>
            The <literal>for</literal> statement executes a block of statements 
            until a condition is met. Unlike the while statement, the for 
            statement executes an initializer, a condition, and an incrementor.
        </paragraph>
        <section>
            <title>Example</title>
            <code><![CDATA[for (loc i = 0; i < 10; i = i + 1) {
    print(i);
}]]></code>
        </section>
    </section>
    <section>
        <title>Foreach</title>
        <image generated-src="ebnf/syntax/diagram/ForeachStatement.png" />
        <paragraph>
        </paragraph>
        <section>
            <title>Example</title>
            <code><![CDATA[foreach loc x of [1, 2, 3] {
    print(x);
}]]></code>
        </section>
    </section>
    <section>
        <title>Function</title>
        <image generated-src="ebnf/syntax/diagram/FunctionStatement.png" />
        <paragraph>
            This declares a function.
        </paragraph>
        <section>
            <title>Example</title>
            <code><![CDATA[function func(a, b) {
    return a + b;
}
function func2(a, b) : a + b;]]></code>
        </section>
    </section>
    <section>
        <title>If</title>
        <image generated-src="ebnf/syntax/diagram/IfStatement.png" />
        <paragraph>
            The <literal>if</literal> statement executes a block of statements 
            if a condition evaluates to true.
        </paragraph>
        <section>
            <title>Example</title>
            <code><![CDATA[if (1 < 2) {
    print(1);
}]]></code>
        </section>
    </section>
    <section>
        <title>Interface</title>
        <image generated-src="ebnf/syntax/diagram/InterfaceStatement.png" />
        <paragraph>            
        </paragraph>
    </section>
    <section>
        <title>Loc</title>
        <image generated-src="ebnf/syntax/diagram/LocStatement.png" />
        <paragraph>
            The <literal>loc</literal> statement declares a local variable.
        </paragraph>
        <code><![CDATA[loc x = 1;]]></code>
    </section>
    <section>
        <title>Return</title>
        <image generated-src="ebnf/syntax/diagram/ReturnStatement.png" />
        <paragraph>
            The <literal>return</literal> statement returns a value from a 
            block of execution.
        </paragraph>
        <section>
            <title>Example</title>
            <code><![CDATA[function func(a, b) {
    return a + b;
}]]></code>
        </section>
    </section>
    <section>
        <title>Type</title>
        <image generated-src="ebnf/syntax/diagram/TypeStatement.png" />
        <paragraph>
        </paragraph>
    </section>
    <section>
        <title>While</title>
        <image generated-src="ebnf/syntax/diagram/WhileStatement.png" />
        <paragraph>
            The <literal>while</literal> statement executes a block of 
            statements until a condition is met. Unlike the do-while statement, 
            the while statement executes the condition first and may not 
            execute the block at all.
        </paragraph>
        <section>
            <title>Example</title>
            <code><![CDATA[while (false) {
    print("This won't execute!");
}]]></code>
        </section>
    </section>
</doc>
