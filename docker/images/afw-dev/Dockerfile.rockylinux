# Build stage for C compilation, which may use multi-arch builds
FROM ghcr.io/afw-org/afw-dev-base:rockylinux AS build-stage-c

COPY ./ /src
COPY ./docker/images/builder/builder-rockylinux.sh /builder.sh
COPY ./docker/images/builder/afw.spec /afw.spec

RUN chmod +x /builder.sh && /builder.sh


# Build stage for Javascript compiles (only build on native platform for JS)
FROM --platform=$BUILDPLATFORM ghcr.io/afw-org/afw-dev-base:rockylinux AS build-stage-js

COPY ./ /src
COPY ./docker/images/builder/builder-rockylinux.sh /builder.sh

RUN chmod +x /builder.sh && BUILD_TARGET=js /builder.sh

# Create a single image with all artifacts
# This stage can also be executed individually, using --target to emit artifacts
# into the local file system
FROM scratch as build-stage

COPY --from=build-stage-c /*.rpm /
COPY --from=build-stage-js /*.tar /


# create a final output image
FROM ghcr.io/afw-org/afw-dev-base:rockylinux

LABEL org.opencontainers.image.source https://github.com/afw-org/afw

# obtain the artifacts from build-stage
COPY --from=build-stage /afw-*.rpm /
COPY --from=build-stage /afw-apps-*.tar /var/www/html/
COPY --from=build-stage /afw-docs-*.tar /var/www/html/
COPY .devcontainer/afw/nginx.conf /etc/nginx/nginx.conf

RUN cd / && rpm -ivh /afw-*.rpm && rm -f /afw-*.rpm && \
    cd /var/www/html && tar xvf afw-apps-*.tar && rm -f afw-apps-*.tar && \
    tar xvf afw-docs-*.tar && rm -f afw-docs-*.tar

# open ports
EXPOSE 8080

# persist data in /afw
VOLUME "/afw"