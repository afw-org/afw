# Build stage for C compilation, which may use multi-arch builds
FROM ghcr.io/afw-org/afw-dev-base:alpine AS build-stage-c

COPY ./ /src
COPY ./docker/images/builder/builder-alpine.sh /builder.sh

RUN chmod +x /builder.sh && /builder.sh


# Build stage for Javascript compiles (only build on native platform for JS)
FROM --platform=$BUILDPLATFORM ghcr.io/afw-org/afw-dev-base:alpine AS build-stage-js

COPY ./ /src
COPY ./docker/images/builder/builder-alpine.sh /builder.sh

RUN chmod +x /builder.sh && BUILD_TARGET=js /builder.sh

# Create a single image with all artifacts
# This stage can also be executed individually, using --target to emit artifacts
# into the local file system
FROM scratch as build-stage

COPY --from=build-stage-c /*.tar /
COPY --from=build-stage-js /*.tar /


# create a final output image
FROM ghcr.io/afw-org/afw-dev-base:alpine

LABEL org.opencontainers.image.source https://github.com/afw-org/afw

# obtain the artifacts from build-stage
RUN mkdir -p /usr/share/nginx/html/apps
COPY --from=build-stage /afw-*.tar /
COPY --from=build-stage /admin-app-*.tar /usr/share/nginx/html/apps

RUN cd / && tar xvf /afw-*.tar && rm -f /afw-*.tar && \
    cd /usr/share/nginx/html && tar xvf admin-app-*.tar && rm -f admin-app-*.tar