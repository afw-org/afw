// See the 'COPYING' file in the project root for licensing information.
/*
 * Adaptive Data Type unknown
 *
 * Copyright (c) 2010-2023 Clemson University
 *
 */

/*  ----------------------------- N O T E -------------------------------------
 *
 * This file is generated by "afwdev generate afw".
 *
 * Do not change this file directly or the changes will be lost the next time
 * this file is regenerated.
 *
 * -------------------------------------------------------------------------*/


#ifndef __AFW_DATA_TYPE_UNKNOWN_BINDING_H__
#define __AFW_DATA_TYPE_UNKNOWN_BINDING_H__


#include "afw_minimal.h"
#include "afw_data_type_typedefs.h"
#include "afw_declare_helpers.h"

/**
 * @defgroup afw_c_api_data_type_unknown unknown
 * @ingroup afw_c_api_data_types
 *
 * Adaptive Data Type unknown
 *
 * @{
 */

/**
 * @file afw_data_type_unknown_binding.h
 * @brief Adaptive data type unknown header.
 */

AFW_BEGIN_DECLARES

/** @brief Quoted data type id for unknown */
#define AFW_DATA_TYPE_ID_Q_unknown "unknown"

/** @brief Unquoted data type id for unknown */
#define AFW_DATA_TYPE_ID_U_unknown unknown

/** @brief String for data type id unknown */
#define AFW_DATA_TYPE_ID_S_unknown afw_s_unknown

/** @brief Quoted c type for data type id unknown */
#define AFW_DATA_TYPE_CTYPE_Q_unknown "const afw_value_t *"

/** @brief Adaptive string value for "unknown". */
AFW_DECLARE_CONST_DATA(afw_value_t *)
afw_data_type_unknown_id_value;

/** @brief Data type struct for unknown. */
AFW_DECLARE_CONST_DATA(afw_data_type_t *)
afw_data_type_unknown;

/**
 * @brief Permanent managed (life of afw environment) value inf for data type unknown.
 *
 * The lifetime of the value is the lifetime of the afw environment.
 */
AFW_DECLARE_CONST_DATA(afw_value_inf_t)
afw_value_permanent_unknown_inf;

/**
 * @brief Macro to determine if data type is unknown.
 * @param A_DATA_TYPE to test.
 * @return boolean result.
 */
#define afw_data_type_is_unknown(A_DATA_TYPE) \
( \
    (A_DATA_TYPE) && \
    (A_DATA_TYPE) == afw_data_type_unknown \
)

/** @brief struct for data type unknown values. */
struct afw_value_unknown_s {
    const afw_value_inf_t *inf;
    const afw_value_t * internal;
};

/**
 * @brief extern for data type unknown struct.
 *
 * This should only be referenced in the linkage unit the extern is
 * defined in.  Use afw_data_type_unknown when not referencing in
 * a static.
 */
AFW_DECLARE_INTERNAL_CONST_DATA(afw_data_type_t)
afw_data_type_unknown_direct;

/**
 * @brief extern for data type unknown inf.
 *
 * This should only be referenced in the linkage unit the extern is
 * defined in.
 *
 * The implementation of the data type must define this.  It is
 * referenced by the generated data type instance.
 */
AFW_DECLARE_INTERNAL_CONST_DATA(afw_data_type_inf_t)
afw_data_type_unknown_inf;

AFW_END_DECLARES

/** @} */


#endif /* __AFW_DATA_TYPE_UNKNOWN_BINDING_H__ */
