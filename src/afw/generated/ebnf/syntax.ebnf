/* Generate by: afwdev generate afw */


/* From afw_compile_parse.c                                                   */
/* This grammar uses W3C (https://www.w3.org/) EBNF notation.                 */
/*                                                                            */
/* Note: This grammar is intended as documentation and is not                 */
/* precise.                                                                   */
/*                                                                            */
/* Directory src/afw/doc/syntax/ must be produced manually from               */
/* src/afw/generated/ebnf/syntax.ebnf using the following steps:              */
/*                                                                            */
/* 1) Visit http://bottlecaps.de/rr/ui in a web browser.                      */
/* 2) Optionally, go to the "Options" tab and change Color to one             */
/*    compatible with the admin app such as #DCDCDC which is shades           */
/*    of gray.                                                                */
/* 3) Paste the contents of src/afw/generated/syntax/compile.ebnf in          */
/*    the text area of the "Edit Grammar" tab.                                */
/* 4) Select the "View Diagram" tab then click the PNG radio button           */
/*    in "Download diagram" box in the top right corner and press             */
/*    the "Download" button.                                                  */
/* 5) Replace the contents of the syntax/ directory with the contents         */
/*    of the downloaded zip file.                                             */
/*                                                                            */
/* Root productions                                                           */
/*                                                                            */
/* A parameter passed to the adaptive compiler determines the first           */
/* production used for parse.                                                 */
/*                                                                            */
/* Json - afw_compile_type_json and afw_compile_type_relaxed_json             */
/*                                                                            */
/* ParenthesizedExpression - afw_compile_type_parenthesized_expression        */
/*                                                                            */
/* Script - afw_compile_type_script                                           */
/*                                                                            */
/* Template - afw_compile_type_template                                       */
/*                                                                            */

/* From afw_compile_parse_assignment_target.c                                 */

AssignmentListDestructureTarget ::=
  '['
       (
           ( '...' AssignmentBindingTarget ) |
           ( AssignmentElement (',' AssignmentElement )*
               ( ',' '...' AssignmentBindingTarget )? )
       )
  ']'

/* From afw_compile_parse_assignment_target.c                                 */

AssignmentElement ::=
   AssignmentBindingTarget ( '=' Expression )?

/* From afw_compile_parse_assignment_target.c                                 */

AssignmentObjectDestructureTarget ::=
   '{'
       (
           ( '...' AssignmentBindingTarget ) |
           (
               AssignmentProperty ( ',' AssignmentProperty )*
               ( ',' '...' AssignmentBindingTarget )?
           )
       )?
   '}'

/* From afw_compile_parse_assignment_target.c                                 */

AssignmentProperty ::=
   ( PropertyName ('=' Expression )? ) |
   ( PropertyName ( ':' AssignmentElement )? )

/* From afw_compile_parse_assignment_target.c                                 */
/*                                                                            */
/* Reference is only valid if assignment_type is assign_only                  */
/*                                                                            */

AssignmentBindingTarget ::=
   AssignmentListDestructureTarget |
   AssignmentObjectDestructureTarget |
   ( VariableName - ReservedWords )

/* From afw_compile_parse_assignment_target.c                                 */
/*                                                                            */
/* If AssignmentBindingTarget does not return an assignment_target but        */
/* it does return a symbol_reference and this is an assignment_type of        */
/* assign_only, create an assignment_target value from the symbol_reference.  */
/*                                                                            */

AssignmentTarget ::= AssignmentBindingTarget | Reference

/* From afw_compile_parse_expression.c                                        */
/* The objectId of any /afw/_AdaptiveDataType_/ objects.                      */
/* This production only applies if ':' occurs before the end of current line. */

ColonBeforeEndOfLine ::= ':'

DataType ::=
   'any' |
   'anyURI' |
   'base64Binary' |
   'boolean' |
   'date' |
   'dataTimeDuration' |
   'dnsName' |
   'double' |
   'expression' |
   'function' |
   'hexBinary' |
   'ia5String' |
   'integer' |
   'ipAddress' |
   'array' |
   'null' |
   'object' |
   'objectId' |
   'objectPath' |
   'password' |
   'regexp' |
   'rfc822Name' |
   'script' |
   'string' |
   'template' |
   'time' |
   'unevaluated' |
   'unknown' |
   'void' |
   'x500Name' |
   'xpathExpression' |
   'yearMonthDuration'
/* ObjectType should be in quoted string since some may not conform to        */
/* Identifier and consistency is desired.                                     */

ObjectType ::= String

Category ::= Identifier

FunctionName ::= ( 'fn' '::')? Identifier ( '<' DataType '>' )?

MethodName ::= ( ('fn' | Category | Qualifier) '::')? Identifier

ParameterName ::= Identifier - ReservedWords

PropertyName ::= Identifier

Qualifier ::= Identifier

VariableName ::= Identifier - ReservedWords

VariableReference ::= ( Qualifier '::' Identifier) || VariableName

/* From afw_compile_parse_expression.c                                        */
/* Reference is any Evaluation that evaluates to a value inf id of            */
/* reference_by_key, qualified_variable_reference, or symbol_reference.       */

Reference ::= Evaluation

/* From afw_compile_parse_expression.c                                        */

EntryFunctionLambdaOrVariableReference ::=
   (
     FunctionName |
     Lambda |
     VariableReference
   )

/* From afw_compile_parse_expression.c                                        */
/*                                                                            */
/* Evaluation can call a FunctionName, call a Lambda defined inline, call a   */
/* function in a variable, access a local variable, or access qualified a     */
/* =variable.                                                                 */
/*                                                                            */
/* '->' calls EntryFunctionLambdaOrVariableReference with the first parameter */
/* as the value to the left of the '->' followed by the remaining parameters  */
/* in ParametersExceptFirst. This acts like a function called as a method.    */
/*                                                                            */
/* '?->' is the same as '->' except it will return undefined if               */
/* EntryFunctionLambdaOrVariableReference does not exist or contains a nullish */
/* value.  A syntax error will still be produced for a unqualified name that  */
/* is not a declared variable or the name of a built-in function.             */
/*                                                                            */

Evaluation ::=
   EntryFunctionLambdaOrVariableReference ( '?.'? Parameters )?
   (
       ( '?.'? ParametersExceptFirst ) |
       (
           ( '?.'? '[' Expression ']' ) |
           ( ( '.' | '?.' ) PropertyName )
       ) |
       (
           ( '->' | '?->' )
           EntryFunctionLambdaOrVariableReference
           '?.'? ParametersExceptFirst
       )
   )*

/* From afw_compile_parse_expression.c                                        */

ParameterList ::=
   (
       (
           ( RequiredParameterList | OptionalParameterList )
           ( ',' OptionalParameterList )*
           ( ',' EllipsisParameter )?
       ) |
       EllipsisParameter
   )

RequiredParameterList ::=
   ParameterName OptionalType
   (',' ParameterName OptionalType)*

OptionalParameterList ::=
   ( ParameterName '?'? OptionalType ( '=' Literal )? )
   (
       ','
       ( ParameterName '?'? OptionalType ( '=' Literal )? )
   )*

EllipsisParameter ::=
   '...' ParameterName OptionalType
/*                                                                            */
/* An object with object type _AdaptiveFunctionDeclaration_                   */
/*                                                                            */

FunctionDeclarationObject ::= object

FunctionSignature ::= '(' ParameterList ')' OptionalReturnType

/* From afw_compile_parse_expression.c                                        */
/*                                                                            */
/* If Expression is an object literal it must be enclosed with parentheses.   */
/*                                                                            */

FunctionSignatureAndBody ::= FunctionSignature FunctionBody

FunctionBody ::= ( '{' Script '}' ) | Expression

/* From afw_compile_parse_expression.c                                        */
/* 'function' is a reserved variable/function name.                           */
/* This can be used in body of the Lambda to call recursively.                */

SelfReferenceLambdaName ::= FunctionName - ReservedWords

Lambda ::= 'function' SelfReferenceLambdaName? FunctionSignatureAndBody

/* From afw_compile_parse_expression.c                                        */

Parameters ::= '(' Expression (',' Expression)*')'
/*                                                                            */
/* Denotes a parameter list without first parameter (method style call).      */
/*                                                                            */

ParametersExceptFirst ::= Parameters

/* From afw_compile_parse_expression.c                                        */

ParenthesizedExpression ::= '(' Expression ')' Parameters*

/* From afw_compile_parse_expression.c                                        */
/* See RFC https://tools.ietf.org/html/rfc2616#section-3.7                    */
/* This is media-type in a quoted string                                      */

MediaType ::= String

ArrayOf ::= ( 'of' 'array' )* ( 'of' Type )

DataTypeWithParameter ::= '('
              ( ( 'base64Binary' | 'hexBinary' | 'string' ) MediaType ) |
              ( ( 'script' | 'template' ) ReturnType ) |
              ( 'function' FunctionSignature ) |
              ( 'array' ArrayOf ) |
              ( ( 'object' | 'objectId' ) ObjectType ) |
              ( 'unevaluated' Type ) |
     ')'

TypeName ::= DataType | TypeVariableName | InterfaceName

TypeObject ::=
     '{'
         PropertyName '?'?  ':' Type
         ( ',' PropertyName '?'?  ':' Type )*
         ','?
     '}' ';'
/* An object type _AdaptiveValueMeta_ object.                                 */

ValueMeta ::= 'meta' Object

Type ::=  DataTypeWithParameter | TypeName | TypeObject | ValueMeta

/* From afw_compile_parse_expression.c                                        */
/* If Type is not specified, default is any.                                  */

OptionalType ::= ( ':' Type )?

OptionalReturnType ::= ( ':' ( 'void' | Type ) )?

/* From afw_compile_parse_expression.c                                        */

NullishCoalescing ::= LogicalExpression ( '??'  LogicalExpression )*

/* From afw_compile_parse_expression.c                                        */

LogicalExpression ::= LogicalAnd ( '||' LogicalAnd )*

/* From afw_compile_parse_expression.c                                        */

LogicalAnd ::= Equality ( '&&' Equality )*

/* From afw_compile_parse_expression.c                                        */

Equality ::= Comparison
  ( ('==' | '===' | '!=' | '!==' ) Comparison )*

/* From afw_compile_parse_expression.c                                        */

Comparison ::= Factor (
     ('<' | '<=' | '>' | '>=' ) Factor )*

/* From afw_compile_parse_expression.c                                        */

Factor ::= Term ( ('+' | '-' ) Term )*

/* From afw_compile_parse_expression.c                                        */

Term ::= Exponentiation ( ('*' | '/' | '%') Exponentiation )*

/* From afw_compile_parse_expression.c                                        */

Exponentiation ::= Prefixed ( '**' Prefixed )*

/* From afw_compile_parse_expression.c                                        */

Prefixed ::= ( ( '+' | '-' | '!' | 'void' ) Value ) | Value

/* From afw_compile_parse_expression.c                                        */

Expression ::= NullishCoalescing ( '?' Expression ':' Expression )?

/* From afw_compile_parse_script.c                                            */
/*                                                                            */
/* Must evaluate one of following:                                            */
/*    VariableReference                                                       */
/*    ReferenceByIndex                                                        */
/*    ReferenceByName                                                         */

AssignmentExpression ::= Expression

/* From afw_compile_parse_script.c                                            */

OptionalDefineTarget ::=
   ( ( 'let' | 'const' )? AssignmentTarget )

/* From afw_compile_parse_script.c                                            */

OptionalDefineAssignment ::= (
    ( ( 'let' | 'const' ) AssignmentTarget '=' Expression ) |
    Assignment
)

/* From afw_compile_parse_script.c                                            */

AssignmentOperation ::=
   (
       ( '++' | '--' ) |
       (
           (
             '=' | '+=' | '-=' | '*=' |'/=' | '%=' |
             '**=' | '&&=' | '||=' | '??='
           )
           Expression
      )
   )

/* From afw_compile_parse_script.c                                            */

Assignment ::= AssignmentExpression AssignmentOperation

/* From afw_compile_parse_script.c                                            */

AssignmentStatement ::=
   (
       ( '(' AssignmentObjectDestructureTarget '=' Expression ')' ) |
       Assignment
   )
   ';'

/* From afw_compile_parse_script.c                                            */

BreakStatement ::= 'break' ';'

/* From afw_compile_parse_script.c                                            */

ConstStatement ::= 'const' AssignmentTarget '=' Expression ';'

/* From afw_compile_parse_script.c                                            */

InterfaceName ::= Identifier

InterfaceStatement ::= 'interface' InterfaceName
     '{'
         ( String | Identifier ) ':' Type
         ( ','  ( String | Identifier ) ':' Type )*
         ','?
     '}' ';'

/* From afw_compile_parse_script.c                                            */

TypeVariableName ::= Identifier

TypeStatement ::= 'type' TypeVariableName '=' Type ';'

/* From afw_compile_parse_script.c                                            */

ContinueStatement ::= 'continue' ';'

/* From afw_compile_parse_script.c                                            */

DeclareStatement ::= 'declare' AssignmentTarget ';'

/* From afw_compile_parse_script.c                                            */

DoWhileStatement ::= 'do' Statement 'while' '(' Expression ')' ';'

/* From afw_compile_parse_script.c                                            */

ForStatement ::= 'for'
  '(' (
      (
          ( OptionalDefineAssignment ( ',' OptionalDefineAssignment )* )?
          ';' Expression?
          ';' ( Assignment ( ',' Assignment )* )?
      ) |
      (
          OptionalDefineTarget 'of' Expression
      )
  ) ')' Statement

/* From afw_compile_parse_script.c                                            */
/* Named function                                                             */
/*                                                                            */
/* FunctionName must be present for this production to match.                 */

FunctionStatement ::=
     'function' ( FunctionName - ReservedWords ) FunctionSignatureAndBody ';'

/* From afw_compile_parse_script.c                                            */

IfStatement ::= 'if' '(' Expression ')' Statement ( 'else' Statement )?

/* From afw_compile_parse_script.c                                            */

LetStatement ::= 'let' AssignmentTarget ( '=' Expression )? ';'

/* From afw_compile_parse_script.c                                            */
/* Expression is required if inside a function that has a non-void return.    */

ReturnStatement ::= 'return' Expression? ';'

/* From afw_compile_parse_script.c                                            */

CaseClause ::= 'case' Expression ':' StatementList?

DefaultClause ::= 'default' ':' StatementList?

SwitchStatement ::= 'switch' ParenthesizedExpression
    ( 'using' EntryFunctionLambdaOrVariableReference )?
    '{'
        CaseClause*
        DefaultClause?
        CaseClause*
    '}'

/* From afw_compile_parse_script.c                                            */
/* If there is no expression, the exception is rethrow and can only be        */
/* contained in a catch block. If there is an expression, it is the message   */
/* for the exception to be thrown. If there is a second expression, it        */
/* can be any value and will be the value for the "data" property of the      */
/* error object.                                                              */
/*                                                                            */

ThrowStatement ::=  'throw' ( Expression  Expression? )?

/* From afw_compile_parse_script.c                                            */

Catch ::= 'catch' ( '(' Identifier ')' )? Statement

Finally ::= 'finally' Statement

TryStatement ::= 'try' Statement ( Catch | Finally | ( Catch Finally ) )

/* From afw_compile_parse_script.c                                            */

WhileStatement ::= 'while' '(' Expression ')' Statement

/* From afw_compile_parse_script.c                                            */
/* This is any Evaluation that compiles to a call adaptive value.             */

EvaluationThatCompilesToCallValue ::= Evaluation

CallStatement ::= EvaluationThatCompilesToCallValue
/* BreakStatement and ContinueStatement can only be in a loop.                */

Block ::= '{' StatementList '}'

Statement ::=
   ';' |
   Block |
   AssignmentStatement |
   BreakStatement |
   CallStatement |
   ConstStatement |
   ContinueStatement |
   DeclareStatement |
   DoWhileStatement |
   ForStatement |
   FunctionStatement |
   IfStatement |
   InterfaceStatement |
   LetStatement |
   ReturnStatement |
   SwitchStatement |
   TypeStatement |
   WhileStatement

/* From afw_compile_parse_script.c                                            */

StatementList ::= Statement*

/* From afw_compile_parse_script.c                                            */
/*                                                                            */
/* The value returned from a script if the Expression specified on an         */
/* evaluated ReturnStatement, the single Expression specified, or null        */
/* if none of the above.                                                      */
/*                                                                            */

Script ::= ScriptShebang? ( Statement* | Expression )

ScriptShebang ::= '#!' UnicodeNonControl* 'afw' UnicodeNonControl* '\n'

/* From afw_compile_parse_script.c                                            */

TestScript ::= TestScriptShebang? TestScriptDefinition TestDefinition+

TestScriptShebang ::= '#!' UnicodeNonControl* 'afw' UnicodeNonControl*
    ('-s test_script' | '--syntax test_script' ) |  UnicodeNonControl* '\n'
/* TestDescription, TestSkip, TestSourceType and TestCustomProperty can occur */
/* in any order                                                               */

TestScriptDefinition ::=
    TestScriptBegin
    TestDescription?
    TestSkip?
    TestSourceType?
    TestCustomProperty*
/* TestDescription, TestExpect, TestSkip, TestSource, TestSourceType and      */
/* TestUserProperty can occur in any order                                    */

TestDefinition ::=
    TestBegin
    TestDescription?
    TestExpect
    TestSkip?
    TestSource
    TestSourceType?
    TestCustomProperty*
/* Must start at the beginning of a line                                      */

TestScriptLineStart ::= ( '//?' '\n')* '//?'
/* The '//?' of '\n//?' is reused.  The last '/n' is ignored to allow ...     */
/* values to not end with a '\n'.                                             */

TestScriptValue ::= (
    ( '...' '\n' UnicodeCodePoint* ( '\n//?' | END ) ) |
    ( UnicodeNonControl #x20* '\n' )
)

TestScriptBegin ::= TestScriptLineStart 'test_script:' TestScriptValue

TestBegin ::= TestScriptLineStart 'test:' TestScriptValue
/* Identifier should be one that will not collide with standard ones.         */

TestCustomProperty ::= Identifier ':' TestScriptValue

TestDescription ::= TestScriptLineStart 'description:' TestScriptValue

TestExpect ::= TestScriptLineStart
   'expect:' (
       ( 'error' '\n' ) |
       ( 'result' TestScriptValue )
   )
/* Skip can be use for source that is not ready to test                       */

TestSkip ::= TestScriptLineStart 'skip:' 'true' '\n'
/* Default is script or the one specified in TestScriptDefinition             */

TestSourceType ::= TestScriptLineStart 'source_type:'
    ( 'json' | 'relaxed_json' | 'script' | 'template' )

TestSource ::= TestScriptLineStart 'source:' TestScriptValue

/* From afw_compile_parse_template.c                                          */

Substitution ::= '${' Script '}'

/* From afw_compile_parse_template.c                                          */

Template ::=
   (
       (Char - '$') | ( '\$' ) | '$' (Char - '{') | Substitution
   )*

/* From afw_compile_parse_template.c                                          */

TemplateString ::= '`' + Template + '`'

/* From afw_compile_parse_template.c                                          */

NamedTemplateString ::= '`' + ((Char - '$') | ('\$') | ('$' (Char - '{')) | '${' PropertyName '}') * '`'

/* From afw_compile_parse_value.c                                             */
/* Expression must produce a value of data type list.                         */

ListExpression ::= Expression

List ::=
   '['
       ( Json (',' Json)* )?
   ']'

RelaxedList ::=
   '['
       ( RelaxedJson (',' RelaxedJson)* )? ','?
   ']'

ListLiteral ::=
   '['
       ( Literal (',' Literal )* )? ','?
   ']'

ListValue ::=
   '['
       (
           ( Expression | ( '...' ListExpression ) )
           (',' ( Expression | ( '...' ListExpression ) ) )*
       )?
       ','?
   ']'

/* From afw_compile_parse_value.c                                             */
/* Expression must produce a value of data type object.                       */

ObjectExpression ::= Expression

Object ::=
   '{'
       (
           ( String ':' Json )
           (',' String ':' Json )*
       )?
   '}'

RelaxedObject ::=
   '{'
       (
           ( ( String | Identifier ) ':' RelaxedJson )
           (',' ( String | Identifier ) ':' RelaxedJson )*
           ','?
       )?
       ','?
   '}'

ObjectLiteral ::=
   '{'
       (
           ( ( String | Identifier ) ':' Literal )
           ( ',' ( String | Identifier ) ':' Literal )*
       )?
       ','?
   '}'

ObjectValue ::=
   '{'
       (
           (
               ( ( String | Identifier ) ':' Expression ) |
               ('...' ObjectExpression )
           )
           ( ','
               (
                   ( ( String | Identifier ) ':' Expression ) |
                   ('...' ObjectExpression )
               )
           )*
       )?
       ','?
   '}'

/* From afw_compile_parse_value.c                                             */

Json ::= Double | Integer | List | Object | String | 'true' | 'false' | 'null'

RelaxedJson ::= Double | Integer | RelaxedList | RelaxedObject | String | 'true' | 'false' | 'null'

/* From afw_compile_parse_value.c                                             */

ScalarLiteral ::= Double | Integer | String | 'true' | 'false' | 'null'
/* This may want to include Datatype(Literal) at some point too.              */

Literal ::= ListLiteral | ObjectLiteral | ScalarLiteral | 'undefined'

/* From afw_compile_parse_value.c                                             */
/*                                                                            */
/* Evaluation must be before ParenthesizedExpression so Lambda has first shot */
/* at parenthesis.                                                            */
/*                                                                            */

Value ::= ListValue |
        ObjectValue |
        ScalarLiteral |
        Evaluation |
        ParenthesizedExpression |
        TemplateString

/* From afw_compile_lexical.c                                                 */

HexDigit ::= [0-9a-fA-F]

/* From afw_compile_lexical.c                                                 */

BinaryDigit ::= [0-1]

/* From afw_compile_lexical.c                                                 */

OctalDigit ::= [0-7]

/* From afw_compile_lexical.c                                                 */
/*                                                                            */
/* Tab character                                                              */

TAB ::= #x0009
/* Vertical tab                                                               */

VT ::= #x000B
/* Forms feed                                                                 */

FF ::= #x000C
/* Line feed                                                                  */

LF ::= #x000A
/* Carriage return                                                            */

CR ::= #x000D
/* No break space                                                             */

NBSP ::= #x00A0
/* Line Separator                                                             */

LS ::= #x2028
/* Paragraph Separator                                                        */

PS ::= #x2029
/* Space Separator code point                                                 */

USP ::= "Any Unicode Space_Separator code point"
/* Zero Width No-Break Space (Unicode word join)                              */

ZWNBSP ::= #xFEFF
/* Whitespace                                                                 */

Whitespace ::= ( TAB | VT | FF | ZWNBSP | USP )+
/* Line Terminators                                                           */

EOL ::= LF | CR | LS | PS
/* Whitespace in source (between any production tokens without ws: explicit)  */

WhitespaceBetweenTokens ::= ( Whitespace | EOL | Comment )+
/* Comment is not allowed in strict mode.                                     */

Comment ::= InlineComment | BlockComment

InlineComment ::= '/*' ( [^*] | '*'+ [^*/] )* '*'* '*/'

BlockComment ::= '//' [^\n]* EOL

/* From afw_compile_lexical.c                                                 */

U ::= '\u' ( ( HexDigit HexDigit HexDigit HexDigit ) |
           ( '{' HexDigit+ '}' ) ) /* ws: explicit */

/* From afw_compile_lexical.c                                                 */

String ::= '"' Char* '"'

Char ::= [^\#x0-#x20] | '\"' | "\'" | '\`' | "\\" | '\/' |
        '\b' | '\f' | '\n' | '\r' | '\t' | U

UnicodeCodePoint ::= #x0-#x10FFFF

UnicodeNonControl ::= (UnicodeCodePoint - [^\#x0-#x1f] )

UnicodeNonSpaceNonControl ::= (UnicodeCodePoint - [^\#x0-#x20] )

/* From afw_compile_lexical.c                                                 */
/* Only DecimalIntegerLiteral is allowed in strict mode.                      */

Integer ::= '-'? (
    DecimalIntegerLiteral |
    BinaryIntegerLiteral |
    HexIntegerLiteral |
    OctetIntegerLiteral )

DecimalIntegerLiteral ::= '0' | ( [1-9] [0-9]* )

BinaryIntegerLiteral ::= '0' ('b' | 'B' ) BinaryDigit+

HexIntegerLiteral ::= '0' ('x' | 'X' ) HexDigit+

OctalIntegerLiteral ::= '0' ('o' | 'O' ) OctalDigit+
/* Infinity, INF and NaN are not allowed in strict mode.                      */

Double ::= '-'? ( ( DecimalIntegerLiteral '.' [0-9]+ ([eE] [+-]? [0-9]+)? ) |
   'Infinity' | 'INF' | 'NaN' )

/* From afw_compile_lexical.c                                                 */
/* ZWNJ - Unicode Zero-width non-joiner (0x200c)                              */
/* ZWJ - Unicode Zero-width joiner (0x200d)                                   */
/* ID_START is any codepoint with ID_START flag                               */
/* ID_CONTINUE is any codepoint with ID_CONTINUE flag                         */

IdentifierStart ::= ID_START | '$' | '_'

IdentifierContinue ::= ID_CONTINUE | '$' | ZWNJ | ZWJ

Identifier ::= IdentifierStart IdentifierContinue*

/* From afw_compile_lexical.c                                                 */
/* Reserved words can not be used as an identifier.                           */

ReservedWords ::= (
     PredefinedConstReservedWords |
     StatementReservedWords |
     UnusedButReservedWords )

/* From afw_compile_lexical.c                                                 */

PredefinedConstReservedWords ::= ( 'false' | 'INF' | 'Infinity' | 'NaN'  |
     'null' | 'true' | 'undefined' )

/* From afw_compile_lexical.c                                                 */

StatementReservedWords ::= ( 'break' | 'case' | 'catch' | 'const' |
     'continue' | 'default' | 'do' | 'else' | 'finally' | 'for' |
     'function' | 'if' | 'let' | 'return' | 'switch' |
     'throw' | 'try' | 'void' | 'while' )

/* From afw_compile_lexical.c                                                 */

UnusedButReservedWords ::= ( 'as' | 'async' | 'await' | 'class' | 'delete' |
     'export' | 'extends' | 'from' | 'import' | 'in' | 'interface' |
     'instanceof' | 'super' | 'this' | 'type' | 'typeof' | 'var' | 'with' )

/* From afw_compile_lexical.c                                                 */
/* End of source                                                              */

END ::=
