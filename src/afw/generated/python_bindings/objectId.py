# -*- coding: utf-8 -*-

# Generated by afwdev generate afw

import requests
import json

def bag_objectId(session, values=None):
    '''
    Makes a list from values

    Takes any number of objectId values and returns a list of list.

    Parameters:

        values (array):

    Returns:
    array: 
    '''

    request = session.Request()

    action = {
        "function": "bag<objectId>"
    }

    if values != None:
        action['values'] = values

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def bag_size_objectId(session, value):
    '''
    Returns the number of values in a bag

    This returns the integer number of values in list.

    Parameters:

        value (array):

    Returns:
    integer: 
    '''

    request = session.Request()

    action = {
        "function": "bag_size<objectId>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def eq_objectId(session, arg1, arg2):
    '''
    Checks for equal

    Determine if objectId arg1 is equal to the value of arg2 converted to the
    data type of arg1 then return the boolean result. Use 'eqx' ('===')
    instead if you want false to be returned if arg1 and arg2's data type
    don't match.

    Parameters:

        arg1 (objectId):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "eq<objectId>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def eqx_objectId(session, arg1, arg2):
    '''
    Checks for equal and type

    Determine if for objectId arg1 is equal to the value and data type of
    arg2 then return the boolean result. Use 'eq' ('==') instead if you want
    arg2 to be converted to the data type of arg1 before comparison.

    Parameters:

        arg1 (objectId):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "eqx<objectId>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def ge_objectId(session, arg1, arg2):
    '''
    Checks for greater than or equal

    Checks for objectId arg1 is greater than or equal to objectId arg2 and
    return the boolean result.

    Parameters:

        arg1 (objectId):

        arg2 (objectId):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "ge<objectId>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def gt_objectId(session, arg1, arg2):
    '''
    Checks for greater than

    Checks for objectId arg1 is greater than objectId arg2 and return the
    boolean result.

    Parameters:

        arg1 (objectId):

        arg2 (objectId):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "gt<objectId>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def is_objectId(session, value):
    '''
    Checks whether value is dataType objectId

    Checks whether value is dataType objectId and return the boolean result.

    Parameters:

        value (): Value to check

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "is<objectId>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def le_objectId(session, arg1, arg2):
    '''
    Checks for less than or equal

    Checks for objectId arg1 is less than or equal to objectId arg2 and
    return the boolean result.

    Parameters:

        arg1 (objectId):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "le<objectId>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def lt_objectId(session, arg1, arg2):
    '''
    Checks for less than

    Checks for objectId arg1 is less that objectId arg2 and return the
    boolean result.

    Parameters:

        arg1 (objectId):

        arg2 (objectId):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "lt<objectId>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def ne_objectId(session, arg1, arg2):
    '''
    Checks for not equal

    Determine if objectId arg1 is not equal to the value of arg2 converted to
    the data type of arg1 then return the boolean result. Use 'nex' ('!==')
    instead if you want true to be returned if arg1 and arg2's data type
    don't match.

    Parameters:

        arg1 (objectId):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "ne<objectId>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def nex_objectId(session, arg1, arg2):
    '''
    Checks for not equal value or type

    Determine if for objectId arg1 is not equal to the value or data type of
    arg2 then return the boolean result. Use 'ne' ('!=') instead if you want
    arg2 to be converted to the data type of arg1 before comparison.

    Parameters:

        arg1 (objectId):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "nex<objectId>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def objectId(session, value):
    '''
    Convert to data type objectId

    Converts value to data type objectId returning objectId result.

    Parameters:

        value (): Value to convert

    Returns:
    objectId: Converted value
    '''

    request = session.Request()

    action = {
        "function": "objectId",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def to_string_objectId(session, value):
    '''
    Converts value to string

    Converts objectId value to string. For list values, the to_string() value
    for each entry is returned separated with commas.

    Parameters:

        value (objectId): A objectId value.

    Returns:
    string: The string representation of the value.
    '''

    request = session.Request()

    action = {
        "function": "to_string<objectId>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

