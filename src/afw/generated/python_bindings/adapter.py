#!/usr/bin/env python3

##
# @file adapter.py
# @ingroup afw_bindings_python
# @brief This file contains the Python bindings for the adapter category.
#

# Generated by afwdev generate afw

import requests
import json

def adapter_objectCallback_signature(session, object, userData=None):
    """
    Signature used for adapter objectCallback

    This is the function signature for the objectCallback parameter in adapter
    functions. Calling this directly will throw a 'Do not call directly'
    error.

    Args:
        object (dict): This is the object from adapter or undefined if there
        are no more objects to return.

        userData (object): This is the value of the userData parameter when
        objectCallback was called.

    Returns:
        bool: Return true if this callback should not be called again for any
        reason such a limit exceeded or the desired object being found.
    """

    request = session.Request()

    action = {
        "function": "adapter_objectCallback_signature",
        "object": object
    }

    if userData != None:
        action['userData'] = userData

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def add_object(session, objectType, object, adapterId=None, objectId=None, journal=None, adapterTypeSpecific=None):
    """
    Add adaptive object

    Add an adaptive object to an adapter, specified by the adapterId, with a
    specified objectType. You may supply an optional objectId, if the
    underlying adapterId allows it.

    Args:
        adapterId (str): Id of adapter.

        objectType (str): Id of adaptive object type of object being added.

        object (dict): Object to add.

        objectId (str): Optional preferred objectId of object to add. The
        adapter may ignore this.

        journal (dict): The properties of this object will be added to the
        associated journal entry. Refer to
        /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names to
        avoid and for ones that have specific semantics.

        adapterTypeSpecific (dict): This is an optional object parameter with
        an objectType determined by the adapterType associated with the
        adapterId parameter. If the adapterType supports this parameter,
        adapter afw will have an adaptive object type with an id of:
        
        _AdaptiveAdapterTypeSpecific_${adapterType}_add_object
        
        where ${adapterType} is the adapter type id.

    Returns:
        dict: Resulting journal entry. Property 'objectId' is the objectId
        assigned by the adapter.
    """

    request = session.Request()

    action = {
        "function": "add_object",
        "objectType": objectType,
        "object": object
    }

    if adapterId != None:
        action['adapterId'] = adapterId

    if objectId != None:
        action['objectId'] = objectId

    if journal != None:
        action['journal'] = journal

    if adapterTypeSpecific != None:
        action['adapterTypeSpecific'] = adapterTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def add_object_with_uri(session, uri, object, journal=None, adapterTypeSpecific=None):
    """
    Add adaptive object with URI

    Add an adaptive object with a given URI.

    Args:
        uri (object): URI of object to add. If a URI begins with a single
        slash ('/'), it is the local object path. In the case of a local path,
        an optional preferred objectId of object can be including in URI which
        the adapter may ignore.

        object (dict): Object to add.

        journal (dict): The properties of this object will be added to the
        associated journal entry. Refer to
        /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names to
        avoid and for ones that have specific semantics.

        adapterTypeSpecific (dict): This is an optional object parameter with
        an objectType determined by the adapterType associated with the
        adapterId parameter. If the adapterType supports this parameter,
        adapter afw will have an adaptive object type with an id of:
        
        _AdaptiveAdapterTypeSpecific_${adapterType}_add_object
        
        Where ${adapterType} is the adapter type id.

    Returns:
        dict: Resulting journal entry. Property 'objectId' is the objectId
        assigned by the adapter.
    """

    request = session.Request()

    action = {
        "function": "add_object_with_uri",
        "uri": uri,
        "object": object
    }

    if journal != None:
        action['journal'] = journal

    if adapterTypeSpecific != None:
        action['adapterTypeSpecific'] = adapterTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def convert_AdaptiveQueryCriteria_to_query_string(session, queryCriteria, adapterId=None, objectType=None, style=None):
    """
    Convert _AdaptiveQueryCriteria_ to RQL

    This function converts an _AdaptiveQueryCriteria_ object to a query
    string.

    Args:
        queryCriteria (dict): An object type _AdaptiveQueryCriteria_ object.

        adapterId (str): This is the adapterId of adapter containing the
        objectType for validating and mapping this query. If not specified, no
        validation or mapping will occur.

        objectType (str): This is the objectType used in conjunction with the
        adapterId parameter. This parameter is only allowed and is required if
        the adapterId parameter is specified.

        style (int): The style of the query string produced. All of the styles
        are appropriately url encoded.
        
        0 - 'name=op=value' where '=op=' will be '==', '!=', '=ge=', etc. with
        conjunctions '&' (and) and '|' (or). Parentheses are placed around
        each group of like conjunctions except for outer '&'. (default)
        
        1 - the same as 1 with '=gte=' instead of '=ge=', '=lte=' instead of
        '=le=', '=eq=' instead of '=', and '=ne=' instead of '!='.
        
        2 - similar to 1 with ';' for '&' and ',' for '|'.
        
        3 - comparisons 'op(name,value)' where 'op' will be 'eq', 'ne', 'ge',
        ..., plus conjunctions 'and(list)' and 'or(list)' where 'array' is a
        comma separated list of any comparison or conjunction.

    Returns:
        str: Query string representation of the query criteria.
    """

    request = session.Request()

    action = {
        "function": "convert_AdaptiveQueryCriteria_to_query_string",
        "queryCriteria": queryCriteria
    }

    if adapterId != None:
        action['adapterId'] = adapterId

    if objectType != None:
        action['objectType'] = objectType

    if style != None:
        action['style'] = style

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def convert_query_string_to_AdaptiveQueryCriteria(session, queryString, adapterId=None, objectType=None):
    """
    Convert query string to _AdaptiveQueryCriteria_

    This function converts a query string to an _AdaptiveQueryCriteria_
    object.

    Args:
        queryString (str): The query string to convert.

        adapterId (str): This is the adapterId of adapter containing the
        objectType for validating and mapping this query. If not specified, no
        validation or mapping will occur.

        objectType (str): This is the objectType used in conjunction with the
        adapterId parameter. This parameter is only allowed and is required if
        the adapterId parameter is specified.

    Returns:
        dict: An object type _AdaptiveQueryCriteria_ object representing query
        string.
    """

    request = session.Request()

    action = {
        "function": "convert_query_string_to_AdaptiveQueryCriteria",
        "queryString": queryString
    }

    if adapterId != None:
        action['adapterId'] = adapterId

    if objectType != None:
        action['objectType'] = objectType

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def delete_object(session, objectType, objectId, adapterId=None, journal=None, adapterTypeSpecific=None):
    """
    Delete adaptive object

    Delete an adaptive object.

    Args:
        adapterId (str): Id of adapter containing object to delete.

        objectType (str): Id of adaptive object type of object to delete.

        objectId (str): Id of object to delete.

        journal (dict): The properties of this object will be added to the
        associated journal entry. Refer to
        /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names to
        avoid and for ones that have specific semantics.

        adapterTypeSpecific (dict): This is an optional object parameter with
        an objectType determined by the adapterType associated with the
        adapterId parameter. If the adapterType supports this parameter,
        adapter afw will have an adaptive object type with an id of:
        
        _AdaptiveAdapterTypeSpecific_${adapterType}_delete_object
        
        where ${adapterType} is the adapter type id.

    Returns:
        dict: Resulting journal entry.
    """

    request = session.Request()

    action = {
        "function": "delete_object",
        "objectType": objectType,
        "objectId": objectId
    }

    if adapterId != None:
        action['adapterId'] = adapterId

    if journal != None:
        action['journal'] = journal

    if adapterTypeSpecific != None:
        action['adapterTypeSpecific'] = adapterTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def delete_object_with_uri(session, uri, journal=None, adapterTypeSpecific=None):
    """
    Delete adaptive object with URI

    Delete an adaptive object with a given URI.

    Args:
        uri (object): URI of object to delete. If a URI begins with a single
        slash ('/'), it is the local object path.

        journal (dict): The properties of this object will be added to the
        associated journal entry. Refer to
        /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names to
        avoid and for ones that have specific semantics.

        adapterTypeSpecific (dict): This is an optional object parameter with
        an objectType determined by the adapterType associated with the
        adapterId parameter. If the adapterType supports this parameter,
        adapter afw will have an adaptive object type with an id of:
        
        _AdaptiveAdapterTypeSpecific_${adapterType}_delete_object
        
        where ${adapterType} is the adapter type id.

    Returns:
        dict: Resulting journal entry.
    """

    request = session.Request()

    action = {
        "function": "delete_object_with_uri",
        "uri": uri
    }

    if journal != None:
        action['journal'] = journal

    if adapterTypeSpecific != None:
        action['adapterTypeSpecific'] = adapterTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def get_object(session, objectType, objectId, adapterId=None, options=None, adapterTypeSpecific=None):
    """
    Get adaptive object

    Get an adaptive object from the adapter, specified by adapterId,
    objectType and objectId. Optional view options and adapter-specific
    options may be supplied to influence how the object is returned.

    Args:
        adapterId (str): Id of adapter containing object to retrieve.

        objectType (str): Id of adaptive object type of object to retrieve.

        objectId (str): Id of object to retrieve.

        options (dict): Object view options. See
        /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more
        information.

        adapterTypeSpecific (dict): This is an optional object parameter with
        an objectType determined by the adapterType associated with the
        adapterId parameter. If the adapterType supports this parameter,
        adapter afw will have an adaptive object type with an id of:
        
        _AdaptiveAdapterTypeSpecific_${adapterType}_get_object
        
        Where ${adapterType} is the adapter type id.

    Returns:
        dict: Object retrieved or NULL if not found.
    """

    request = session.Request()

    action = {
        "function": "get_object",
        "objectType": objectType,
        "objectId": objectId
    }

    if adapterId != None:
        action['adapterId'] = adapterId

    if options != None:
        action['options'] = options

    if adapterTypeSpecific != None:
        action['adapterTypeSpecific'] = adapterTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def get_object_with_uri(session, uri, options=None, adapterTypeSpecific=None):
    """
    Get adaptive object with URI

    Get an object with a given URI.

    Args:
        uri (object): URI of object to retrieve. If a URI begins with a single
        slash ('/'), it is the local object path.

        options (dict): Object view options. See
        /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more
        information.

        adapterTypeSpecific (dict): This is an optional object parameter with
        an objectType determined by the adapterType associated with the
        adapterId parameter. If the adapterType supports this parameter,
        adapter afw will have an adaptive object type with an id of:
        
        _AdaptiveAdapterTypeSpecific_${adapterType}_get_object
        
        where ${adapterType} is the adapter type id.

    Returns:
        dict: Object retrieved or NULL if not found.
    """

    request = session.Request()

    action = {
        "function": "get_object_with_uri",
        "uri": uri
    }

    if options != None:
        action['options'] = options

    if adapterTypeSpecific != None:
        action['adapterTypeSpecific'] = adapterTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def modify_object(session, objectType, objectId, entries, adapterId=None, journal=None, adapterTypeSpecific=None):
    """
    Modify adaptive object

    Modify an adaptive object.

    Args:
        adapterId (str): Id of adapter containing object to modify.

        objectType (str): Id of adaptive object type of object to modify.

        objectId (str): Id of object to modify.

        entries (list): List of modifications. Entries are of the form:
        
            [         'add_value',         'property name' or ['property
        name', ... ],         value     ]
        
            [         'remove_property',         'property name' or ['property
        name', ... ]     ]
        
            [         'remove_value',         'property name' or ['property
        name', ... ],         value     ]
        
            [         'set_property',         'property name' or ['property
        name', ... ],         value     ]

        journal (dict): The properties of this object will be added to the
        associated journal entry. Refer to
        /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names to
        avoid and for ones that have specific semantics.

        adapterTypeSpecific (dict): This is an optional object parameter with
        an objectType determined by the adapterType associated with the
        adapterId parameter. If the adapterType supports this parameter,
        adapter afw will have an adaptive object type with an id of:
        
        _AdaptiveAdapterTypeSpecific_${adapterType}_modify_object
        
        Where ${adapterType} is the adapter type id.

    Returns:
        dict: Resulting journal entry.
    """

    request = session.Request()

    action = {
        "function": "modify_object",
        "objectType": objectType,
        "objectId": objectId,
        "entries": entries
    }

    if adapterId != None:
        action['adapterId'] = adapterId

    if journal != None:
        action['journal'] = journal

    if adapterTypeSpecific != None:
        action['adapterTypeSpecific'] = adapterTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def modify_object_with_uri(session, uri, entries, journal=None, adapterTypeSpecific=None):
    """
    Modify adaptive object with URI

    Modify an adaptive object with a given URI.

    Args:
        uri (object): URI of object to modify. If a URI begins with a single
        slash ('/'), it is the local object path.

        entries (list): List of asserts and modifications. Entries are of the
        form:
        
            [         'add_value',         'property name' or ['property
        name', ... ],         value     ]
        
            [         'remove_property',         'property name' or ['property
        name', ... ]     ]
        
            [         'remove_value',         'property name' or ['property
        name', ... ],         value     ]
        
            [         'set_property',         'property name' or ['property
        name', ... ],         value     ]

        journal (dict): The properties of this object will be added to the
        associated journal entry. Refer to
        /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names to
        avoid and for ones that have specific semantics.

        adapterTypeSpecific (dict): This is an optional object parameter with
        an objectType determined by the adapterType associated with the
        adapterId parameter. If the adapterType supports this parameter,
        adapter afw will have an adaptive object type with an id of:
        
        _AdaptiveAdapterTypeSpecific_${adapterType}_modify_object
        
        Where ${adapterType} is the adapter type id.

    Returns:
        dict: Resulting journal entry.
    """

    request = session.Request()

    action = {
        "function": "modify_object_with_uri",
        "uri": uri,
        "entries": entries
    }

    if journal != None:
        action['journal'] = journal

    if adapterTypeSpecific != None:
        action['adapterTypeSpecific'] = adapterTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def reconcile_object(session, object, checkOnly=None):
    """
    Reconcile adaptive object

    Reconcile an adaptive object.

    Args:
        object (dict): An object that has been retrieved with object options
        reconcilable, and whose properties have been modified. A modify_object
        request will be produced reflecting the difference between the
        original object and this unmodified object.

        checkOnly (bool): Produce the modify_object request but don't execute
        it. The returned journal enter will contain the modify_object request.

    Returns:
        dict: Resulting journal entry.
    """

    request = session.Request()

    action = {
        "function": "reconcile_object",
        "object": object
    }

    if checkOnly != None:
        action['checkOnly'] = checkOnly

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def replace_object(session, objectType, objectId, object, adapterId=None, journal=None, adapterTypeSpecific=None):
    """
    Replace adaptive object

    Replace an adaptive object.

    Args:
        adapterId (str): Id of adapter containing object to replace.

        objectType (str): Id of adaptive object type of object to replace.

        objectId (str): Id of object to replace.

        object (dict): Replacement object.

        journal (dict): The properties of this object will be added to the
        associated journal entry. Refer to
        /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names to
        avoid and for ones that have specific semantics.

        adapterTypeSpecific (dict): This is an optional object parameter with
        an objectType determined by the adapterType associated with the
        adapterId parameter. If the adapterType supports this parameter,
        adapter afw will have an adaptive object type with an id of:
        
        _AdaptiveAdapterTypeSpecific_${adapterType}_replace_object
        
        Where ${adapterType} is the adapter type id.

    Returns:
        dict: Resulting journal entry.
    """

    request = session.Request()

    action = {
        "function": "replace_object",
        "objectType": objectType,
        "objectId": objectId,
        "object": object
    }

    if adapterId != None:
        action['adapterId'] = adapterId

    if journal != None:
        action['journal'] = journal

    if adapterTypeSpecific != None:
        action['adapterTypeSpecific'] = adapterTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def replace_object_with_uri(session, uri, object, journal=None, adapterTypeSpecific=None):
    """
    Replace adaptive object with URI

    Replace an adaptive object with a given URI.

    Args:
        uri (object): URI of object to replace. If a URI begins with a single
        slash ('/'), it is the local object path.

        object (dict): Replacement object.

        journal (dict): The properties of this object will be added to the
        associated journal entry. Refer to
        /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names to
        avoid and for ones that have specific semantics.

        adapterTypeSpecific (dict): This is an optional object parameter with
        an objectType determined by the adapterType associated with the
        adapterId parameter. If the adapterType supports this parameter,
        adapter afw will have an adaptive object type with an id of:
        
        _AdaptiveAdapterTypeSpecific_${adapterType}_replace_object
        
        Where ${adapterType} is the adapter type id.

    Returns:
        dict: Resulting journal entry.
    """

    request = session.Request()

    action = {
        "function": "replace_object_with_uri",
        "uri": uri,
        "object": object
    }

    if journal != None:
        action['journal'] = journal

    if adapterTypeSpecific != None:
        action['adapterTypeSpecific'] = adapterTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def retrieve_objects(session, objectType, adapterId=None, queryCriteria=None, options=None, adapterTypeSpecific=None):
    """
    Retrieve adaptive objects

    This function retrieves adaptive objects from an adapter, specified by
    adapterId, which match the type specified by objectType.
    
    The optional queryCriteria is used to filter the adaptive objects
    returned. Use the objectOptions parameter to influence how the objects are
    viewed.
    
    Options, specific to the adapterId, can be optionally supplied.

    Args:
        adapterId (str): Id of adapter containing objects to retrieve.

        objectType (str): Id of adaptive object type of objects to retrieve.

        queryCriteria (dict): This is the query criteria for objects to be
        retrieved. If not specified, all objects will be retrieved.

        options (dict): Object view options. See
        /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more
        information.

        adapterTypeSpecific (dict): This is an optional object parameter with
        an objectType determined by the adapterType associated with the
        adapterId parameter. If the adapterType supports this parameter,
        adapter afw will have an adaptive object type with an id of:
        
        _AdaptiveAdapterTypeSpecific_${adapterType}_retrieve_objects
        
        Where ${adapterType} is the adapter type id.

    Returns:
        list: This is the array of objects retrieved.
    """

    request = session.Request()

    action = {
        "function": "retrieve_objects",
        "objectType": objectType
    }

    if adapterId != None:
        action['adapterId'] = adapterId

    if queryCriteria != None:
        action['queryCriteria'] = queryCriteria

    if options != None:
        action['options'] = options

    if adapterTypeSpecific != None:
        action['adapterTypeSpecific'] = adapterTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def retrieve_objects_to_callback(session, objectCallback, userData, objectType, adapterId=None, queryCriteria=None, options=None, adapterTypeSpecific=None):
    """
    Retrieve adaptive objects

    This function retrieves adaptive objects from an adapter, specified by
    adapterId, which match the type specified by objectType.
    
    Each object is passed to the callback as it's retrieved.
    
    The optional queryCriteria is used to filter the adaptive objects
    returned. Use the objectOptions parameter to influence how the objects are
    viewed.
    
    Options, specific to the adapterId, can be optionally supplied.

    Args:
        objectCallback (object): If this is specified, this function is called
        once for each object retrieved instead of adding the object to the
        return array. Parameter object will be an object retrieved or
        undefined if there are no more objects. This function should return
        true if it wants to abort the retrieve request.

        userData (object): This value is passed to the objectCallback function
        in the userData parameter.

        adapterId (str): Id of adapter containing objects to retrieve.

        objectType (str): Id of adaptive object type of objects to retrieve.

        queryCriteria (dict): This is the query criteria for objects to be
        retrieved. If not specified, all objects will be retrieved.

        options (dict): Object view options. See
        /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more
        information.

        adapterTypeSpecific (dict): This is an optional object parameter with
        an objectType determined by the adapterType associated with the
        adapterId parameter. If the adapterType supports this parameter,
        adapter afw will have an adaptive object type with an id of:
        
        
        _AdaptiveAdapterTypeSpecific_${adapterType}_retrieve_objects_to_callback
        
        Where ${adapterType} is the adapter type id.

    Returns:
        object:
    """

    request = session.Request()

    action = {
        "function": "retrieve_objects_to_callback",
        "objectCallback": objectCallback,
        "userData": userData,
        "objectType": objectType
    }

    if adapterId != None:
        action['adapterId'] = adapterId

    if queryCriteria != None:
        action['queryCriteria'] = queryCriteria

    if options != None:
        action['options'] = options

    if adapterTypeSpecific != None:
        action['adapterTypeSpecific'] = adapterTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def retrieve_objects_to_response(session, objectType, adapterId=None, queryCriteria=None, options=None, adapterTypeSpecific=None):
    """
    Retrieve adaptive objects to a response

    This function retrieves adaptive objects from an adapter, specified by
    adapterId, which match the type specified by objectType.
    
    This function is only allowed when called during a request with content
    type 'application/x-afw'. An '_AdaptiveResponse_' object is written to the
    request's response as each object is retrieved. This '_AdaptiveResponse_'
    object has a 'result' property containing the retrieved object and a
    'intermediate' property set to true.
    
    The optional queryCriteria is used to filter the adaptive objects
    returned. Use the objectOptions parameter to influence how the objects are
    viewed.
    
    Options, specific to the adapterId, can be optionally supplied.

    Args:
        adapterId (str): Id of adapter containing objects to retrieve.

        objectType (str): Id of adaptive object type of objects to retrieve.

        queryCriteria (dict): This is the query criteria for objects to be
        retrieved. If not specified, all objects will be retrieved.

        options (dict): Object view options. See
        /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more
        information.

        adapterTypeSpecific (dict): This is an optional object parameter with
        an objectType determined by the adapterType associated with the
        adapterId parameter. If the adapterType supports this parameter,
        adapter afw will have an adaptive object type with an id of:
        
        _AdaptiveAdapterTypeSpecific_${adapterType}_retrieve_objects
        
        Where ${adapterType} is the adapter type id.

    Returns:
        object:
    """

    request = session.Request()

    action = {
        "function": "retrieve_objects_to_response",
        "objectType": objectType
    }

    if adapterId != None:
        action['adapterId'] = adapterId

    if queryCriteria != None:
        action['queryCriteria'] = queryCriteria

    if options != None:
        action['options'] = options

    if adapterTypeSpecific != None:
        action['adapterTypeSpecific'] = adapterTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def retrieve_objects_to_stream(session, streamNumber, objectType, adapterId=None, queryCriteria=None, options=None, adapterTypeSpecific=None):
    """
    Retrieve adaptive objects to a stream

    This function retrieves adaptive objects from an adapter, specified by
    adapterId, which match the type specified by objectType.
    
    Each object is written to the 'streamId' stream as it's retrieved.
    
    The optional queryCriteria is used to filter the adaptive objects
    returned. Use the objectOptions parameter to influence how the objects are
    viewed.
    
    Options, specific to the adapterId, can be optionally supplied.

    Args:
        streamNumber (int): Stream number objects will be written to as they
        are retrieved.

        adapterId (str): Id of adapter containing objects to retrieve.

        objectType (str): Id of adaptive object type of objects to retrieve.

        queryCriteria (dict): This is the query criteria for objects to be
        retrieved. If not specified, all objects will be retrieved.

        options (dict): Object view options. See
        /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more
        information.

        adapterTypeSpecific (dict): This is an optional object parameter with
        an objectType determined by the adapterType associated with the
        adapterId parameter. If the adapterType supports this parameter,
        adapter afw will have an adaptive object type with an id of:
        
        _AdaptiveAdapterTypeSpecific_${adapterType}_retrieve_objects
        
        Where ${adapterType} is the adapter type id.

    Returns:
        object:
    """

    request = session.Request()

    action = {
        "function": "retrieve_objects_to_stream",
        "streamNumber": streamNumber,
        "objectType": objectType
    }

    if adapterId != None:
        action['adapterId'] = adapterId

    if queryCriteria != None:
        action['queryCriteria'] = queryCriteria

    if options != None:
        action['options'] = options

    if adapterTypeSpecific != None:
        action['adapterTypeSpecific'] = adapterTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def retrieve_objects_with_uri(session, uri, options=None, adapterTypeSpecific=None):
    """
    Retrieve adaptive object with URI

    Retrieve adaptive objects with a given URI.
    
    The optional queryCriteria is used to filter the adaptive objects
    returned. Use the objectOptions parameter to influence how the objects are
    viewed.
    
    Options, specific to the adapterId, can be optionally supplied.

    Args:
        uri (object): URI of objects to retrieve. If a URI begins with a
        single slash ('/'), it is the local object path. A query string can be
        specified.

        options (dict): Object view options. See
        /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more
        information.

        adapterTypeSpecific (dict): This is an optional object parameter with
        an objectType determined by the adapterType associated with the
        adapterId parameter. If the adapterType supports this parameter,
        adapter afw will have an adaptive object type with an id of:
        
        _AdaptiveAdapterTypeSpecific_${adapterType}_retrieve_objects
        
        Where ${adapterType} is the adapter type id.

    Returns:
        list: This is the array of objects retrieved.
    """

    request = session.Request()

    action = {
        "function": "retrieve_objects_with_uri",
        "uri": uri
    }

    if options != None:
        action['options'] = options

    if adapterTypeSpecific != None:
        action['adapterTypeSpecific'] = adapterTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def retrieve_objects_with_uri_to_callback(session, objectCallback, userData, uri, options=None, adapterTypeSpecific=None):
    """
    Retrieve adaptive object with URI

    Retrieve adaptive objects with a given URI.
    
    Each object is passed to the callback as it's retrieved.
    
    The optional queryCriteria is used to filter the adaptive objects
    returned. Use the objectOptions parameter to influence how the objects are
    viewed.
    
    Options, specific to the adapterId, can be optionally supplied.

    Args:
        objectCallback (object): If this is specified, this function is called
        once for each object retrieved instead of adding the object to the
        return array. Parameter object will be an object retrieved or
        undefined if there are no more objects. This function should return
        true if it wants to abort the retrieve request.

        userData (object): This is the value passed to the objectCallback
        function in the userData parameter.

        uri (object): URI of objects to retrieve. If a URI begins with a
        single slash ('/'), it is the local object path. A query string can be
        specified.

        options (dict): Object view options. See
        /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more
        information.

        adapterTypeSpecific (dict): This is an optional object parameter with
        an objectType determined by the adapterType associated with the
        adapterId parameter. If the adapterType supports this parameter,
        adapter afw will have an adaptive object type with an id of:
        
        _AdaptiveAdapterTypeSpecific_${adapterType}_retrieve_objects
        
        Where ${adapterType} is the adapter type id.

    Returns:
        object:
    """

    request = session.Request()

    action = {
        "function": "retrieve_objects_with_uri_to_callback",
        "objectCallback": objectCallback,
        "userData": userData,
        "uri": uri
    }

    if options != None:
        action['options'] = options

    if adapterTypeSpecific != None:
        action['adapterTypeSpecific'] = adapterTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def retrieve_objects_with_uri_to_response(session, uri, options=None, adapterTypeSpecific=None):
    """
    Retrieve adaptive object with URI to response

    This function retrieves adaptive objects with a given URI.
    
    This function is only allowed when called during a request with content
    type 'application/x-afw'. An '_AdaptiveResponse_' object is written to the
    request's response as each object is retrieved. This '_AdaptiveResponse_'
    object has a 'result' property containing the retrieved object and a
    'partial' property set to true.
    
    The optional queryCriteria is used to filter the adaptive objects
    returned. Use the objectOptions parameter to influence how the objects are
    viewed.
    
    Options, specific to the adapterId, can be optionally supplied.

    Args:
        uri (object): URI of objects to retrieve. If a URI begins with a
        single slash ('/'), it is the local object path. A query string can be
        specified.

        options (dict): Object view options. See
        /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more
        information.

        adapterTypeSpecific (dict): This is an optional object parameter with
        an objectType determined by the adapterType associated with the
        adapterId parameter. If the adapterType supports this parameter,
        adapter afw will have an adaptive object type with an id of:
        
        _AdaptiveAdapterTypeSpecific_${adapterType}_retrieve_objects
        
        Where ${adapterType} is the adapter type id.

    Returns:
        object:
    """

    request = session.Request()

    action = {
        "function": "retrieve_objects_with_uri_to_response",
        "uri": uri
    }

    if options != None:
        action['options'] = options

    if adapterTypeSpecific != None:
        action['adapterTypeSpecific'] = adapterTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def retrieve_objects_with_uri_to_stream(session, streamNumber, uri, options=None, adapterTypeSpecific=None):
    """
    Retrieve adaptive object with URI to stream

    This function retrieves adaptive objects with a given URI.
    
    Each object is written to the 'streamId' stream as it's retrieved.
    
    The optional queryCriteria is used to filter the adaptive objects
    returned. Use the objectOptions parameter to influence how the objects are
    viewed.
    
    Options, specific to the adapterId, can be optionally supplied.

    Args:
        streamNumber (int): Stream number objects will be written to as they
        are retrieved.

        uri (object): URI of objects to retrieve. If a URI begins with a
        single slash ('/'), it is the local object path. A query string can be
        specified.

        options (dict): Object view options. See
        /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more
        information.

        adapterTypeSpecific (dict): This is an optional object parameter with
        an objectType determined by the adapterType associated with the
        adapterId parameter. If the adapterType supports this parameter,
        adapter afw will have an adaptive object type with an id of:
        
        _AdaptiveAdapterTypeSpecific_${adapterType}_retrieve_objects
        
        Where ${adapterType} is the adapter type id.

    Returns:
        object:
    """

    request = session.Request()

    action = {
        "function": "retrieve_objects_with_uri_to_stream",
        "streamNumber": streamNumber,
        "uri": uri
    }

    if options != None:
        action['options'] = options

    if adapterTypeSpecific != None:
        action['adapterTypeSpecific'] = adapterTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def update_object(session, objectType, objectId, object, adapterId=None, journal=None, adapterTypeSpecific=None):
    """
    Update adaptive object

    Update an adaptive object.

    Args:
        adapterId (str): Id of adapter containing object to update.

        objectType (str): Id of adaptive object type of object to update.

        objectId (str): Id of object to update.

        object (dict): Object containing properties to replace in existing
        object. You can use object_modify instead to update properties of
        embedded objects and arrays, as well as to modify individual values of
        the object.

        journal (dict): The properties of this object will be added to the
        associated journal entry. Refer to
        /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names to
        avoid and for ones that have specific semantics.

        adapterTypeSpecific (dict): This is an optional object parameter with
        an objectType determined by the adapterType associated with the
        adapterId parameter. If the adapterType supports this parameter,
        adapter afw will have an adaptive object type with an id of:
        
        _AdaptiveAdapterTypeSpecific_${adapterType}_modify_object
        
        Where ${adapterType} is the adapter type id.

    Returns:
        dict: Resulting journal entry.
    """

    request = session.Request()

    action = {
        "function": "update_object",
        "objectType": objectType,
        "objectId": objectId,
        "object": object
    }

    if adapterId != None:
        action['adapterId'] = adapterId

    if journal != None:
        action['journal'] = journal

    if adapterTypeSpecific != None:
        action['adapterTypeSpecific'] = adapterTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def update_object_with_uri(session, uri, object, journal=None, adapterTypeSpecific=None):
    """
    Update adaptive object with URI

    Update an adaptive object with a given URI.

    Args:
        uri (object): URI of object to update. If a URI begins with a single
        slash ('/'), it is the local object path.

        object (dict): Object containing properties to replace in existing
        object. You can use object_modify instead to update properties of
        embedded objects and arrays, as well as to modify individual values of
        the object.

        journal (dict): The properties of this object will be added to the
        associated journal entry. Refer to
        /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names to
        avoid and for ones that have specific semantics.

        adapterTypeSpecific (dict): This is an optional object parameter with
        an objectType determined by the adapterType associated with the
        adapterId parameter. If the adapterType supports this parameter,
        adapter afw will have an adaptive object type with an id of:
        
        _AdaptiveAdapterTypeSpecific_${adapterType}_modify_object
        
        Where ${adapterType} is the adapter type id.

    Returns:
        dict: Resulting journal entry.
    """

    request = session.Request()

    action = {
        "function": "update_object_with_uri",
        "uri": uri,
        "object": object
    }

    if journal != None:
        action['journal'] = journal

    if adapterTypeSpecific != None:
        action['adapterTypeSpecific'] = adapterTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

