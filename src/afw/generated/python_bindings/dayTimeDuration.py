# -*- coding: utf-8 -*-

# Generated by afwdev generate afw

import requests
import json

def at_least_one_member_of_dayTimeDuration(session, list1, list2):
    '''
    Checks for at least one value in common

    Returns boolean true if at least one value in dayTimeDuration list1 is in
    dayTimeDuration list2.

    Parameters:

        list1 (list): The first list.

        list2 (list): The second list.

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "at_least_one_member_of<dayTimeDuration>",
        "list1": list1,
        "list2": list2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def bag_dayTimeDuration(session, values=None):
    '''
    Makes a list from values

    Takes any number of dayTimeDuration values and returns a list of list.

    Parameters:

        values (list):

    Returns:
    list: 
    '''

    request = session.Request()

    action = {
        "function": "bag<dayTimeDuration>"
    }

    if values != None:
        action['values'] = values

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def bag_size_dayTimeDuration(session, value):
    '''
    Returns the number of values in a bag

    This returns the integer number of values in list.

    Parameters:

        value (list):

    Returns:
    integer: 
    '''

    request = session.Request()

    action = {
        "function": "bag_size<dayTimeDuration>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def dayTimeDuration(session, value):
    '''
    Convert to data type dateTimeDuration

    Converts value to data type dayTimeDuration returning dayTimeDuration
    result.

    Parameters:

        value (): Value to convert

    Returns:
    dayTimeDuration: Converted value
    '''

    request = session.Request()

    action = {
        "function": "dayTimeDuration",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def eq_dayTimeDuration(session, arg1, arg2):
    '''
    Checks for equal

    Determine if dayTimeDuration arg1 is equal to the value of arg2 converted
    to the data type of arg1 then return the boolean result. Use "eqx"
    ("===") instead if you want false to be returned if arg1 and arg2's data
    type don't match.

    Parameters:

        arg1 (dayTimeDuration):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "eq<dayTimeDuration>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def eqx_dayTimeDuration(session, arg1, arg2):
    '''
    Checks for equal and type

    Determine if for dayTimeDuration arg1 is equal to the value and data type
    of arg2 then return the boolean result. Use "eq" ("==") instead if you
    want arg2 to be converted to the data type of arg1 before comparison.

    Parameters:

        arg1 (dayTimeDuration):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "eqx<dayTimeDuration>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def ge_dayTimeDuration(session, arg1, arg2):
    '''
    Checks for greater than or equal

    Checks for dayTimeDuration arg1 is greater than or equal to
    dayTimeDuration arg2 and return the boolean result.

    Parameters:

        arg1 (dayTimeDuration):

        arg2 (dayTimeDuration):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "ge<dayTimeDuration>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def gt_dayTimeDuration(session, arg1, arg2):
    '''
    Checks for greater than

    Checks for dayTimeDuration arg1 is greater than dayTimeDuration arg2 and
    return the boolean result.

    Parameters:

        arg1 (dayTimeDuration):

        arg2 (dayTimeDuration):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "gt<dayTimeDuration>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def intersection_dayTimeDuration(session, list1, list2):
    '''
    Returns intersection of two lists

    Returns a list of dayTimeDuration with the values that are common to both
    list of dayTimeDuration list1 and list2.

    Parameters:

        list1 (list): The first list.

        list2 (list): The second list.

    Returns:
    list: 
    '''

    request = session.Request()

    action = {
        "function": "intersection<dayTimeDuration>",
        "list1": list1,
        "list2": list2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def is_dayTimeDuration(session, value):
    '''
    Checks whether value is dataType dayTimeDuration

    Checks whether value is dataType dayTimeDuration and return the boolean
    result.

    Parameters:

        value (): Value to check

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "is<dayTimeDuration>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def is_in_dayTimeDuration(session, value, list):
    '''
    Checks whether a value is in a list

    Checks whether dayTimeDuration value is in list of dayTimeDuration list
    and returns the boolean result.

    Parameters:

        value (dayTimeDuration):

        list (list):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "is_in<dayTimeDuration>",
        "value": value,
        "list": list
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def le_dayTimeDuration(session, arg1, arg2):
    '''
    Checks for less than or equal

    Checks for dayTimeDuration arg1 is less than or equal to dayTimeDuration
    arg2 and return the boolean result.

    Parameters:

        arg1 (dayTimeDuration):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "le<dayTimeDuration>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def lt_dayTimeDuration(session, arg1, arg2):
    '''
    Checks for less than

    Checks for dayTimeDuration arg1 is less that dayTimeDuration arg2 and
    return the boolean result.

    Parameters:

        arg1 (dayTimeDuration):

        arg2 (dayTimeDuration):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "lt<dayTimeDuration>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def ne_dayTimeDuration(session, arg1, arg2):
    '''
    Checks for not equal

    Determine if dayTimeDuration arg1 is not equal to the value of arg2
    converted to the data type of arg1 then return the boolean result. Use
    "nex" ("!==") instead if you want true to be returned if arg1 and arg2's
    data type don't match.

    Parameters:

        arg1 (dayTimeDuration):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "ne<dayTimeDuration>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def nex_dayTimeDuration(session, arg1, arg2):
    '''
    Checks for not equal value or type

    Determine if for dayTimeDuration arg1 is not equal to the value or data
    type of arg2 then return the boolean result. Use "ne" ("!=") instead if
    you want arg2 to be converted to the data type of arg1 before comparison.

    Parameters:

        arg1 (dayTimeDuration):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "nex<dayTimeDuration>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def one_and_only_dayTimeDuration(session, list):
    '''
    Converts a one value list to a dayTimeDuration value

    This converts a list of dayTimeDuration values that contains one value to
    a single dayTimeDuration value.

    Parameters:

        list (list):

    Returns:
    dayTimeDuration: 
    '''

    request = session.Request()

    action = {
        "function": "one_and_only<dayTimeDuration>",
        "list": list
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def set_equals_dayTimeDuration(session, list1, list2):
    '''
    Checks whether two lists are subsets of each other

    Returns boolean true if dayTimeDuration list1 and dayTimeDuration list2
    are subsets of each other and return the boolean result.

    Parameters:

        list1 (list):

        list2 (list):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "set_equals<dayTimeDuration>",
        "list1": list1,
        "list2": list2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def subset_dayTimeDuration(session, list1, list2):
    '''
    Determines if the first list is a subset of second list

    Returns boolean true if the unique values in dayTimeDuration list1 are
    all in dayTimeDuration list2.

    Parameters:

        list1 (list): The first list.

        list2 (list): The second list.

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "subset<dayTimeDuration>",
        "list1": list1,
        "list2": list2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def to_string_dayTimeDuration(session, value):
    '''
    Converts value to string

    Converts dayTimeDuration value to string. For list values, the
    to_string() value for each entry is returned separated with commas.

    Parameters:

        value (dayTimeDuration): A dayTimeDuration value.

    Returns:
    string: The string representation of the value.
    '''

    request = session.Request()

    action = {
        "function": "to_string<dayTimeDuration>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def union_dayTimeDuration(session, lists):
    '''
    Returns union of two or more string lists

    Returns a list of dayTimeDuration contains all of the unique values in
    two or more list of dayTimeDuration values.

    Parameters:

        lists (list): Two or more lists.

    Returns:
    list: 
    '''

    request = session.Request()

    action = {
        "function": "union<dayTimeDuration>",
        "lists": lists
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

