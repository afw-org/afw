# -*- coding: utf-8 -*-

# Generated by afwdev generate afw

import requests
import json

def index_create(session, key, adaptorId=None, value=None, objectType=None, filter=None, options=None, retroactive=None, test=None):
    '''
    Create index definition

    Create an index definition.

    Parameters:

        adaptorId (string): Id of adaptor.

        key (string): Name of the property index to be created.

        value (string): Expression to calculate the index value(s).

        objectType (string): Object Type(s) this index may apply to.

        filter (string): Expression to determine if this index applies to a
        particular object.

        options (string): Indexing options.

        retroactive (boolean): Retroactively generate indexes for existing
        objects.

        test (boolean): Test create (don't actually perform).

    Returns:
    object: Object response from the indexing process
    '''

    request = session.Request()

    action = {
        "function": "index_create",
        "key": key
    }

    if adaptorId != None:
        action['adaptorId'] = adaptorId

    if value != None:
        action['value'] = value

    if objectType != None:
        action['objectType'] = objectType

    if filter != None:
        action['filter'] = filter

    if options != None:
        action['options'] = options

    if retroactive != None:
        action['retroactive'] = retroactive

    if test != None:
        action['test'] = test

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def index_list(session, adaptorId=None, objectType=None):
    '''
    List property indexes

    List property indexes

    Parameters:

        adaptorId (string): Id of adaptor.

        objectType (string): Id of adaptive object type indexes

    Returns:
    object: Object response from the index repair process
    '''

    request = session.Request()

    action = {
        "function": "index_list"
    }

    if adaptorId != None:
        action['adaptorId'] = adaptorId

    if objectType != None:
        action['objectType'] = objectType

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def index_remove(session, key, adaptorId=None):
    '''
    Remove index definition

    Remove an index definition.

    Parameters:

        adaptorId (string): Id of adaptor.

        key (string): The index key to be removed.

    Returns:
    object: Object response from the indexing process
    '''

    request = session.Request()

    action = {
        "function": "index_remove",
        "key": key
    }

    if adaptorId != None:
        action['adaptorId'] = adaptorId

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

