# -*- coding: utf-8 -*-

# Generated by afwdev generate afw

import requests
import json

def all_of(session, predicate, values):
    '''
    All values pass a test

    Returns true if all values in a list pass the predicate test.

    Parameters:

        predicate (function): This function is called for each value in the
        first list in values or until false is returned. If no calls return
        false, the result is true.

        values (): These are the parameters passed to predicate with the
        exception that the first list is passed one value at a time. At least
        one list is required.

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "all_of",
        "predicate": predicate,
        "values": values
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def all_of_all(session, predicate, list1, list2):
    '''
    All combinations true

    Returns true if the result of calling predicate with all of the
    combination of values from list1 and list2 returns true.

    Parameters:

        predicate (function): The predicate is passed two parameters, the
        first is a value from list1 and the second is a value from list2.

        list1 (list):

        list2 (list):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "all_of_all",
        "predicate": predicate,
        "list1": list1,
        "list2": list2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def all_of_any(session, predicate, list1, list2):
    '''
    Combinations of all in list1 and any in list2 true

    This function returns true if the result of calling predicate with all of
    the combination of values from list1 and any of the values of list2
    returns true.

    Parameters:

        predicate (function): The predicate is passed two parameters, the
        first is a value from list1 and the second is a value from list2.

        list1 (list):

        list2 (list):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "all_of_any",
        "predicate": predicate,
        "list1": list1,
        "list2": list2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def any_of(session, predicate, values):
    '''
    Any values pass a test

    Returns true if any value in a list pass the predicate test.

    Parameters:

        predicate (function): This function is called for each value in the
        first list in values or until true is returned. If no calls return
        true, the result is false.

        values (): These are the parameters passed to predicate with the
        exception that the first list is passed one value at a time. At least
        one list is required.

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "any_of",
        "predicate": predicate,
        "values": values
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def any_of_all(session, predicate, list1, list2):
    '''
    Combinations of any in list1 and all in list2 true

    Returns true if the result of calling predicate with all of the
    combination of values from list2 and any of the values of list1 returns
    true.

    Parameters:

        predicate (function): The predicate is passed two parameters, the
        first is a value from list1 and the second is a value from list2.

        list1 (list):

        list2 (list):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "any_of_all",
        "predicate": predicate,
        "list1": list1,
        "list2": list2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def any_of_any(session, predicate, list1, list2):
    '''
    Any combinations true

    This function returns true if the result of calling predicate with any of
    the combination of values from list1 and list2 returns true.

    Parameters:

        predicate (function): The predicate is passed two parameters, the
        first is a value from list1 and the second is a value from list2.

        list1 (list):

        list2 (list):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "any_of_any",
        "predicate": predicate,
        "list1": list1,
        "list2": list2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def filter(session, predicate, values):
    '''
    Filter a list

    This produces a list containing only values from another list that pass a
    predicate test.

    Parameters:

        predicate (function): This is a boolean function that is called to
        determine if a list entry should be included in the returned list.

        values (): These are the values passed to the predicate with the
        exception that the first list is passed as the single current value
        from the list. At least one list is required.

    Returns:
    list: This is the resulting filtered list.
    '''

    request = session.Request()

    action = {
        "function": "filter",
        "predicate": predicate,
        "values": values
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def find(session, predicate, values):
    '''
    Returns the first value in a list that passes a test

    The predicate is called for each value in the first list in values until
    true is returned, then that value is returned.

    Parameters:

        predicate (function): This is a boolean function that is called to
        determine if a list entry passes the test.

        values (): These are the values passed to the predicate with the
        exception that the first list is passed as the single current value
        from the list. At least one list is required.

    Returns:
    None: The first value that passes the test is returned.
    '''

    request = session.Request()

    action = {
        "function": "find",
        "predicate": predicate,
        "values": values
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def map(session, functor, values):
    '''
    Maps values of a list

    This function creates a list of the results of calling functor with each
    value of the first list in values

    Parameters:

        functor (function):

        values (): These are the parameters passed to functor with the
        exception that the first list is passed one value at a time. At least
        one list is required.

    Returns:
    list: 
    '''

    request = session.Request()

    action = {
        "function": "map",
        "functor": functor,
        "values": values
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def reduce(session, functor, accumulator, list):
    '''
    Reduce values of a list to a single value

    Reduce calls functor for each value in list with two parameters,
    accumulator and value, and must return a value of any dataType. Parameter
    accumulator is the reduce() accumulator parameter value on first call and
    the return value of previous functor() call on subsequent calls. The
    dataType of the return value should normally be the same as accumulator,
    but this is not required.

    Parameters:

        functor (function): This function is called for each value in a list.
        The returned value is passed as the accumulator parameter on the next
        call to functor().

        accumulator (): This is an initial accumulator value passed to
        functor(). Normally, the dataType of accumulator will be the dataTape
        for the reduce() return value, but this is not required.

        list (list): This is a list to be reduced.

    Returns:
    None: This is the final return value from functor() or the accumulator parameter value if list is empty.
    '''

    request = session.Request()

    action = {
        "function": "reduce",
        "functor": functor,
        "accumulator": accumulator,
        "list": list
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def sort(session, compareFunction, list):
    '''
    Sort values in a list

    This produces a list with values sorted based on result of
    compareFunction. The compareFunction is passed two values from the list
    and must return an integer less than 0 if the first value is less than
    the second value, 0 if they are equal, and a integer greater than 0 if
    the first value is greater than the second value.

    Parameters:

        compareFunction (function): This function is called with two value
        from list.

        list (list): This is the list to sort.

    Returns:
    list: This the the resulting sorted list.
    '''

    request = session.Request()

    action = {
        "function": "sort",
        "compareFunction": compareFunction,
        "list": list
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

