# -*- coding: utf-8 -*-

# Generated by afwdev generate afw

import requests
import json

def bag_objectPath(session, values=None):
    '''
    Makes a list from values

    Takes any number of objectPath values and returns a list of list.

    Parameters:

        values (list):

    Returns:
    list: 
    '''

    request = session.Request()

    action = {
        "function": "bag<objectPath>"
    }

    if values != None:
        action['values'] = values

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def bag_size_objectPath(session, value):
    '''
    Returns the number of values in a bag

    This returns the integer number of values in list.

    Parameters:

        value (list):

    Returns:
    integer: 
    '''

    request = session.Request()

    action = {
        "function": "bag_size<objectPath>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def eq_objectPath(session, arg1, arg2):
    '''
    Checks for equal

    Determine if objectPath arg1 is equal to the value of arg2 converted to
    the data type of arg1 then return the boolean result. Use 'eqx' ('===')
    instead if you want false to be returned if arg1 and arg2's data type
    don't match.

    Parameters:

        arg1 (objectPath):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "eq<objectPath>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def eqx_objectPath(session, arg1, arg2):
    '''
    Checks for equal and type

    Determine if for objectPath arg1 is equal to the value and data type of
    arg2 then return the boolean result. Use 'eq' ('==') instead if you want
    arg2 to be converted to the data type of arg1 before comparison.

    Parameters:

        arg1 (objectPath):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "eqx<objectPath>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def ge_objectPath(session, arg1, arg2):
    '''
    Checks for greater than or equal

    Checks for objectPath arg1 is greater than or equal to objectPath arg2
    and return the boolean result.

    Parameters:

        arg1 (objectPath):

        arg2 (objectPath):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "ge<objectPath>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def gt_objectPath(session, arg1, arg2):
    '''
    Checks for greater than

    Checks for objectPath arg1 is greater than objectPath arg2 and return the
    boolean result.

    Parameters:

        arg1 (objectPath):

        arg2 (objectPath):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "gt<objectPath>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def is_objectPath(session, value):
    '''
    Checks whether value is dataType objectPath

    Checks whether value is dataType objectPath and return the boolean
    result.

    Parameters:

        value (): Value to check

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "is<objectPath>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def le_objectPath(session, arg1, arg2):
    '''
    Checks for less than or equal

    Checks for objectPath arg1 is less than or equal to objectPath arg2 and
    return the boolean result.

    Parameters:

        arg1 (objectPath):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "le<objectPath>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def lt_objectPath(session, arg1, arg2):
    '''
    Checks for less than

    Checks for objectPath arg1 is less that objectPath arg2 and return the
    boolean result.

    Parameters:

        arg1 (objectPath):

        arg2 (objectPath):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "lt<objectPath>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def ne_objectPath(session, arg1, arg2):
    '''
    Checks for not equal

    Determine if objectPath arg1 is not equal to the value of arg2 converted
    to the data type of arg1 then return the boolean result. Use 'nex'
    ('!==') instead if you want true to be returned if arg1 and arg2's data
    type don't match.

    Parameters:

        arg1 (objectPath):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "ne<objectPath>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def nex_objectPath(session, arg1, arg2):
    '''
    Checks for not equal value or type

    Determine if for objectPath arg1 is not equal to the value or data type
    of arg2 then return the boolean result. Use 'ne' ('!=') instead if you
    want arg2 to be converted to the data type of arg1 before comparison.

    Parameters:

        arg1 (objectPath):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "nex<objectPath>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def objectPath(session, value):
    '''
    Convert to data type objectPath

    Converts value to data type objectPath returning objectPath result.

    Parameters:

        value (): Value to convert

    Returns:
    objectPath: Converted value
    '''

    request = session.Request()

    action = {
        "function": "objectPath",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def to_string_objectPath(session, value):
    '''
    Converts value to string

    Converts objectPath value to string. For list values, the to_string()
    value for each entry is returned separated with commas.

    Parameters:

        value (objectPath): A objectPath value.

    Returns:
    string: The string representation of the value.
    '''

    request = session.Request()

    action = {
        "function": "to_string<objectPath>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

