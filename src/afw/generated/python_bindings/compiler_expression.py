#!/usr/bin/env python3

##
# @file compiler_expression.py
# @ingroup afw_bindings_python
# @brief This file contains the Python bindings for the compiler_expression category.
#

# Generated by afwdev generate afw

import requests
import json

def nullish_coalescing(session, values):
    """
    Nullish coalescing

    Returns the first value of values that is not null or undefined leaving
    the remaining values unevaluated.

    Args:
        values (object):

    Returns:
        object: The first value of values that is not null or undefined.
    """

    request = session.Request()

    action = {
        "function": "nullish_coalescing",
        "values": values
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def optional_chaining(session, arg1, arg2):
    """
    Optional chaining

    Returns undefined if arg1 is null or undefined without evaluating arg2,
    but otherwise returns evaluated value of arg2.

    Args:
        arg1 (object):

        arg2 (object):

    Returns:
        object: Undefined value if arg1 is null or undefined but otherwise
        evaluated arg2.
    """

    request = session.Request()

    action = {
        "function": "optional_chaining",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def void_operator(session, value):
    """
    Support for the void operator

    This is the support function for the void operator which evaluates value
    and returns undefined.

    Args:
        value (object): This is the value to evaluate.

    Returns:
        object: This always returns undefined.
    """

    request = session.Request()

    action = {
        "function": "void_operator",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

