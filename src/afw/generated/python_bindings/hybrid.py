# -*- coding: utf-8 -*-

# Generated by afwdev generate afw

import requests
import json

def bag_hybrid(session, values=None):
    '''
    Makes an array from values

    Takes any number of hybrid values and returns an array of array.

    Parameters:

        values (array):

    Returns:
    array: 
    '''

    request = session.Request()

    action = {
        "function": "bag<hybrid>"
    }

    if values != None:
        action['values'] = values

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def bag_size_hybrid(session, value):
    '''
    Returns the number of values in a bag

    This returns the integer number of values in array.

    Parameters:

        value (array):

    Returns:
    integer: 
    '''

    request = session.Request()

    action = {
        "function": "bag_size<hybrid>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def compile_hybrid(session, source, listing=None):
    '''
    Compile hybrid value

    Compile hybrid value and return either an unevaluated adaptive value or a
    string containing the compiler listing.

    Parameters:

        source (hybrid): hybrid string to compile

        listing (): If specified, a compiler listing is produced instead of
        an unevaluated expression value.
        
        This parameter can be an integer between 0 and 10 of a string that is
        used for indentation. If 0 is specified, no whitespace is added to
        the resulting string. If 1 through 10 is specified, that number of
        spaces is used.

    Returns:
    unevaluated: 
    '''

    request = session.Request()

    action = {
        "function": "compile<hybrid>",
        "source": source
    }

    if listing != None:
        action['listing'] = listing

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def eq_hybrid(session, arg1, arg2):
    '''
    Checks for equal

    Determine if hybrid arg1 is equal to the value of arg2 converted to the
    data type of arg1 then return the boolean result. Use 'eqx' ('===')
    instead if you want false to be returned if arg1 and arg2's data type
    don't match.

    Parameters:

        arg1 (hybrid):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "eq<hybrid>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def eqx_hybrid(session, arg1, arg2):
    '''
    Checks for equal and type

    Determine if for hybrid arg1 is equal to the value and data type of arg2
    then return the boolean result. Use 'eq' ('==') instead if you want arg2
    to be converted to the data type of arg1 before comparison.

    Parameters:

        arg1 (hybrid):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "eqx<hybrid>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def evaluate_hybrid(session, source, additionalUntrustedQualifiedVariables=None):
    '''
    Evaluate hybrid value

    Compile and evaluate hybrid value.

    Parameters:

        source (hybrid): hybrid string to compile and evaluate

        additionalUntrustedQualifiedVariables (object): This parameter
        supplies additional qualified variables that can be accessed during
        evaluation. These variables will not be used by anything that needs
        to ensure its qualified variables must come from a trusted source,
        such as authorization. This parameter is intended to be used for
        testing only and should not be used for anything running in
        production.

    Returns:
    unevaluated: 
    '''

    request = session.Request()

    action = {
        "function": "evaluate<hybrid>",
        "source": source
    }

    if additionalUntrustedQualifiedVariables != None:
        action['additionalUntrustedQualifiedVariables'] = additionalUntrustedQualifiedVariables

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def ge_hybrid(session, arg1, arg2):
    '''
    Checks for greater than or equal

    Checks for hybrid arg1 is greater than or equal to hybrid arg2 and return
    the boolean result.

    Parameters:

        arg1 (hybrid):

        arg2 (hybrid):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "ge<hybrid>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def gt_hybrid(session, arg1, arg2):
    '''
    Checks for greater than

    Checks for hybrid arg1 is greater than hybrid arg2 and return the boolean
    result.

    Parameters:

        arg1 (hybrid):

        arg2 (hybrid):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "gt<hybrid>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def hybrid(session, value):
    '''
    Convert to data type hybrid

    Converts value to data type hybrid returning hybrid result.

    Parameters:

        value (): Value to convert

    Returns:
    hybrid: Converted value
    '''

    request = session.Request()

    action = {
        "function": "hybrid",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def is_hybrid(session, value):
    '''
    Checks whether value is dataType hybrid

    Checks whether value is dataType hybrid and return the boolean result.

    Parameters:

        value (): Value to check

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "is<hybrid>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def le_hybrid(session, arg1, arg2):
    '''
    Checks for less than or equal

    Checks for hybrid arg1 is less than or equal to hybrid arg2 and return
    the boolean result.

    Parameters:

        arg1 (hybrid):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "le<hybrid>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def lt_hybrid(session, arg1, arg2):
    '''
    Checks for less than

    Checks for hybrid arg1 is less that hybrid arg2 and return the boolean
    result.

    Parameters:

        arg1 (hybrid):

        arg2 (hybrid):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "lt<hybrid>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def ne_hybrid(session, arg1, arg2):
    '''
    Checks for not equal

    Determine if hybrid arg1 is not equal to the value of arg2 converted to
    the data type of arg1 then return the boolean result. Use 'nex' ('!==')
    instead if you want true to be returned if arg1 and arg2's data type
    don't match.

    Parameters:

        arg1 (hybrid):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "ne<hybrid>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def nex_hybrid(session, arg1, arg2):
    '''
    Checks for not equal value or type

    Determine if for hybrid arg1 is not equal to the value or data type of
    arg2 then return the boolean result. Use 'ne' ('!=') instead if you want
    arg2 to be converted to the data type of arg1 before comparison.

    Parameters:

        arg1 (hybrid):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "nex<hybrid>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def to_string_hybrid(session, value):
    '''
    Converts value to string

    Converts hybrid value to string. For array values, the to_string() value
    for each entry is returned separated with commas.

    Parameters:

        value (hybrid): A hybrid value.

    Returns:
    string: The string representation of the value.
    '''

    request = session.Request()

    action = {
        "function": "to_string<hybrid>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

