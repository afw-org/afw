# -*- coding: utf-8 -*-

# Generated by afwdev generate afw

import requests
import json

def assert_(session, assertion, reason=None):
    """
    Assert a value

    Assert that a value is true. If not, an assertion_failed error is thrown.

    Args:
        assertion (bool): This is the assertion to make. If not true, an
        assertion_failed error is thrown.

        reason (str): This is an optional reason to include in the
        assertion_failed message.

    Returns:
        object:
    """

    request = session.Request()

    action = {
        "function": "assert",
        "assertion": assertion
    }

    if reason != None:
        action['reason'] = reason

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def decompile(session, value, whitespace=None):
    """
    Decompile value

    Decompile an adaptive value to string.

    Args:
        value (object): Value to decompile.

        whitespace (object): Add whitespace for readability if present and not
        0. This parameter can be an integer between 0 and 10 or a string that
        is used for indentation. If 0 is specified, no whitespace is added to
        the resulting string. If 1 through 10 is specified, that number of
        spaces is used.

    Returns:
        str: Decompiled value.
    """

    request = session.Request()

    action = {
        "function": "decompile",
        "value": value
    }

    if whitespace != None:
        action['whitespace'] = whitespace

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def evaluate_value(session, value, additionalUntrustedQualifiedVariables=None):
    """
    Evaluate value

    Evaluate an adaptive value.

    Args:
        value (object):

        additionalUntrustedQualifiedVariables (dict): This parameter supplies
        additional qualified variables that can be accessed during evaluation.
        These variables will not be used by anything that needs to ensure its
        qualified variables must come from a trusted source, such as
        authorization. This parameter is intended to be used for testing only
        and should not be used for anything running in production.

    Returns:
        object: Evaluated adaptive value.
    """

    request = session.Request()

    action = {
        "function": "evaluate_value",
        "value": value
    }

    if additionalUntrustedQualifiedVariables != None:
        action['additionalUntrustedQualifiedVariables'] = additionalUntrustedQualifiedVariables

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def evaluate_with_retry(session, value, limit):
    """
    Evaluate value with retry

    Evaluate a value and retry up to a limit if an exception occurs.

    Args:
        value (object): Value to evaluated

        limit (int): Maximum number to retry if an exception occurs.

    Returns:
        object: Evaluated value.
    """

    request = session.Request()

    action = {
        "function": "evaluate_with_retry",
        "value": value,
        "limit": limit
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def qualifier(session, qualifier, forTesting=None):
    """
    Access variables of a qualifier as an object

    This function allows the active variables for a qualifier to be accessed
    as the properties of an object.

    Args:
        qualifier (str): This is the qualifier whose variables are to be
        accessed as properties of the returned object.

        forTesting (bool): If specified and true, the object returned will be
        suitable to pass as the additionalUntrustedQualifiedVariables
        parameter of evaluate*() functions. This is intended for testing
        purposes and should not be used in production.

    Returns:
        dict: Each property is the name of a variable with the value
        influenced by the forTesting property.
    """

    request = session.Request()

    action = {
        "function": "qualifier",
        "qualifier": qualifier
    }

    if forTesting != None:
        action['forTesting'] = forTesting

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def qualifiers(session, forTesting=None):
    """
    Access qualifiers as an object

    This function allows the active qualifiers to be accessed as properties of
    an object. The value of each of these properties is an object whose
    properties are the variables for the corresponding qualifier.

    Args:
        forTesting (bool): If specified and true, the object returned will be
        suitable to pass as the additionalUntrustedQualifiedVariables
        parameter of evaluate*() functions. This is intended for testing
        purposes and should not be used in production.

    Returns:
        dict: Each property is the name of a qualifier with a value that is an
        object whose properties are the variables of that qualifier. The value
        of the variable properties is influenced by the forTesting property.
    """

    request = session.Request()

    action = {
        "function": "qualifiers"
    }

    if forTesting != None:
        action['forTesting'] = forTesting

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def safe_evaluate(session, value, error):
    """
    Safe evaluate

    Return the evaluated adaptive value. If an exception occurs, return
    evaluated error instead.

    Args:
        value (object): Value to evaluated

        error (object): Value to evaluate and return if exception occurs. If
        an error occurs evaluating this value, the exception will continue.

    Returns:
        object: Evaluated adaptive value or error value.
    """

    request = session.Request()

    action = {
        "function": "safe_evaluate",
        "value": value,
        "error": error
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def stringify(session, value, replacer=None, whitespace=None):
    """
    Evaluate and decompile a value

    Evaluate and decompile an adaptive value to string. For most values this
    has the effect of producing a string containing json.

    Args:
        value (object): Value to stringify.

        replacer (object): Optional replacer function.

        whitespace (object): Add whitespace for readability if present and not
        0. This parameter can be an integer between 0 and 10 or a string that
        is used for indentation. If 0 is specified, no whitespace is added to
        the resulting string. If 1 through 10 is specified, that number of
        spaces is used.

    Returns:
        str: Evaluated and decompiled value.
    """

    request = session.Request()

    action = {
        "function": "stringify",
        "value": value
    }

    if replacer != None:
        action['replacer'] = replacer

    if whitespace != None:
        action['whitespace'] = whitespace

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def test_script(session, id, description, script, expected=None, additionalUntrustedQualifiedVariables=None):
    """
    Test an adaptive script

    Compile and evaluate an adaptive script and compare the results to an
    expected value. Return object with the test's results.

    Args:
        id (str): Id of test

        description (str): Description of test

        script (str): Script to compile and evaluate.

        expected (object): Expected result.

        additionalUntrustedQualifiedVariables (dict): This parameter supplies
        additional qualified variables that can be accessed during evaluation.
        These variables will not be used by anything that needs to ensure its
        qualified variables must come from a trusted source, such as
        authorization. This parameter is intended to be used for testing only
        and should not be used for anything running in production.

    Returns:
        dict: Test results.
    """

    request = session.Request()

    action = {
        "function": "test_script",
        "id": id,
        "description": description,
        "script": script
    }

    if expected != None:
        action['expected'] = expected

    if additionalUntrustedQualifiedVariables != None:
        action['additionalUntrustedQualifiedVariables'] = additionalUntrustedQualifiedVariables

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def test_template(session, id, description, template, expected=None, additionalUntrustedQualifiedVariables=None):
    """
    Test template

    Compile and evaluate an adaptive template and compare the results to an
    expected value. Return object with the test's results.

    Args:
        id (str): Id of test

        description (str): Description of test

        template (str): Template to compile and evaluate.

        expected (object): Expected evaluated result.

        additionalUntrustedQualifiedVariables (dict): This parameter supplies
        additional qualified variables that can be accessed during evaluation.
        These variables will not be used by anything that needs to ensure its
        qualified variables must come from a trusted source, such as
        authorization. This parameter is intended to be used for testing only
        and should not be used for anything running in production.

    Returns:
        dict: Test results.
    """

    request = session.Request()

    action = {
        "function": "test_template",
        "id": id,
        "description": description,
        "template": template
    }

    if expected != None:
        action['expected'] = expected

    if additionalUntrustedQualifiedVariables != None:
        action['additionalUntrustedQualifiedVariables'] = additionalUntrustedQualifiedVariables

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def test_value(session, id, description, value, expected=None, additionalUntrustedQualifiedVariables=None):
    """
    Test value

    Evaluate an adaptive value and compare it to an expected value. Return
    object with the test's results.

    Args:
        id (str): Id of test

        description (str): Description of test

        value (str): Value to evaluate

        expected (object): Expected result.

        additionalUntrustedQualifiedVariables (dict): This parameter supplies
        additional qualified variables that can be accessed during evaluation.
        These variables will not be used by anything that needs to ensure its
        qualified variables must come from a trusted source, such as
        authorization. This parameter is intended to be used for testing only
        and should not be used for anything running in production.

    Returns:
        dict: Test results.
    """

    request = session.Request()

    action = {
        "function": "test_value",
        "id": id,
        "description": description,
        "value": value
    }

    if expected != None:
        action['expected'] = expected

    if additionalUntrustedQualifiedVariables != None:
        action['additionalUntrustedQualifiedVariables'] = additionalUntrustedQualifiedVariables

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

