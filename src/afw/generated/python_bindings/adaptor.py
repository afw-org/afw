# -*- coding: utf-8 -*-

# Generated by afwdev generate afw

import requests
import json

def adaptor_objectCallback_signature(session, object, userData=None):
    '''
    Signature used for adaptor objectCallback

    This is the function signature for the objectCallback parameter in
    adaptor functions. Calling this directly will throw a 'Do not call
    directly' error.

    Parameters:

        object (object): This is the object from adaptor or undefined if
        there are no more objects to return.

        userData (any): This is the value of the userData parameter when
        objectCallback was called.

    Returns:
    boolean: Return true if this callback should not be called again for any reason such a limit exceeded or the desired object being found.
    '''

    request = session.Request()

    action = {
        "function": "adaptor_objectCallback_signature",
        "object": object
    }

    if userData != None:
        action['userData'] = userData

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def add_object(session, objectType, object, adaptorId=None, objectId=None, journal=None, adaptorTypeSpecific=None):
    '''
    Add adaptive object

    Add an adaptive object to an adaptor, specified by the adaptorId, with a
    specified objectType. You may supply an optional objectId, if the
    underlying adaptorId allows it.

    Parameters:

        adaptorId (string): Id of adaptor.

        objectType (string): Id of adaptive object type of object being
        added.

        object (object): Object to add.

        objectId (string): Optional preferred objectId of object to add. The
        adaptor may ignore this.

        journal (object): The properties of this object will be added to the
        associated journal entry. Refer to
        /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names
        to avoid and for ones that have specific semantics.

        adaptorTypeSpecific (object): This is an optional object parameter
        with an objectType determined by the adaptorType associated with the
        adaptorId parameter. If the adaptorType supports this parameter,
        adaptor afw will have an adaptive object type with an id of:
        
        _AdaptiveAdaptorTypeSpecific_${adaptorType}_add_object
        
        where ${adaptorType} is the adaptor type id.

    Returns:
    object: Resulting journal entry. Property 'objectId' is the objectId assigned by the adaptor.
    '''

    request = session.Request()

    action = {
        "function": "add_object",
        "objectType": objectType,
        "object": object
    }

    if adaptorId != None:
        action['adaptorId'] = adaptorId

    if objectId != None:
        action['objectId'] = objectId

    if journal != None:
        action['journal'] = journal

    if adaptorTypeSpecific != None:
        action['adaptorTypeSpecific'] = adaptorTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def add_object_with_uri(session, uri, object, journal=None, adaptorTypeSpecific=None):
    '''
    Add adaptive object with URI

    Add an adaptive object with a given URI.

    Parameters:

        uri (anyURI): URI of object to add. If a URI begins with a single
        slash ('/'), it is the local object path. In the case of a local
        path, an optional preferred objectId of object can be including in
        URI which the adaptor may ignore.

        object (object): Object to add.

        journal (object): The properties of this object will be added to the
        associated journal entry. Refer to
        /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names
        to avoid and for ones that have specific semantics.

        adaptorTypeSpecific (object): This is an optional object parameter
        with an objectType determined by the adaptorType associated with the
        adaptorId parameter. If the adaptorType supports this parameter,
        adaptor afw will have an adaptive object type with an id of:
        
        _AdaptiveAdaptorTypeSpecific_${adaptorType}_add_object
        
        Where ${adaptorType} is the adaptor type id.

    Returns:
    object: Resulting journal entry. Property 'objectId' is the objectId assigned by the adaptor.
    '''

    request = session.Request()

    action = {
        "function": "add_object_with_uri",
        "uri": uri,
        "object": object
    }

    if journal != None:
        action['journal'] = journal

    if adaptorTypeSpecific != None:
        action['adaptorTypeSpecific'] = adaptorTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def convert_AdaptiveQueryCriteria_to_query_string(session, queryCriteria, adaptorId=None, objectType=None, style=None):
    '''
    Convert _AdaptiveQueryCriteria_ to RQL

    This function converts an _AdaptiveQueryCriteria_ object to a query
    string.

    Parameters:

        queryCriteria (object): An object type _AdaptiveQueryCriteria_
        object.

        adaptorId (string): This is the adaptorId of adaptor containing the
        objectType for validating and mapping this query. If not specified,
        no validation or mapping will occur.

        objectType (string): This is the objectType used in conjunction with
        the adaptorId parameter. This parameter is only allowed and is
        required if the adaptorId parameter is specified.

        style (integer): The style of the query string produced. All of the
        styles are appropriately url encoded.
        
        0 - 'name=op=value' where '=op=' will be '==', '!=', '=ge=', etc.
        with conjunctions '&' (and) and '|' (or). Parentheses are placed
        around each group of like conjunctions except for outer '&'.
        (default)
        
        1 - the same as 1 with '=gte=' instead of '=ge=', '=lte=' instead of
        '=le=', '=eq=' instead of '=', and '=ne=' instead of '!='.
        
        2 - similar to 1 with ';' for '&' and ',' for '|'.
        
        3 - comparisons 'op(name,value)' where 'op' will be 'eq', 'ne', 'ge',
        ..., plus conjunctions 'and(list)' and 'or(list)' where 'array' is a
        comma separated list of any comparison or conjunction.

    Returns:
    string: Query string representation of the query criteria.
    '''

    request = session.Request()

    action = {
        "function": "convert_AdaptiveQueryCriteria_to_query_string",
        "queryCriteria": queryCriteria
    }

    if adaptorId != None:
        action['adaptorId'] = adaptorId

    if objectType != None:
        action['objectType'] = objectType

    if style != None:
        action['style'] = style

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def convert_query_string_to_AdaptiveQueryCriteria(session, queryString, adaptorId=None, objectType=None):
    '''
    Convert query string to _AdaptiveQueryCriteria_

    This function converts a query string to an _AdaptiveQueryCriteria_
    object.

    Parameters:

        queryString (string): The query string to convert.

        adaptorId (string): This is the adaptorId of adaptor containing the
        objectType for validating and mapping this query. If not specified,
        no validation or mapping will occur.

        objectType (string): This is the objectType used in conjunction with
        the adaptorId parameter. This parameter is only allowed and is
        required if the adaptorId parameter is specified.

    Returns:
    object: An object type _AdaptiveQueryCriteria_ object representing query string.
    '''

    request = session.Request()

    action = {
        "function": "convert_query_string_to_AdaptiveQueryCriteria",
        "queryString": queryString
    }

    if adaptorId != None:
        action['adaptorId'] = adaptorId

    if objectType != None:
        action['objectType'] = objectType

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def delete_object(session, objectType, objectId, adaptorId=None, journal=None, adaptorTypeSpecific=None):
    '''
    Delete adaptive object

    Delete an adaptive object.

    Parameters:

        adaptorId (string): Id of adaptor containing object to delete.

        objectType (string): Id of adaptive object type of object to delete.

        objectId (string): Id of object to delete.

        journal (object): The properties of this object will be added to the
        associated journal entry. Refer to
        /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names
        to avoid and for ones that have specific semantics.

        adaptorTypeSpecific (object): This is an optional object parameter
        with an objectType determined by the adaptorType associated with the
        adaptorId parameter. If the adaptorType supports this parameter,
        adaptor afw will have an adaptive object type with an id of:
        
        _AdaptiveAdaptorTypeSpecific_${adaptorType}_delete_object
        
        where ${adaptorType} is the adaptor type id.

    Returns:
    object: Resulting journal entry.
    '''

    request = session.Request()

    action = {
        "function": "delete_object",
        "objectType": objectType,
        "objectId": objectId
    }

    if adaptorId != None:
        action['adaptorId'] = adaptorId

    if journal != None:
        action['journal'] = journal

    if adaptorTypeSpecific != None:
        action['adaptorTypeSpecific'] = adaptorTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def delete_object_with_uri(session, uri, journal=None, adaptorTypeSpecific=None):
    '''
    Delete adaptive object with URI

    Delete an adaptive object with a given URI.

    Parameters:

        uri (anyURI): URI of object to delete. If a URI begins with a single
        slash ('/'), it is the local object path.

        journal (object): The properties of this object will be added to the
        associated journal entry. Refer to
        /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names
        to avoid and for ones that have specific semantics.

        adaptorTypeSpecific (object): This is an optional object parameter
        with an objectType determined by the adaptorType associated with the
        adaptorId parameter. If the adaptorType supports this parameter,
        adaptor afw will have an adaptive object type with an id of:
        
        _AdaptiveAdaptorTypeSpecific_${adaptorType}_delete_object
        
        where ${adaptorType} is the adaptor type id.

    Returns:
    object: Resulting journal entry.
    '''

    request = session.Request()

    action = {
        "function": "delete_object_with_uri",
        "uri": uri
    }

    if journal != None:
        action['journal'] = journal

    if adaptorTypeSpecific != None:
        action['adaptorTypeSpecific'] = adaptorTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def get_object(session, objectType, objectId, adaptorId=None, options=None, adaptorTypeSpecific=None):
    '''
    Get adaptive object

    Get an adaptive object from the adaptor, specified by adaptorId,
    objectType and objectId. Optional view options and adaptor-specific
    options may be supplied to influence how the object is returned.

    Parameters:

        adaptorId (string): Id of adaptor containing object to retrieve.

        objectType (string): Id of adaptive object type of object to
        retrieve.

        objectId (string): Id of object to retrieve.

        options (object): Object view options. See
        /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more
        information.

        adaptorTypeSpecific (object): This is an optional object parameter
        with an objectType determined by the adaptorType associated with the
        adaptorId parameter. If the adaptorType supports this parameter,
        adaptor afw will have an adaptive object type with an id of:
        
        _AdaptiveAdaptorTypeSpecific_${adaptorType}_get_object
        
        Where ${adaptorType} is the adaptor type id.

    Returns:
    object: Object retrieved or NULL if not found.
    '''

    request = session.Request()

    action = {
        "function": "get_object",
        "objectType": objectType,
        "objectId": objectId
    }

    if adaptorId != None:
        action['adaptorId'] = adaptorId

    if options != None:
        action['options'] = options

    if adaptorTypeSpecific != None:
        action['adaptorTypeSpecific'] = adaptorTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def get_object_with_uri(session, uri, options=None, adaptorTypeSpecific=None):
    '''
    Get adaptive object with URI

    Get an object with a given URI.

    Parameters:

        uri (anyURI): URI of object to retrieve. If a URI begins with a
        single slash ('/'), it is the local object path.

        options (object): Object view options. See
        /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more
        information.

        adaptorTypeSpecific (object): This is an optional object parameter
        with an objectType determined by the adaptorType associated with the
        adaptorId parameter. If the adaptorType supports this parameter,
        adaptor afw will have an adaptive object type with an id of:
        
        _AdaptiveAdaptorTypeSpecific_${adaptorType}_get_object
        
        where ${adaptorType} is the adaptor type id.

    Returns:
    object: Object retrieved or NULL if not found.
    '''

    request = session.Request()

    action = {
        "function": "get_object_with_uri",
        "uri": uri
    }

    if options != None:
        action['options'] = options

    if adaptorTypeSpecific != None:
        action['adaptorTypeSpecific'] = adaptorTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def modify_object(session, objectType, objectId, entries, adaptorId=None, journal=None, adaptorTypeSpecific=None):
    '''
    Modify adaptive object

    Modify an adaptive object.

    Parameters:

        adaptorId (string): Id of adaptor containing object to modify.

        objectType (string): Id of adaptive object type of object to modify.

        objectId (string): Id of object to modify.

        entries (array): List of modifications. Entries are of the form:
        
        [
        'add_value',
        'property name' or ['property name', ... ],
        value
        ]
        
        [
        'remove_property',
        'property name' or ['property name', ... ]
        ]
        
        [
        'remove_value',
        'property name' or ['property name', ... ],
        value
        ]
        
        [
        'set_property',
        'property name' or ['property name', ... ],
        value
        ]

        journal (object): The properties of this object will be added to the
        associated journal entry. Refer to
        /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names
        to avoid and for ones that have specific semantics.

        adaptorTypeSpecific (object): This is an optional object parameter
        with an objectType determined by the adaptorType associated with the
        adaptorId parameter. If the adaptorType supports this parameter,
        adaptor afw will have an adaptive object type with an id of:
        
        _AdaptiveAdaptorTypeSpecific_${adaptorType}_modify_object
        
        Where ${adaptorType} is the adaptor type id.

    Returns:
    object: Resulting journal entry.
    '''

    request = session.Request()

    action = {
        "function": "modify_object",
        "objectType": objectType,
        "objectId": objectId,
        "entries": entries
    }

    if adaptorId != None:
        action['adaptorId'] = adaptorId

    if journal != None:
        action['journal'] = journal

    if adaptorTypeSpecific != None:
        action['adaptorTypeSpecific'] = adaptorTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def modify_object_with_uri(session, uri, entries, journal=None, adaptorTypeSpecific=None):
    '''
    Modify adaptive object with URI

    Modify an adaptive object with a given URI.

    Parameters:

        uri (anyURI): URI of object to modify. If a URI begins with a single
        slash ('/'), it is the local object path.

        entries (array): List of asserts and modifications. Entries are of
        the form:
        
        [
        'add_value',
        'property name' or ['property name', ... ],
        value
        ]
        
        [
        'remove_property',
        'property name' or ['property name', ... ]
        ]
        
        [
        'remove_value',
        'property name' or ['property name', ... ],
        value
        ]
        
        [
        'set_property',
        'property name' or ['property name', ... ],
        value
        ]

        journal (object): The properties of this object will be added to the
        associated journal entry. Refer to
        /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names
        to avoid and for ones that have specific semantics.

        adaptorTypeSpecific (object): This is an optional object parameter
        with an objectType determined by the adaptorType associated with the
        adaptorId parameter. If the adaptorType supports this parameter,
        adaptor afw will have an adaptive object type with an id of:
        
        _AdaptiveAdaptorTypeSpecific_${adaptorType}_modify_object
        
        Where ${adaptorType} is the adaptor type id.

    Returns:
    object: Resulting journal entry.
    '''

    request = session.Request()

    action = {
        "function": "modify_object_with_uri",
        "uri": uri,
        "entries": entries
    }

    if journal != None:
        action['journal'] = journal

    if adaptorTypeSpecific != None:
        action['adaptorTypeSpecific'] = adaptorTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def reconcile_object(session, object, checkOnly=None):
    '''
    Reconcile adaptive object

    Reconcile an adaptive object.

    Parameters:

        object (object): An object that has been retrieved with object
        options reconcilable, and whose properties have been modified. A
        modify_object request will be produced reflecting the difference
        between the original object and this unmodified object.

        checkOnly (boolean): Produce the modify_object request but don't
        execute it. The returned journal enter will contain the modify_object
        request.

    Returns:
    object: Resulting journal entry.
    '''

    request = session.Request()

    action = {
        "function": "reconcile_object",
        "object": object
    }

    if checkOnly != None:
        action['checkOnly'] = checkOnly

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def replace_object(session, objectType, objectId, object, adaptorId=None, journal=None, adaptorTypeSpecific=None):
    '''
    Replace adaptive object

    Replace an adaptive object.

    Parameters:

        adaptorId (string): Id of adaptor containing object to replace.

        objectType (string): Id of adaptive object type of object to replace.

        objectId (string): Id of object to replace.

        object (object): Replacement object.

        journal (object): The properties of this object will be added to the
        associated journal entry. Refer to
        /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names
        to avoid and for ones that have specific semantics.

        adaptorTypeSpecific (object): This is an optional object parameter
        with an objectType determined by the adaptorType associated with the
        adaptorId parameter. If the adaptorType supports this parameter,
        adaptor afw will have an adaptive object type with an id of:
        
        _AdaptiveAdaptorTypeSpecific_${adaptorType}_replace_object
        
        Where ${adaptorType} is the adaptor type id.

    Returns:
    object: Resulting journal entry.
    '''

    request = session.Request()

    action = {
        "function": "replace_object",
        "objectType": objectType,
        "objectId": objectId,
        "object": object
    }

    if adaptorId != None:
        action['adaptorId'] = adaptorId

    if journal != None:
        action['journal'] = journal

    if adaptorTypeSpecific != None:
        action['adaptorTypeSpecific'] = adaptorTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def replace_object_with_uri(session, uri, object, journal=None, adaptorTypeSpecific=None):
    '''
    Replace adaptive object with URI

    Replace an adaptive object with a given URI.

    Parameters:

        uri (anyURI): URI of object to replace. If a URI begins with a single
        slash ('/'), it is the local object path.

        object (object): Replacement object.

        journal (object): The properties of this object will be added to the
        associated journal entry. Refer to
        /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names
        to avoid and for ones that have specific semantics.

        adaptorTypeSpecific (object): This is an optional object parameter
        with an objectType determined by the adaptorType associated with the
        adaptorId parameter. If the adaptorType supports this parameter,
        adaptor afw will have an adaptive object type with an id of:
        
        _AdaptiveAdaptorTypeSpecific_${adaptorType}_replace_object
        
        Where ${adaptorType} is the adaptor type id.

    Returns:
    object: Resulting journal entry.
    '''

    request = session.Request()

    action = {
        "function": "replace_object_with_uri",
        "uri": uri,
        "object": object
    }

    if journal != None:
        action['journal'] = journal

    if adaptorTypeSpecific != None:
        action['adaptorTypeSpecific'] = adaptorTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def retrieve_objects(session, objectType, adaptorId=None, queryCriteria=None, options=None, adaptorTypeSpecific=None):
    '''
    Retrieve adaptive objects

    This function retrieves adaptive objects from an adaptor, specified by
    adaptorId, which match the type specified by objectType.
    
    The optional queryCriteria is used to filter the adaptive objects
    returned. Use the objectOptions parameter to influence how the objects
    are viewed.
    
    Options, specific to the adaptorId, can be optionally supplied.

    Parameters:

        adaptorId (string): Id of adaptor containing objects to retrieve.

        objectType (string): Id of adaptive object type of objects to
        retrieve.

        queryCriteria (object): This is the query criteria for objects to be
        retrieved. If not specified, all objects will be retrieved.

        options (object): Object view options. See
        /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more
        information.

        adaptorTypeSpecific (object): This is an optional object parameter
        with an objectType determined by the adaptorType associated with the
        adaptorId parameter. If the adaptorType supports this parameter,
        adaptor afw will have an adaptive object type with an id of:
        
        _AdaptiveAdaptorTypeSpecific_${adaptorType}_retrieve_objects
        
        Where ${adaptorType} is the adaptor type id.

    Returns:
    array: This is the array of objects retrieved.
    '''

    request = session.Request()

    action = {
        "function": "retrieve_objects",
        "objectType": objectType
    }

    if adaptorId != None:
        action['adaptorId'] = adaptorId

    if queryCriteria != None:
        action['queryCriteria'] = queryCriteria

    if options != None:
        action['options'] = options

    if adaptorTypeSpecific != None:
        action['adaptorTypeSpecific'] = adaptorTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def retrieve_objects_to_callback(session, objectCallback, userData, objectType, adaptorId=None, queryCriteria=None, options=None, adaptorTypeSpecific=None):
    '''
    Retrieve adaptive objects

    This function retrieves adaptive objects from an adaptor, specified by
    adaptorId, which match the type specified by objectType.
    
    Each object is passed to the callback as it's retrieved.
    
    The optional queryCriteria is used to filter the adaptive objects
    returned. Use the objectOptions parameter to influence how the objects
    are viewed.
    
    Options, specific to the adaptorId, can be optionally supplied.

    Parameters:

        objectCallback (function): If this is specified, this function is
        called once for each object retrieved instead of adding the object to
        the return array. Parameter object will be an object retrieved or
        undefined if there are no more objects. This function should return
        true if it wants to abort the retrieve request.

        userData (): This value is passed to the objectCallback function in
        the userData parameter.

        adaptorId (string): Id of adaptor containing objects to retrieve.

        objectType (string): Id of adaptive object type of objects to
        retrieve.

        queryCriteria (object): This is the query criteria for objects to be
        retrieved. If not specified, all objects will be retrieved.

        options (object): Object view options. See
        /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more
        information.

        adaptorTypeSpecific (object): This is an optional object parameter
        with an objectType determined by the adaptorType associated with the
        adaptorId parameter. If the adaptorType supports this parameter,
        adaptor afw will have an adaptive object type with an id of:
        
        _AdaptiveAdaptorTypeSpecific_${adaptorType}_retrieve_objects_to_callba
        ck
        
        Where ${adaptorType} is the adaptor type id.

    Returns:
    null: 
    '''

    request = session.Request()

    action = {
        "function": "retrieve_objects_to_callback",
        "objectCallback": objectCallback,
        "userData": userData,
        "objectType": objectType
    }

    if adaptorId != None:
        action['adaptorId'] = adaptorId

    if queryCriteria != None:
        action['queryCriteria'] = queryCriteria

    if options != None:
        action['options'] = options

    if adaptorTypeSpecific != None:
        action['adaptorTypeSpecific'] = adaptorTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def retrieve_objects_to_response(session, objectType, adaptorId=None, queryCriteria=None, options=None, adaptorTypeSpecific=None):
    '''
    Retrieve adaptive objects to a response

    This function retrieves adaptive objects from an adaptor, specified by
    adaptorId, which match the type specified by objectType.
    
    This function is only allowed when called during a request with content
    type 'application/x-afw'. An '_AdaptiveResponse_' object is written to
    the request's response as each object is retrieved. This
    '_AdaptiveResponse_' object has a 'result' property containing the
    retrieved object and a 'intermediate' property set to true.
    
    The optional queryCriteria is used to filter the adaptive objects
    returned. Use the objectOptions parameter to influence how the objects
    are viewed.
    
    Options, specific to the adaptorId, can be optionally supplied.

    Parameters:

        adaptorId (string): Id of adaptor containing objects to retrieve.

        objectType (string): Id of adaptive object type of objects to
        retrieve.

        queryCriteria (object): This is the query criteria for objects to be
        retrieved. If not specified, all objects will be retrieved.

        options (object): Object view options. See
        /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more
        information.

        adaptorTypeSpecific (object): This is an optional object parameter
        with an objectType determined by the adaptorType associated with the
        adaptorId parameter. If the adaptorType supports this parameter,
        adaptor afw will have an adaptive object type with an id of:
        
        _AdaptiveAdaptorTypeSpecific_${adaptorType}_retrieve_objects
        
        Where ${adaptorType} is the adaptor type id.

    Returns:
    null: 
    '''

    request = session.Request()

    action = {
        "function": "retrieve_objects_to_response",
        "objectType": objectType
    }

    if adaptorId != None:
        action['adaptorId'] = adaptorId

    if queryCriteria != None:
        action['queryCriteria'] = queryCriteria

    if options != None:
        action['options'] = options

    if adaptorTypeSpecific != None:
        action['adaptorTypeSpecific'] = adaptorTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def retrieve_objects_to_stream(session, streamNumber, objectType, adaptorId=None, queryCriteria=None, options=None, adaptorTypeSpecific=None):
    '''
    Retrieve adaptive objects to a stream

    This function retrieves adaptive objects from an adaptor, specified by
    adaptorId, which match the type specified by objectType.
    
    Each object is written to the 'streamId' stream as it's retrieved.
    
    The optional queryCriteria is used to filter the adaptive objects
    returned. Use the objectOptions parameter to influence how the objects
    are viewed.
    
    Options, specific to the adaptorId, can be optionally supplied.

    Parameters:

        streamNumber (integer): Stream number objects will be written to as
        they are retrieved.

        adaptorId (string): Id of adaptor containing objects to retrieve.

        objectType (string): Id of adaptive object type of objects to
        retrieve.

        queryCriteria (object): This is the query criteria for objects to be
        retrieved. If not specified, all objects will be retrieved.

        options (object): Object view options. See
        /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more
        information.

        adaptorTypeSpecific (object): This is an optional object parameter
        with an objectType determined by the adaptorType associated with the
        adaptorId parameter. If the adaptorType supports this parameter,
        adaptor afw will have an adaptive object type with an id of:
        
        _AdaptiveAdaptorTypeSpecific_${adaptorType}_retrieve_objects
        
        Where ${adaptorType} is the adaptor type id.

    Returns:
    null: 
    '''

    request = session.Request()

    action = {
        "function": "retrieve_objects_to_stream",
        "streamNumber": streamNumber,
        "objectType": objectType
    }

    if adaptorId != None:
        action['adaptorId'] = adaptorId

    if queryCriteria != None:
        action['queryCriteria'] = queryCriteria

    if options != None:
        action['options'] = options

    if adaptorTypeSpecific != None:
        action['adaptorTypeSpecific'] = adaptorTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def retrieve_objects_with_uri(session, uri, options=None, adaptorTypeSpecific=None):
    '''
    Retrieve adaptive object with URI

    Retrieve adaptive objects with a given URI.
    
    The optional queryCriteria is used to filter the adaptive objects
    returned. Use the objectOptions parameter to influence how the objects
    are viewed.
    
    Options, specific to the adaptorId, can be optionally supplied.

    Parameters:

        uri (anyURI): URI of objects to retrieve. If a URI begins with a
        single slash ('/'), it is the local object path. A query string can
        be specified.

        options (object): Object view options. See
        /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more
        information.

        adaptorTypeSpecific (object): This is an optional object parameter
        with an objectType determined by the adaptorType associated with the
        adaptorId parameter. If the adaptorType supports this parameter,
        adaptor afw will have an adaptive object type with an id of:
        
        _AdaptiveAdaptorTypeSpecific_${adaptorType}_retrieve_objects
        
        Where ${adaptorType} is the adaptor type id.

    Returns:
    array: This is the array of objects retrieved.
    '''

    request = session.Request()

    action = {
        "function": "retrieve_objects_with_uri",
        "uri": uri
    }

    if options != None:
        action['options'] = options

    if adaptorTypeSpecific != None:
        action['adaptorTypeSpecific'] = adaptorTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def retrieve_objects_with_uri_to_callback(session, objectCallback, userData, uri, options=None, adaptorTypeSpecific=None):
    '''
    Retrieve adaptive object with URI

    Retrieve adaptive objects with a given URI.
    
    Each object is passed to the callback as it's retrieved.
    
    The optional queryCriteria is used to filter the adaptive objects
    returned. Use the objectOptions parameter to influence how the objects
    are viewed.
    
    Options, specific to the adaptorId, can be optionally supplied.

    Parameters:

        objectCallback (function): If this is specified, this function is
        called once for each object retrieved instead of adding the object to
        the return array. Parameter object will be an object retrieved or
        undefined if there are no more objects. This function should return
        true if it wants to abort the retrieve request.

        userData (any): This is the value passed to the objectCallback
        function in the userData parameter.

        uri (anyURI): URI of objects to retrieve. If a URI begins with a
        single slash ('/'), it is the local object path. A query string can
        be specified.

        options (object): Object view options. See
        /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more
        information.

        adaptorTypeSpecific (object): This is an optional object parameter
        with an objectType determined by the adaptorType associated with the
        adaptorId parameter. If the adaptorType supports this parameter,
        adaptor afw will have an adaptive object type with an id of:
        
        _AdaptiveAdaptorTypeSpecific_${adaptorType}_retrieve_objects
        
        Where ${adaptorType} is the adaptor type id.

    Returns:
    null: 
    '''

    request = session.Request()

    action = {
        "function": "retrieve_objects_with_uri_to_callback",
        "objectCallback": objectCallback,
        "userData": userData,
        "uri": uri
    }

    if options != None:
        action['options'] = options

    if adaptorTypeSpecific != None:
        action['adaptorTypeSpecific'] = adaptorTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def retrieve_objects_with_uri_to_response(session, uri, options=None, adaptorTypeSpecific=None):
    '''
    Retrieve adaptive object with URI to response

    This function retrieves adaptive objects with a given URI.
    
    This function is only allowed when called during a request with content
    type 'application/x-afw'. An '_AdaptiveResponse_' object is written to
    the request's response as each object is retrieved. This
    '_AdaptiveResponse_' object has a 'result' property containing the
    retrieved object and a 'partial' property set to true.
    
    The optional queryCriteria is used to filter the adaptive objects
    returned. Use the objectOptions parameter to influence how the objects
    are viewed.
    
    Options, specific to the adaptorId, can be optionally supplied.

    Parameters:

        uri (anyURI): URI of objects to retrieve. If a URI begins with a
        single slash ('/'), it is the local object path. A query string can
        be specified.

        options (object): Object view options. See
        /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more
        information.

        adaptorTypeSpecific (object): This is an optional object parameter
        with an objectType determined by the adaptorType associated with the
        adaptorId parameter. If the adaptorType supports this parameter,
        adaptor afw will have an adaptive object type with an id of:
        
        _AdaptiveAdaptorTypeSpecific_${adaptorType}_retrieve_objects
        
        Where ${adaptorType} is the adaptor type id.

    Returns:
    null: 
    '''

    request = session.Request()

    action = {
        "function": "retrieve_objects_with_uri_to_response",
        "uri": uri
    }

    if options != None:
        action['options'] = options

    if adaptorTypeSpecific != None:
        action['adaptorTypeSpecific'] = adaptorTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def retrieve_objects_with_uri_to_stream(session, streamNumber, uri, options=None, adaptorTypeSpecific=None):
    '''
    Retrieve adaptive object with URI to stream

    This function retrieves adaptive objects with a given URI.
    
    Each object is written to the 'streamId' stream as it's retrieved.
    
    The optional queryCriteria is used to filter the adaptive objects
    returned. Use the objectOptions parameter to influence how the objects
    are viewed.
    
    Options, specific to the adaptorId, can be optionally supplied.

    Parameters:

        streamNumber (integer): Stream number objects will be written to as
        they are retrieved.

        uri (anyURI): URI of objects to retrieve. If a URI begins with a
        single slash ('/'), it is the local object path. A query string can
        be specified.

        options (object): Object view options. See
        /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more
        information.

        adaptorTypeSpecific (object): This is an optional object parameter
        with an objectType determined by the adaptorType associated with the
        adaptorId parameter. If the adaptorType supports this parameter,
        adaptor afw will have an adaptive object type with an id of:
        
        _AdaptiveAdaptorTypeSpecific_${adaptorType}_retrieve_objects
        
        Where ${adaptorType} is the adaptor type id.

    Returns:
    null: 
    '''

    request = session.Request()

    action = {
        "function": "retrieve_objects_with_uri_to_stream",
        "streamNumber": streamNumber,
        "uri": uri
    }

    if options != None:
        action['options'] = options

    if adaptorTypeSpecific != None:
        action['adaptorTypeSpecific'] = adaptorTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def update_object(session, objectType, objectId, object, adaptorId=None, journal=None, adaptorTypeSpecific=None):
    '''
    Update adaptive object

    Update an adaptive object.

    Parameters:

        adaptorId (string): Id of adaptor containing object to update.

        objectType (string): Id of adaptive object type of object to update.

        objectId (string): Id of object to update.

        object (object): Object containing properties to replace in existing
        object. You can use object_modify instead to update properties of
        embedded objects and arrays, as well as to modify individual values
        of the object.

        journal (object): The properties of this object will be added to the
        associated journal entry. Refer to
        /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names
        to avoid and for ones that have specific semantics.

        adaptorTypeSpecific (object): This is an optional object parameter
        with an objectType determined by the adaptorType associated with the
        adaptorId parameter. If the adaptorType supports this parameter,
        adaptor afw will have an adaptive object type with an id of:
        
        _AdaptiveAdaptorTypeSpecific_${adaptorType}_modify_object
        
        Where ${adaptorType} is the adaptor type id.

    Returns:
    object: Resulting journal entry.
    '''

    request = session.Request()

    action = {
        "function": "update_object",
        "objectType": objectType,
        "objectId": objectId,
        "object": object
    }

    if adaptorId != None:
        action['adaptorId'] = adaptorId

    if journal != None:
        action['journal'] = journal

    if adaptorTypeSpecific != None:
        action['adaptorTypeSpecific'] = adaptorTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def update_object_with_uri(session, uri, object, journal=None, adaptorTypeSpecific=None):
    '''
    Update adaptive object with URI

    Update an adaptive object with a given URI.

    Parameters:

        uri (anyURI): URI of object to update. If a URI begins with a single
        slash ('/'), it is the local object path.

        object (object): Object containing properties to replace in existing
        object. You can use object_modify instead to update properties of
        embedded objects and arrays, as well as to modify individual values
        of the object.

        journal (object): The properties of this object will be added to the
        associated journal entry. Refer to
        /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names
        to avoid and for ones that have specific semantics.

        adaptorTypeSpecific (object): This is an optional object parameter
        with an objectType determined by the adaptorType associated with the
        adaptorId parameter. If the adaptorType supports this parameter,
        adaptor afw will have an adaptive object type with an id of:
        
        _AdaptiveAdaptorTypeSpecific_${adaptorType}_modify_object
        
        Where ${adaptorType} is the adaptor type id.

    Returns:
    object: Resulting journal entry.
    '''

    request = session.Request()

    action = {
        "function": "update_object_with_uri",
        "uri": uri,
        "object": object
    }

    if journal != None:
        action['journal'] = journal

    if adaptorTypeSpecific != None:
        action['adaptorTypeSpecific'] = adaptorTypeSpecific

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

