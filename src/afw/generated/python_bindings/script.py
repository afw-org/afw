# -*- coding: utf-8 -*-

# Generated by afwdev generate afw

import requests
import json

def bag_script(session, values=None):
    '''
    Makes an array from values

    Takes any number of script values and returns an array of array.

    Parameters:

        values (array):

    Returns:
    array: 
    '''

    request = session.Request()

    action = {
        "function": "bag<script>"
    }

    if values != None:
        action['values'] = values

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def bag_size_script(session, value):
    '''
    Returns the number of values in a bag

    This returns the integer number of values in array.

    Parameters:

        value (array):

    Returns:
    integer: 
    '''

    request = session.Request()

    action = {
        "function": "bag_size<script>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def compile_script(session, source, listing=None):
    '''
    Compile script value

    Compile script value and return either an unevaluated adaptive value or a
    string containing the compiler listing.

    Parameters:

        source (script): script string to compile

        listing (): If specified, a compiler listing is produced instead of
        an unevaluated expression value.
        
        This parameter can be an integer between 0 and 10 of a string that is
        used for indentation. If 0 is specified, no whitespace is added to
        the resulting string. If 1 through 10 is specified, that number of
        spaces is used.

    Returns:
    unevaluated: 
    '''

    request = session.Request()

    action = {
        "function": "compile<script>",
        "source": source
    }

    if listing != None:
        action['listing'] = listing

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def eq_script(session, arg1, arg2):
    '''
    Checks for equal

    Determine if script arg1 is equal to the value of arg2 converted to the
    data type of arg1 then return the boolean result. Use 'eqx' ('===')
    instead if you want false to be returned if arg1 and arg2's data type
    don't match.

    Parameters:

        arg1 (script):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "eq<script>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def eqx_script(session, arg1, arg2):
    '''
    Checks for equal and type

    Determine if for script arg1 is equal to the value and data type of arg2
    then return the boolean result. Use 'eq' ('==') instead if you want arg2
    to be converted to the data type of arg1 before comparison.

    Parameters:

        arg1 (script):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "eqx<script>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def evaluate_script(session, source, additionalUntrustedQualifiedVariables=None):
    '''
    Evaluate script value

    Compile and evaluate script value.

    Parameters:

        source (script): script string to compile and evaluate

        additionalUntrustedQualifiedVariables (object): This parameter
        supplies additional qualified variables that can be accessed during
        evaluation. These variables will not be used by anything that needs
        to ensure its qualified variables must come from a trusted source,
        such as authorization. This parameter is intended to be used for
        testing only and should not be used for anything running in
        production.

    Returns:
    unevaluated: 
    '''

    request = session.Request()

    action = {
        "function": "evaluate<script>",
        "source": source
    }

    if additionalUntrustedQualifiedVariables != None:
        action['additionalUntrustedQualifiedVariables'] = additionalUntrustedQualifiedVariables

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def ge_script(session, arg1, arg2):
    '''
    Checks for greater than or equal

    Checks for script arg1 is greater than or equal to script arg2 and return
    the boolean result.

    Parameters:

        arg1 (script):

        arg2 (script):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "ge<script>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def gt_script(session, arg1, arg2):
    '''
    Checks for greater than

    Checks for script arg1 is greater than script arg2 and return the boolean
    result.

    Parameters:

        arg1 (script):

        arg2 (script):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "gt<script>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def is_script(session, value):
    '''
    Checks whether value is dataType script

    Checks whether value is dataType script and return the boolean result.

    Parameters:

        value (): Value to check

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "is<script>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def le_script(session, arg1, arg2):
    '''
    Checks for less than or equal

    Checks for script arg1 is less than or equal to script arg2 and return
    the boolean result.

    Parameters:

        arg1 (script):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "le<script>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def lt_script(session, arg1, arg2):
    '''
    Checks for less than

    Checks for script arg1 is less that script arg2 and return the boolean
    result.

    Parameters:

        arg1 (script):

        arg2 (script):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "lt<script>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def ne_script(session, arg1, arg2):
    '''
    Checks for not equal

    Determine if script arg1 is not equal to the value of arg2 converted to
    the data type of arg1 then return the boolean result. Use 'nex' ('!==')
    instead if you want true to be returned if arg1 and arg2's data type
    don't match.

    Parameters:

        arg1 (script):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "ne<script>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def nex_script(session, arg1, arg2):
    '''
    Checks for not equal value or type

    Determine if for script arg1 is not equal to the value or data type of
    arg2 then return the boolean result. Use 'ne' ('!=') instead if you want
    arg2 to be converted to the data type of arg1 before comparison.

    Parameters:

        arg1 (script):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "nex<script>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def script(session, value):
    '''
    Convert to data type script

    Converts value to data type script returning script result.

    Parameters:

        value (): Value to convert

    Returns:
    script: Converted value
    '''

    request = session.Request()

    action = {
        "function": "script",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

