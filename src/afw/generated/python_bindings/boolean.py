# -*- coding: utf-8 -*-

# Generated by afwdev generate afw

import requests
import json

def at_least_one_member_of_boolean(session, array1, array2):
    """
    Checks for at least one value in common

    Returns boolean true if at least one value in boolean array1 is in
    boolean array2.

    Args:
        array1 (list): The first array.

        array2 (list): The second array.

    Returns:
        bool:
    """

    request = session.Request()

    action = {
        "function": "at_least_one_member_of<boolean>",
        "array1": array1,
        "array2": array2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def bag_boolean(session, values=None):
    """
    Makes an array from values

    Takes any number of boolean values and returns an array of array.

    Args:
        values (list):

    Returns:
        list:
    """

    request = session.Request()

    action = {
        "function": "bag<boolean>"
    }

    if values != None:
        action['values'] = values

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def bag_size_boolean(session, value):
    """
    Returns the number of values in a bag

    This returns the integer number of values in array.

    Args:
        value (list):

    Returns:
        int:
    """

    request = session.Request()

    action = {
        "function": "bag_size<boolean>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def boolean(session, value):
    """
    Convert to data type boolean

    Converts value to data type boolean returning boolean result.

    Args:
        value (object): Value to convert

    Returns:
        bool: Converted value
    """

    request = session.Request()

    action = {
        "function": "boolean",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def eq_boolean(session, arg1, arg2):
    """
    Checks for equal

    Determine if boolean arg1 is equal to the value of arg2 converted to the
    data type of arg1 then return the boolean result. Use 'eqx' ('===')
    instead if you want false to be returned if arg1 and arg2's data type
    don't match.

    Args:
        arg1 (bool):

        arg2 (object):

    Returns:
        bool:
    """

    request = session.Request()

    action = {
        "function": "eq<boolean>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def eqx_boolean(session, arg1, arg2):
    """
    Checks for equal and type

    Determine if for boolean arg1 is equal to the value and data type of arg2
    then return the boolean result. Use 'eq' ('==') instead if you want arg2
    to be converted to the data type of arg1 before comparison.

    Args:
        arg1 (bool):

        arg2 (object):

    Returns:
        bool:
    """

    request = session.Request()

    action = {
        "function": "eqx<boolean>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def ge_boolean(session, arg1, arg2):
    """
    Checks for greater than or equal

    Checks for boolean arg1 is greater than or equal to boolean arg2 and
    return the boolean result.

    Args:
        arg1 (bool):

        arg2 (bool):

    Returns:
        bool:
    """

    request = session.Request()

    action = {
        "function": "ge<boolean>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def gt_boolean(session, arg1, arg2):
    """
    Checks for greater than

    Checks for boolean arg1 is greater than boolean arg2 and return the
    boolean result.

    Args:
        arg1 (bool):

        arg2 (bool):

    Returns:
        bool:
    """

    request = session.Request()

    action = {
        "function": "gt<boolean>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def intersection_boolean(session, array1, array2):
    """
    Returns intersection of two arrays

    Returns an array of boolean with the values that are common to both array
    of boolean array1 and array2.

    Args:
        array1 (list): The first array.

        array2 (list): The second array.

    Returns:
        list:
    """

    request = session.Request()

    action = {
        "function": "intersection<boolean>",
        "array1": array1,
        "array2": array2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def is_boolean(session, value):
    """
    Checks whether value is dataType boolean

    Checks whether value is dataType boolean and return the boolean result.

    Args:
        value (object): Value to check

    Returns:
        bool:
    """

    request = session.Request()

    action = {
        "function": "is<boolean>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def is_in_boolean(session, value, array):
    """
    Checks whether a value is in an array

    Checks whether boolean value is in array of boolean array and returns the
    boolean result.

    Args:
        value (bool):

        array (list):

    Returns:
        bool:
    """

    request = session.Request()

    action = {
        "function": "is_in<boolean>",
        "value": value,
        "array": array
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def le_boolean(session, arg1, arg2):
    """
    Checks for less than or equal

    Checks for boolean arg1 is less than or equal to boolean arg2 and return
    the boolean result.

    Args:
        arg1 (bool):

        arg2 (object):

    Returns:
        bool:
    """

    request = session.Request()

    action = {
        "function": "le<boolean>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def lt_boolean(session, arg1, arg2):
    """
    Checks for less than

    Checks for boolean arg1 is less that boolean arg2 and return the boolean
    result.

    Args:
        arg1 (bool):

        arg2 (bool):

    Returns:
        bool:
    """

    request = session.Request()

    action = {
        "function": "lt<boolean>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def ne_boolean(session, arg1, arg2):
    """
    Checks for not equal

    Determine if boolean arg1 is not equal to the value of arg2 converted to
    the data type of arg1 then return the boolean result. Use 'nex' ('!==')
    instead if you want true to be returned if arg1 and arg2's data type
    don't match.

    Args:
        arg1 (bool):

        arg2 (object):

    Returns:
        bool:
    """

    request = session.Request()

    action = {
        "function": "ne<boolean>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def nex_boolean(session, arg1, arg2):
    """
    Checks for not equal value or type

    Determine if for boolean arg1 is not equal to the value or data type of
    arg2 then return the boolean result. Use 'ne' ('!=') instead if you want
    arg2 to be converted to the data type of arg1 before comparison.

    Args:
        arg1 (bool):

        arg2 (object):

    Returns:
        bool:
    """

    request = session.Request()

    action = {
        "function": "nex<boolean>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def one_and_only_boolean(session, array):
    """
    Converts a one value array to a boolean value

    This converts an array of boolean values that contains one value to a
    single boolean value.

    Args:
        array (list):

    Returns:
        bool:
    """

    request = session.Request()

    action = {
        "function": "one_and_only<boolean>",
        "array": array
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def set_equals_boolean(session, array1, array2):
    """
    Checks whether two arrays are subsets of each other

    Returns boolean true if boolean array1 and boolean array2 are subsets of
    each other and return the boolean result.

    Args:
        array1 (list):

        array2 (list):

    Returns:
        bool:
    """

    request = session.Request()

    action = {
        "function": "set_equals<boolean>",
        "array1": array1,
        "array2": array2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def subset_boolean(session, array1, array2):
    """
    Determines if the first array is a subset of second array

    Returns boolean true if the unique values in boolean array1 are all in
    boolean array2.

    Args:
        array1 (list): The first array.

        array2 (list): The second array.

    Returns:
        bool:
    """

    request = session.Request()

    action = {
        "function": "subset<boolean>",
        "array1": array1,
        "array2": array2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def to_string_boolean(session, value):
    """
    Converts value to string

    Converts boolean value to string. For array values, the to_string() value
    for each entry is returned separated with commas.

    Args:
        value (bool): A boolean value.

    Returns:
        str: The string representation of the value.
    """

    request = session.Request()

    action = {
        "function": "to_string<boolean>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def union_boolean(session, arrays):
    """
    Returns union of two or more string arrays

    Returns an array of boolean contains all of the unique values in two or
    more array of boolean values.

    Args:
        arrays (list): Two or more arrays.

    Returns:
        list:
    """

    request = session.Request()

    action = {
        "function": "union<boolean>",
        "arrays": arrays
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

