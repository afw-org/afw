# -*- coding: utf-8 -*-

# Generated by afwdev generate afw

import requests
import json

def bag_ia5String(session, values=None):
    '''
    Makes a list from values

    Takes any number of ia5String values and returns a list of list.

    Parameters:

        values (array):

    Returns:
    array: 
    '''

    request = session.Request()

    action = {
        "function": "bag<ia5String>"
    }

    if values != None:
        action['values'] = values

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def bag_size_ia5String(session, value):
    '''
    Returns the number of values in a bag

    This returns the integer number of values in list.

    Parameters:

        value (array):

    Returns:
    integer: 
    '''

    request = session.Request()

    action = {
        "function": "bag_size<ia5String>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def eq_ia5String(session, arg1, arg2):
    '''
    Checks for equal

    Determine if ia5String arg1 is equal to the value of arg2 converted to
    the data type of arg1 then return the boolean result. Use 'eqx' ('===')
    instead if you want false to be returned if arg1 and arg2's data type
    don't match.

    Parameters:

        arg1 (ia5String):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "eq<ia5String>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def eqx_ia5String(session, arg1, arg2):
    '''
    Checks for equal and type

    Determine if for ia5String arg1 is equal to the value and data type of
    arg2 then return the boolean result. Use 'eq' ('==') instead if you want
    arg2 to be converted to the data type of arg1 before comparison.

    Parameters:

        arg1 (ia5String):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "eqx<ia5String>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def ge_ia5String(session, arg1, arg2):
    '''
    Checks for greater than or equal

    Checks for ia5String arg1 is greater than or equal to ia5String arg2 and
    return the boolean result.

    Parameters:

        arg1 (ia5String):

        arg2 (ia5String):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "ge<ia5String>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def gt_ia5String(session, arg1, arg2):
    '''
    Checks for greater than

    Checks for ia5String arg1 is greater than ia5String arg2 and return the
    boolean result.

    Parameters:

        arg1 (ia5String):

        arg2 (ia5String):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "gt<ia5String>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def ia5String(session, value):
    '''
    Convert to data type ia5String

    Converts value to data type ia5String returning ia5String result.

    Parameters:

        value (): Value to convert

    Returns:
    ia5String: Converted value
    '''

    request = session.Request()

    action = {
        "function": "ia5String",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def is_ia5String(session, value):
    '''
    Checks whether value is dataType ia5String

    Checks whether value is dataType ia5String and return the boolean result.

    Parameters:

        value (): Value to check

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "is<ia5String>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def le_ia5String(session, arg1, arg2):
    '''
    Checks for less than or equal

    Checks for ia5String arg1 is less than or equal to ia5String arg2 and
    return the boolean result.

    Parameters:

        arg1 (ia5String):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "le<ia5String>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def lt_ia5String(session, arg1, arg2):
    '''
    Checks for less than

    Checks for ia5String arg1 is less that ia5String arg2 and return the
    boolean result.

    Parameters:

        arg1 (ia5String):

        arg2 (ia5String):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "lt<ia5String>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def ne_ia5String(session, arg1, arg2):
    '''
    Checks for not equal

    Determine if ia5String arg1 is not equal to the value of arg2 converted
    to the data type of arg1 then return the boolean result. Use 'nex'
    ('!==') instead if you want true to be returned if arg1 and arg2's data
    type don't match.

    Parameters:

        arg1 (ia5String):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "ne<ia5String>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def nex_ia5String(session, arg1, arg2):
    '''
    Checks for not equal value or type

    Determine if for ia5String arg1 is not equal to the value or data type of
    arg2 then return the boolean result. Use 'ne' ('!=') instead if you want
    arg2 to be converted to the data type of arg1 before comparison.

    Parameters:

        arg1 (ia5String):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "nex<ia5String>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def to_string_ia5String(session, value):
    '''
    Converts value to string

    Converts ia5String value to string. For list values, the to_string()
    value for each entry is returned separated with commas.

    Parameters:

        value (ia5String): A ia5String value.

    Returns:
    string: The string representation of the value.
    '''

    request = session.Request()

    action = {
        "function": "to_string<ia5String>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

