# -*- coding: utf-8 -*-

# Generated by afwdev generate afw

import requests
import json

def bag_password(session, values=None):
    '''
    Makes a list from values

    Takes any number of password values and returns a list of list.

    Parameters:

        values (list):

    Returns:
    list: 
    '''

    request = session.Request()

    action = {
        "function": "bag<password>"
    }

    if values != None:
        action['values'] = values

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def bag_size_password(session, value):
    '''
    Returns the number of values in a bag

    This returns the integer number of values in list.

    Parameters:

        value (list):

    Returns:
    integer: 
    '''

    request = session.Request()

    action = {
        "function": "bag_size<password>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def eq_password(session, arg1, arg2):
    '''
    Checks for equal

    Determine if password arg1 is equal to the value of arg2 converted to the
    data type of arg1 then return the boolean result. Use "eqx" ("===")
    instead if you want false to be returned if arg1 and arg2's data type
    don't match.

    Parameters:

        arg1 (password):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "eq<password>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def eqx_password(session, arg1, arg2):
    '''
    Checks for equal and type

    Determine if for password arg1 is equal to the value and data type of
    arg2 then return the boolean result. Use "eq" ("==") instead if you want
    arg2 to be converted to the data type of arg1 before comparison.

    Parameters:

        arg1 (password):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "eqx<password>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def ge_password(session, arg1, arg2):
    '''
    Checks for greater than or equal

    Checks for password arg1 is greater than or equal to password arg2 and
    return the boolean result.

    Parameters:

        arg1 (password):

        arg2 (password):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "ge<password>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def gt_password(session, arg1, arg2):
    '''
    Checks for greater than

    Checks for password arg1 is greater than password arg2 and return the
    boolean result.

    Parameters:

        arg1 (password):

        arg2 (password):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "gt<password>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def is_password(session, value):
    '''
    Checks whether value is dataType password

    Checks whether value is dataType password and return the boolean result.

    Parameters:

        value (): Value to check

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "is<password>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def le_password(session, arg1, arg2):
    '''
    Checks for less than or equal

    Checks for password arg1 is less than or equal to password arg2 and
    return the boolean result.

    Parameters:

        arg1 (password):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "le<password>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def lt_password(session, arg1, arg2):
    '''
    Checks for less than

    Checks for password arg1 is less that password arg2 and return the
    boolean result.

    Parameters:

        arg1 (password):

        arg2 (password):

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "lt<password>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def ne_password(session, arg1, arg2):
    '''
    Checks for not equal

    Determine if password arg1 is not equal to the value of arg2 converted to
    the data type of arg1 then return the boolean result. Use "nex" ("!==")
    instead if you want true to be returned if arg1 and arg2's data type
    don't match.

    Parameters:

        arg1 (password):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "ne<password>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def nex_password(session, arg1, arg2):
    '''
    Checks for not equal value or type

    Determine if for password arg1 is not equal to the value or data type of
    arg2 then return the boolean result. Use "ne" ("!=") instead if you want
    arg2 to be converted to the data type of arg1 before comparison.

    Parameters:

        arg1 (password):

        arg2 ():

    Returns:
    boolean: 
    '''

    request = session.Request()

    action = {
        "function": "nex<password>",
        "arg1": arg1,
        "arg2": arg2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def password(session, value):
    '''
    Convert to data type password

    Converts value to data type password returning password result.

    Parameters:

        value (): Value to convert

    Returns:
    password: Converted value
    '''

    request = session.Request()

    action = {
        "function": "password",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def to_string_password(session, value):
    '''
    Converts value to string

    Converts password value to string. For list values, the to_string() value
    for each entry is returned separated with commas.

    Parameters:

        value (password): A password value.

    Returns:
    string: The string representation of the value.
    '''

    request = session.Request()

    action = {
        "function": "to_string<password>",
        "value": value
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

