#!/usr/bin/env python3

##
# @file higher_order_array.py
# @ingroup afw_bindings_python
# @brief This file contains the Python bindings for the higher_order_array category.
#

# Generated by afwdev generate afw

import requests
import json

def all_of(session, predicate, values):
    """
    All values pass a test

    Returns true if all values in an array pass the predicate test.

    Args:
        predicate (object): This function is called for each value in the
        first array in values or until false is returned. If no calls return
        false, the result is true.

        values (object): These are the parameters passed to predicate with the
        exception that the first array is passed one value at a time. At least
        one array is required.

    Returns:
        bool:
    """

    request = session.Request()

    action = {
        "function": "all_of",
        "predicate": predicate,
        "values": values
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def all_of_all(session, predicate, array1, array2):
    """
    All combinations true

    Returns true if the result of calling predicate with all of the
    combination of values from array1 and array2 returns true.

    Args:
        predicate (object): The predicate is passed two parameters, the first
        is a value from array1 and the second is a value from array2.

        array1 (list):

        array2 (list):

    Returns:
        bool:
    """

    request = session.Request()

    action = {
        "function": "all_of_all",
        "predicate": predicate,
        "array1": array1,
        "array2": array2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def all_of_any(session, predicate, array1, array2):
    """
    Combinations of all in array1 and any in array2 true

    This function returns true if the result of calling predicate with all of
    the combination of values from array1 and any of the values of array2
    returns true.

    Args:
        predicate (object): The predicate is passed two parameters, the first
        is a value from array1 and the second is a value from array2.

        array1 (list):

        array2 (list):

    Returns:
        bool:
    """

    request = session.Request()

    action = {
        "function": "all_of_any",
        "predicate": predicate,
        "array1": array1,
        "array2": array2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def any_of(session, predicate, values):
    """
    Any values pass a test

    Returns true if any value in an array pass the predicate test.

    Args:
        predicate (object): This function is called for each value in the
        first array in values or until true is returned. If no calls return
        true, the result is false.

        values (object): These are the parameters passed to predicate with the
        exception that the first array is passed one value at a time. At least
        one array is required.

    Returns:
        bool:
    """

    request = session.Request()

    action = {
        "function": "any_of",
        "predicate": predicate,
        "values": values
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def any_of_all(session, predicate, array1, array2):
    """
    Combinations of any in array1 and all in array2 true

    Returns true if the result of calling predicate with all of the
    combination of values from array2 and any of the values of array1 returns
    true.

    Args:
        predicate (object): The predicate is passed two parameters, the first
        is a value from array1 and the second is a value from array2.

        array1 (list):

        array2 (list):

    Returns:
        bool:
    """

    request = session.Request()

    action = {
        "function": "any_of_all",
        "predicate": predicate,
        "array1": array1,
        "array2": array2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def any_of_any(session, predicate, array1, array2):
    """
    Any combinations true

    This function returns true if the result of calling predicate with any of
    the combination of values from array1 and array2 returns true.

    Args:
        predicate (object): The predicate is passed two parameters, the first
        is a value from array1 and the second is a value from array2.

        array1 (list):

        array2 (list):

    Returns:
        bool:
    """

    request = session.Request()

    action = {
        "function": "any_of_any",
        "predicate": predicate,
        "array1": array1,
        "array2": array2
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def filter(session, predicate, values):
    """
    Filter an array

    This produces an array containing only values from another array that pass
    a predicate test.

    Args:
        predicate (object): This is a boolean function that is called to
        determine if an array entry should be included in the returned array.

        values (object): These are the values passed to the predicate with the
        exception that the first array is passed as the single current value
        from the array. At least one array is required.

    Returns:
        list: This is the resulting filtered array.
    """

    request = session.Request()

    action = {
        "function": "filter",
        "predicate": predicate,
        "values": values
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def find(session, predicate, values):
    """
    Returns the first value in an array that passes a test

    The predicate is called for each value in the first array in values until
    true is returned, then that value is returned.

    Args:
        predicate (object): This is a boolean function that is called to
        determine if an array entry passes the test.

        values (object): These are the values passed to the predicate with the
        exception that the first array is passed as the single current value
        from the array. At least one array is required.

    Returns:
        object: The first value that passes the test is returned.
    """

    request = session.Request()

    action = {
        "function": "find",
        "predicate": predicate,
        "values": values
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def map(session, functor, values):
    """
    Maps values of an array

    This function creates an array of the results of calling functor with each
    value of the first array in values

    Args:
        functor (object):

        values (object): These are the parameters passed to functor with the
        exception that the first array is passed one value at a time. At least
        one array is required.

    Returns:
        list:
    """

    request = session.Request()

    action = {
        "function": "map",
        "functor": functor,
        "values": values
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def reduce(session, functor, accumulator, array):
    """
    Reduce values of an array to a single value

    Reduce calls functor for each value in array with two parameters,
    accumulator and value, and must return a value of any dataType. Parameter
    accumulator is the reduce() accumulator parameter value on first call and
    the return value of previous functor() call on subsequent calls. The
    dataType of the return value should normally be the same as accumulator,
    but this is not required.

    Args:
        functor (object): This function is called for each value in an array.
        The returned value is passed as the accumulator parameter on the next
        call to functor().

        accumulator (object): This is an initial accumulator value passed to
        functor(). Normally, the dataType of accumulator will be the dataTape
        for the reduce() return value, but this is not required.

        array (list): This is an array to be reduced.

    Returns:
        object: This is the final return value from functor() or the
        accumulator parameter value if array is empty.
    """

    request = session.Request()

    action = {
        "function": "reduce",
        "functor": functor,
        "accumulator": accumulator,
        "array": array
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

def sort(session, compareFunction, array):
    """
    Sort values in an array

    This produces an array with values sorted based on result of
    compareFunction. The compareFunction is passed two values from the array
    and must return an integer less than 0 if the first value is less than the
    second value, 0 if they are equal, and a integer greater than 0 if the
    first value is greater than the second value.

    Args:
        compareFunction (object): This function is called with two value from
        array.

        array (list): This is the array to sort.

    Returns:
        list: This the the resulting sorted array.
    """

    request = session.Request()

    action = {
        "function": "sort",
        "compareFunction": compareFunction,
        "array": array
    }

    request.add_action(action)

    response = request.perform()
    if response.get('status') == 'error':
        raise Exception(response.get('error'))

    return response['actions'][0]['result']

