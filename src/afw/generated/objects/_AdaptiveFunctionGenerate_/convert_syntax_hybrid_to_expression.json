{
    "afwCamelCaseFunctionLabel": "afwConvertSyntaxHybridToExpression",
    "brief": "Convert a hybrid to a expression.",
    "camelCaseFunctionLabel": "convertSyntaxHybridToExpression",
    "category": "compiler",
    "description": "Convert a string containing adaptive hybrid syntax, which can be an adaptive template or adaptive expression, to adaptive expression syntax.",
    "functionId": "convert_syntax_hybrid_to_expression",
    "functionLabel": "convert_syntax_hybrid_to_expression",
    "parameters": [
        {
            "dataType": "string",
            "description": "The hybrid to convert.",
            "name": "hybrid"
        },
        {
            "description": "Add whitespace for readability if present and not 0. This parameter can be an integer between 0 and 10 or a string that is used for indentation. If 0 is specified, no whitespace is added to the resulting string. If 1 through 10 is specified, that number of spaces is used.",
            "name": "whitespace",
            "optional": true
        }
    ],
    "pure": true,
    "returns": {
        "dataType": "expression",
        "description": "The converted value in adaptive expression syntax."
    }
}