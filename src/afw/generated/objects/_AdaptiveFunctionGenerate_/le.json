{
    "afwCamelCaseFunctionLabel": "afwLe",
    "brief": "Checks for less than or equal",
    "camelCaseFunctionLabel": "le",
    "category": "polymorphic",
    "dataTypeMethod": true,
    "description": "Checks for <dataType> arg1 is less than or equal to <dataType> arg2 and return the boolean result.",
    "functionId": "le",
    "functionLabel": "le",
    "op": "<=",
    "parameters": [
        {
            "name": "arg1",
            "polymorphicDataType": true
        },
        {
            "name": "arg2"
        }
    ],
    "polymorphic": true,
    "polymorphicDataTypes": [
        "anyURI",
        "array",
        "base64Binary",
        "boolean",
        "date",
        "dateTime",
        "dayTimeDuration",
        "dnsName",
        "double",
        "expression",
        "function",
        "hexBinary",
        "hybrid",
        "ia5String",
        "integer",
        "ipAddress",
        "object",
        "objectId",
        "objectPath",
        "password",
        "regexp",
        "rfc822Name",
        "script",
        "string",
        "template",
        "time",
        "x500Name",
        "xpathExpression",
        "yearMonthDuration"
    ],
    "polymorphicExecuteFunction": "afw_function_execute_le",
    "polymorphicOverrides": {
        "date": {
            "description": "Checks for date arg1 is less than or equal to date arg2 and return the boolean result.\n\nIf a date value does not include a time-zone value, then the local time-zone value will be assigned."
        },
        "dateTime": {
            "description": "Checks for dateTime arg1 is less than or equal to dateTime arg2 and return the boolean result.\n\nIf a dateTime value does not include a time-zone value, then the local time-zone value will be assigned."
        },
        "time": {
            "description": "Checks for time arg1 is less than or equal to time arg2 and return the boolean result.\n\nIt is illegal to compare a time that includes a time-zone value with one that does not. In such cases, the in_range<time> function should be used."
        }
    },
    "pure": true,
    "returns": {
        "dataType": "boolean"
    },
    "useExecuteFunction": "AFW_FUNCTION_EXECUTE_STANDARD_POLYMORPHIC_FUNCTION_HANDLING"
}