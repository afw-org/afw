<?xml version="1.0" encoding="utf-8" ?>
<doc>
    <title>Interfaces</title>
    <paragraph>
        Often a pattern emerges that may take advantage of having multiple
        internal or external implementations. Adaptive Framework declares an 
        <literal>Adaptive Interface</literal> definition for these patterns in
        order to formalize and document the related functions and parameters.
        This allows the core and extensions to follow a contract and work
        cohesively together through the interface implementation. Refer to the
        following table for a list of interfaces and their descriptions.
    </paragraph>
    <interfaces-table />    
    <paragraph>
        The following sections describe a few interfaces that are significant 
        to discussion of the Adaptive Framework architecture. For a more 
        comprehensive list, refer to the Developer Guide.
    </paragraph>
    <section>
        <title>Request Handlers</title>
        <paragraph>
            <literal>Request Handlers</literal> control how client requests are
            handled to by implementing the 
            <literal>afw_request_handler</literal> interface. Currently, the 
            only Request Handler provided by Core is the Adaptor Request
            Handler, which allows clients to retrieve and store objects in
            configured Adaptor(s). In time, additional request handlers may be
            added to provide functionality, such as XACML.
        </paragraph>
    </section>
    <section>
        <title>Content Types</title>
        <paragraph>
            Both core and extensions may register <literal>Content
            Types</literal>, which provide Adaptive Objects with an external
            representation. These Content Types are useful for translating
            adaptive objects between adaptors and storing them in ways that are
            convenient and useful.  
            They allow you to encode and decode all properties of an Adaptive
            Object, including their Adaptive Values. The following content types
            are provided by core:
        </paragraph>           
        <table>
            <columns>
                <column>Content Type</column>
                <column>Description</column>
            </columns>
            <rows>
                <row>
                    <column>JSON</column>
                    <column>Javascript Object Notation</column>
                </row>
                <row>
                    <column>XML</column>
                    <column>Extensible Markup Language</column>
                </row>
                <row>
                    <column>UBJSON</column>
                    <column>Universal Binary JSON</column>
                </row>
                <row>
                    <column>YAML</column>
                    <column>YAML Ain't Markup Language</column>
                </row>
            </rows>
        </table>             
    </section> 
    <section>   
        <title>Adaptors</title>    
        <paragraph>
            <literal>Adaptors</literal> implement several
            <literal>afw_adaptor_</literal> interfaces in order to provide your
            Adaptive Framework application with a way to store and retrieve
            Adaptive Objects. There are several adaptors that are included with
            the Adaptive Framework:
        </paragraph>
        <table>
            <columns>
                <column>Adaptor</column>
                <column>Description</column>
            </columns>
            <rows>
                <row>
                    <column>File</column>
                    <column>File-based object storage</column>
                </row>
                <row>
                    <column>LDAP</column>
                    <column>Lightweight Directory Access Protocol</column>
                </row>
                <row>
                    <column>LMDB</column>
                    <column>Lightning Memory-Mapped Database</column>
                </row>
                <row>
                    <column>Model</column>
                    <column>Model Adaptor</column>
                </row>
                <row>
                    <column>VFS</column>
                    <column>Virtual File System</column>
                </row>
            </rows>
        </table>
    </section>
    <section>
        <title>Logs</title>
        <paragraph>
            Logs implement the <literal>afw_log</literal> interface and allow
            for messages produced by Adaptive Framework to be routed to an
            external destination for viewing. There are currently two Logs 
            available:
        </paragraph>
        <table>
            <columns>
                <column>Log</column>
                <column>Description</column>
            </columns>
            <rows>
                <row>
                    <column>Standard</column>
                    <column>Logging to standard output</column>
                </row>            
                <row>
                    <column>Syslog</column>
                    <column>Logging to syslog</column>
                </row>
            </rows>
        </table>        
    </section> 
    <section>
        <title>Journals</title>
        <paragraph>
            Journals implement the <literal>afw_adaptor_journal</literal>
            interface and allow for object events to be journaled into a
            persistent queue. Journals must maintain cursors into this queue to
            track clients (or <literal>Provisioning Peers</literal>) who are 
            producing or consuming journal entries. Currently, two adaptors 
            also support the Journal interface:
        </paragraph>
        <table>
            <columns>
                <column>Journal</column>
                <column>Description</column>
            </columns>
            <rows>
                <row>
                    <column>File</column>
                    <column>File-based journal</column>
                </row>            
                <row>
                    <column>LMDB</column>
                    <column>Lightning Memory-Mapped Database journal</column>
                </row>
            </rows>
        </table>        
    </section>   
    <section>
        <title>Authorization Handlers</title>
        <paragraph>
            Authorization Handlers implement the
            <literal>afw_authorization_</literal> interfaces in order to  
            provide Adaptive Framework Core with a way to request and enforce
            authorization decisions when clients make requests for resources.
            There is currently one Authorization Handler provided by Core:
        </paragraph>
        <table>
            <columns>
                <column>Authorization Handler</column>
                <column>Description</column>
            </columns>
            <rows>   
                <row>
                    <column>Script</column>
                    <column>Adaptive-Script based authorization</column>
                </row>
            </rows>
        </table>  
    </section>
</doc>