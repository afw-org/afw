<?xml version="1.0" encoding="utf-8" ?>
<doc>
    <title>Adaptive Objects</title>   
    <paragraph>
        Throughout these guides, we will refer to objects, many of which were
        initially created in JSON format before being generated into 
        native C structures and stored in physical memory. For convenience, we 
        will often represent objects in the guides in JSON format. To learn 
        more  about the JSON format, please visit 
        <link href="http://www.json.org">http://www.json.org</link>.
    </paragraph>
    <section>
        <title>Adaptive Object Model</title>
        <paragraph>
            <literal>Adaptive Objects</literal> are similar to many Object 
            paradigms you may have been introduced to in a programming or data 
            structure lessons. They contain data in a structured way, just as 
            key/values, dictionaries or hashes encapsulate data in other popular 
            languages. With <literal>Adaptive Objects</literal>, the object 
            that contains data is described by another object, called its 
            <literal>Object Type</literal>. The keys and values on the Adaptive 
            Object are referred to as <literal>Adaptive Properties</literal> 
            and the definitions of those properties, which are contained within 
            the Object Type definition, are called <literal>Property 
            Types</literal>. These definitions provide us with useful metadata 
            that can be used for data validation, user interface representation, 
            authorization controls, and even data transformation and generation.  
            The following diagram illustrates these relationships, and is 
            commonly referred to as the Type Square Pattern:
        </paragraph>                
        <image 
            src="images/TypeSquarePattern.svg" 
            description="Type Square Pattern" 
            caption="Type Square Pattern" 
        />
        <paragraph>
            An Adaptive Object may have one or more Adaptive Properties. 
            Likewise, an Object Type may have one or more Property Types.  
            Moreover, an Object Type describes one or more Adaptive Object 
            instances, just as an Adaptive Property Type may describe one or 
            more Adaptive Properties. Let's examine these objects, in detail, 
            in order to get a better sense of how they are related.
        </paragraph>
        <paragraph>
            Let's define an Adaptive Object of interest with something that is 
            familiar. As a <literal>Person</literal>, I have some properties 
            that describe me. For example, I have a <literal>First Name</literal>, 
            a <literal>Last Name</literal> and an <literal>Age</literal>.
        </paragraph>
        <code>
{
    "First Name": "Kevin",
    "Last Name": "Smith",
    "Age": 40
}        
        </code> 
        <paragraph>
            Other people also have names and ages. Therefore, we can describe a
            Person using an Object Type. This Object Type contains Property 
            Types, declared under a special name, 
            <literal>propertyTypes</literal>, for "First Name", "Last Name" and 
            "Age". In this example, you will find "First Name", "Last Name" and 
            "Age" all have Property Type values of structured objects that 
            contain information about them. "First Name" and "Last Name" have a 
            <literal>dataType</literal> of <literal>string</literal> and 
            <literal>Age</literal> is described as an 
            <literal>integer</literal>. Both have additional 
            <literal>description</literal> properties that provide additional:
        </paragraph>
        <code>
{
    "propertyTypes": {
        "First Name": {
            "dataType": "string",
            "description" "This is a person's first name."
        },
        "Last Name": {
            "dataType": "string",
            "description": "This is a person's last name."
        },
        "Age": {
            "dataType": "integer",
            "description": "This is a person's age, in years."
        }
    }
}        
        </code>        
        <paragraph>
            This very simple example also demonstrates an aspect of Adaptive 
            Objects that may not seem obvious on the surface. "Object Type" 
            Person is also an Adaptive Object, and "propertyTypes" here is 
            also an Adaptive Property, whose value is an object containing
            "First Name", "Last Name" and "Age". It's only when we establish 
            the Object Type relationship between these two that we apply 
            semantic meaning to this object. In fact, the Person Object Type in 
            this example also has an Object Type, called 
            <literal>_AdaptiveObjectType_</literal>, which describes how an
            Adaptive Object Type is structured. Likewise, the object type 
            <literal>_AdaptivePropertyType_</literal>, is used to describe how 
            an Adaptive Property Type is structured. These two special objects
            are defined by Core as compiled object definitions. We can change
            the Person Object Type, because it's an object not defined to core,
            but we cannot change "_AdaptiveObjectType_" or
            "_AdaptivePropertyType_" without recompiling Adaptive Framework.
        </paragraph>
    </section> 
    <section>
        <title>Object Types and Property Types</title>
        <paragraph>
            In the previous section, we demonstrated how an Object Type and 
            its Property Types can describe an instance of an Object. We also  
            introduced the idea that Object Types and Property Types are also
            objects, themselves, described by "_AdaptiveObjectType_" and
            "_AdaptivePropertyType_" and defined as compiled-in objects to
            Adaptive Framework Core. Let's first look at what makes an Adaptive
            Property Type, using the example from the previous section. The
            Adaptive Property "First Name" had a Property Type definition that
            included a property called "dataType". The dataType property is an
            important one that we will get into more details later. Here is 
            a more complete list of properties that define a Property Type:
        </paragraph>
        <object-type-table objectTypeId="_AdaptiveValueMeta_" />        
    </section>
    <section>
        <title>Object Meta</title>
        <paragraph>
            We've now covered Object Types and Property Types and how 
            useful they are in describing an object or collection of objects by 
            extracting their "metadata" and storing it in a common place. In 
            addition to Object Types and Property Types, all objects contain 
            some additional metadata that is useful for Adaptive Framework 
            Core, Adaptors, and even clients. As you may have already guessed, 
            these too are documented and stored in a special Object Type called 
            <literal>_AdaptiveMeta_</literal>, which looks like the following:
        </paragraph>
        <object-type-table objectTypeId="_AdaptiveMeta_" />        
    </section>
    <section>
        <title>Absolute Object Paths</title>
        <header>Object Paths</header>
        <paragraph>
            Every Adaptive Object in Adaptive Framework is uniquely identified
            by an <literal>Object Path</literal> of the form: 
        </paragraph>                
        <code><![CDATA[/<adaptorId>/<objectTypeId>/<objectId>]]></code>
        <paragraph>
            An <literal>objectId</literal> is the unique object identifier of
            the entity, optionally followed by a slash-separated representation
            of embedded properties.
        </paragraph>
        <code><![CDATA[/<adaptorId</<objectType</objectId
/<adaptorId</<objectType</objectId/propertyName
/<adaptorId</<objectType</objectId/propertyNameA/propertyNameB]]></code>        
        <paragraph>
            If the property value is a list, a property name can be followed 
            with a zero based integer index enclosed in square brackets 
            (<literal>[n]</literal>).
        </paragraph>                        
        <code><![CDATA[
/<adaptorId>/<objectTypeId>/<objectId>/<propertyNameA>[<index>]
/<adaptorId>/<objectTypeId>/<objectId>/<propertyNameA>[<index>]/<property name>
/<adaptorId>/<objectTypeId>/<objectId>/<propertyNameA>/<propertyNameB>[<index>]
/<adaptorId>/<objectTypeId>/<objectId>/<propertyNameA>[<index>]/<propertyNameB>[<index>]
]]></code>        
        <header>Relative Adaptive Object Path</header>
        <paragraph>
            An <literal>Object URI</literal> can contain a path as defined
            above, a full URI with scheme, or a relative path. If a path is
            relative, it must be resolved relative to a supplied path.
        </paragraph>
        <paragraph>
            If a relative path begins with a <literal>/</literal>, its structure
            is the same as an absolute path with <literal>*</literal> used in 
            place of &amp;lt;adaptorId&amp;gt;, &amp;lt;objectTypeId&amp;gt;, 
            and each slashed part of &amp;lt;objectId&amp;gt; to use the
            corresponding value from the supplied path. The
            &amp;lt;objectId&amp;gt; can also be
            <literal>**</literal> to indicate that the entire
            &amp;lt;objectId&amp;gt; including all slash-separated properties
            should be used.
        </paragraph>
        <paragraph>
            If a relative path does not begin with a <literal>/</literal>, the
            <literal><![CDATA[<adaptorId>]]></literal> and
            <literal><![CDATA[<objectTypeId>]]></literal> from the supplied path
            will be used and the relative path will be used as the
            <literal><![CDATA[/<objectId>]]></literal>. The character sequence 
            <literal>/*</literal> can be used as a corresponding part from the
            supplied path's <literal><![CDATA[/<objectId>]]></literal>.
        </paragraph>
        <paragraph>
            The following are some examples of relative references using the
            given path: 
            <literal>/adaptorId/objectTypeId/objectId/prop1/prop2</literal>:
        </paragraph>
        <table>
            <columns>
                <column>Relative Path</column>
                <column>Resolved Path</column>
            </columns>
            <rows>
                <row>
                    <column><literal>objectId2</literal></column>
                    <column>/adaptorId/objectTypeId/objectId2</column>
                </row>
                <row>
                    <column><literal>objectId2/prop4</literal></column>
                    <column>/adaptorId/objectTypeId/objectId2/prop4</column>
                </row>
                <row>
                    <column><literal>/*/objectTypeId2/objectId3/prop5</literal></column>
                    <column>/adaptorId/objectTypeId2/objectId3/prop5</column>
                </row>
                <row>
                    <column><literal>/*/objectTypeId2/*/prop5</literal></column>
                    <column>/adaptorId/objectTypeId2/objectId/prop5</column>
                </row>
                <row>
                    <column><literal>*/prop6</literal></column>
                    <column>/adaptorId/objectTypeId/objectId/prop6</column>
                </row>
                <row>
                    <column><literal>*/*/prop7</literal></column>
                    <column>/adaptorId/objectTypeId/objectId/prop1/prop7</column>
                </row>
                <row>
                    <column><literal>/adaptorId2/*/**</literal></column>
                    <column>/adaptorId2/objectTypeId/objectId/prop1/prop2</column>
                </row>
                <row>
                    <column><literal>/*/*/**</literal></column>
                    <column>/adaptorId/objectTypeId/objectId/prop1/prop2</column>
                </row>
                <row>
                    <column><literal>/*/*/*</literal></column>
                    <column>/adaptorId/objectTypeId/objectId</column>
                </row>                
            </rows>
        </table>        
    </section> 
    <section>
        <title>Embedded Objects</title>
        <paragraph>
            Some Adaptive Objects may have properties that also contain 
            objects. We call these objects <literal>Embedded Objects</literal>.
            The following object illustrates an example of an Embedded Object, 
            referenced by the <literal>Embedding Property</literal> address:
        </paragraph>
        <code>
{
    "name": "John Doe",
    "address": {
        "street": "123 Main St.",
        "city": "Anytown",
        "state": "CA",
        "zip": "12345"
    }
}
        </code>
    </section>
    <section>
        <title>Inheritance</title>
        <paragraph>
            Adaptive Objects also allow for inheritance, so that Adaptive Objects 
            can borrow properties from other Adaptive Objects. This is done 
            through a special "meta" property called <literal>parentPaths</literal>:
        </paragraph>
        <code>
{
    "_meta_": {
        "parentPaths": [
            "/registry/_AdaptiveObjectType_/Person"
        ]
    },
    "employeeId": "12345",
    "officeAddress": {
        "street": "123 Main St.",
        "city": "Anytown",
        "state": "CA",
        "zip": "12345"
    }
}
        </code>
        <paragraph>
            When observing an Adaptive Object that contains a parent path, the 
            Object Option <literal>composite</literal> can be specified to 
            resolve the parent and include their properties in the returned 
            object. The following is an example of the same object with the
            <literal>composite</literal> option specified:
        </paragraph>
        <code>
{    
    "first": "John",
    "last": "Doe",
    "age": 42,
    "employeeId": "12345",
    "officeAddress": {
        "street": "123 Main St.",
        "city": "Anytown",
        "state": "CA",
        "zip": "12345"
    }
}
        </code>
    </section>
    <section>
        <title>Object Options</title>
        <paragraph>
            Adaptive Objects can be provided with <literal>Object
            Options</literal> that influence how an object should be displayed,
            including what metadata should be provided, or how Adaptive Property
            values should be interpreted or represented. The options that one
            uses is up to the application or client that is consuming or
            providing the objects. For example, a UI may require a lot of
            metadata to understand how to render properties on a screen, while a
            programmatic parser may request property values to be encoded in a
            way that's convenient for the client. Below is a table of the
            object options that are available.
        </paragraph>
        <object-type-table objectTypeId="_AdaptiveObjectOptions_" />        
    </section>
</doc>