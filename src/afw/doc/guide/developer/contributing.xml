<?xml version="1.0" encoding="utf-8" ?>
<doc>
    <title>Contributing</title>
    <paragraph>
        GitHub hosts the Adaptive Framework source code repository. We use 
        the  
        <link src="https://nvie.com/posts/a-successful-git-branching-model/">
            GitFlow branching model
        </link> to track the development and releases of the framework. The 
        main branch is the default and most current version of the framework. 
        The develop branch is used for the next release. A feature branch 
        is sometimes used for major, long-term development features. For 
        collaborators outside of the organization, we do accept Pull Requests 
        using the "fork and pull" workflow.
    </paragraph>
    <section>
        <title>Coding Conventions</title>
        <paragraph>
            These conventions are not required, but are followed in AFW core unless 
            noted in the associated header file:
        </paragraph>
        <list>
            <item>
                Adaptive object property names should be lower camel case (i.e., first 
                character lower case).
            </item>
            <item>
                The id of objects of type AdaptiveObjectType, AdaptivePropertyType, and 
                AdaptiveDataType should be upper camel case (ie. first character upper case).
            </item>
            <item>
                All names declared in headers should start with the header name without the 
                <literal>.h</literal>. For instance all of the function names in
                <literal>afw_memory.h</literal> begin with <literal>afw_memory_</literal>.
            </item>
            <item>
                All <literal>#define</literal> names in headers should start with the 
                uppercased header name without the <literal>.h</literal>. For instance 
                all of the <literal>#define</literal> names in afw_memory.h begin with 
                <literal>AFW_MEMORY_</literal>.
            </item>
            <item>
                All <literal>#define</literal> names should be uppercase with the exception 
                of the parts of a name that matches the case of the thing they represent. For 
                instance, the <literal>#define</literal> name for the core quoted string for 
                <literal>"objectType"</literal> is <literal>AFW_Q_objectType</literal>.
            </item>
            <item>
                <literal>Q</literal> in a <literal>#define</literal> name indicates a quoted 
                preprocessing value.
            </item>
            <item>
                <literal>U</literal> in a <literal>#define</literal> name indicates an unquoted 
                preprocessing value.
            </item>
            <item>
                <literal>S</literal> in a <literal>#define</literal> name indicates a reference 
                to a string variable containing a <literal>s</literal> in it's name.
            </item>
            <item>
                <literal>s</literal> is in the variable name of a afw_utf8_t that is referenced 
                externally.
            </item>
            <item>
                The variable name of null-terminated strings end with a <literal>_z</literal>. 
            </item>
        </list>  
    </section>    
    <section>
        <title>Versioning</title>
        <paragraph>
            The <literal>afw_version.h</literal> header contains #defines for version information 
            of the containing source and must be updated as the source level changes. The 
            corresponding values must also be changed in the corresponding builds.
        </paragraph>
        <paragraph>
            As version requirements change, function <literal>afw_version_check()</literal> in 
            <literal>afw.c</literal> must be updated. This includes any dependency changes.
        </paragraph>
        <paragraph>
            Any Adaptive Framework application should pass <literal>AFW_VERSION_HEX</literal> as 
            the first parameter to <literal>afw_environment_create()</literal>. Macro 
            <literal>AFW_ENVIRONMENT_CREATE()</literal> will do this for you. Function 
            <literal>afw_environment_create()</literal> will insure that the version of the 
            Adaptive Framework library and its dependencies are compatible with the application.
        </paragraph>
        <paragraph>
            Function <literal>afw_environment_load_extension()</literal> checks the version of 
            <literal>libafw</literal> that the extension was compiled against to make sure it is
            compatible.
        </paragraph>
    </section>
    <section>
        <title>License</title>
        <paragraph>
            Adaptive Framework is licensed under the MIT License.
        </paragraph>                    
    </section>
</doc>