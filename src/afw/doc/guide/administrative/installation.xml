<?xml version="1.0" encoding="utf-8" ?>
<doc>
    <title>Installation</title>
    <paragraph>
        Installing Adaptive Framework, whether to be used for Development or Deployment, can be 
        done in one of many ways. You may choose to build the framework yourself, install 
        the pre-built binaries from a distributive package, or use Docker to run it.
    </paragraph>
    <section>
        <title>Using Docker</title>
        <paragraph>
            Docker is a virtualization tool that can be used to quickly install and use 
            products from pre-built images. To pull the images that have already been 
            built and released, please visit the GitHub project repository for the 
            latest Release links. There images that can be used to run a 
            production instance of Adaptive Framework and one for demo purposes. There 
            are two additional images, afw-dev-base and afw-base that are used 
            internally for GitHub workflows, but may also be  used to build the first 
            three images from scratch.
        </paragraph>
        <table>
            <columns>
                <column>Image</column>
                <column>Description</column>
            </columns>
            <rows>
                <row>
                    <column>afwfcgi</column>
                    <column>
                        The afwfcgi image provides the FastCGI Service for processing client 
                        requests. This image is useful to configure behind a web server 
                        such as Apache or Ngninx, in order to provide RESTful web services.
                    </column>
                </row>
                <row>
                    <column>afw-admin</column>
                    <column>
                        The afw-admin image provides nginx and the administrative web app for 
                        managing an Adaptive Framework application. This web application is 
                        general-purpose and allows you to edit object data as well as configure 
                        and maintain services, logs, adaptors and authorization handlers.
                    </column>
                </row>
                <row>
                    <column>afw-demo</column>
                    <column>
                        This image is for demo purposes. It runs both afwfcgi, along 
                        with an nginx instance serving the admin interface. Additionally, 
                        it has some minimal configuration in place to provide a handful 
                        of adaptors in order to demo the framework.
                    </column>
                </row>
                <row>
                    <column>afw-dev-base</column>
                    <column>
                        This image contains the full development environment needed to 
                        build Adaptive Framework. There are multiple distributions 
                        supported, including RockyLinux, Ubuntu, Opensuse and Alpine Linux.
                    </column>
                </row>
                <row>
                    <column>afw-base</column>
                    <column>
                        This image contains the minimum requirements to run an instance 
                        of Adaptive Framework and serves only as a "base" image for 
                        afwfcgi and afw-demo.
                    </column>
                </row>
            </rows>
        </table>   
        <section>
            <title>Running Docker Images in Production</title>
            <paragraph>
                Running the pre-built Docker images in production requires that you have a 
                Docker Engine available. Docker is available for both Desktop and Server 
                environments. For more information, visit:  
                <link href="https://www.docker.com" text="https://www.docker.com" />
            </paragraph>
            <header>Using Docker Compose Orchestration</header>            
            <paragraph>
                Docker Compose is a simple orchestration tool, which can be used to run 
                multiple containers as services. By grouping multiple containers together, 
                Docker Compose can start and stop them all at once, while also handling 
                any special networking requirements between the containers. This is 
                useful for <literal>afwfcgi</literal> and <literal>afw-admin</literal>, 
                which need to be able to communicate with each other.
            </paragraph>
            <paragraph>
                Below is a sample configuration file <literal>docker-compose.yml</literal> to 
                run <literal>afw-admin</literal> and <literal>afwfcgi</literal>:
            </paragraph>
            <code>version "3.7"
services:

    afwfcgi:
        image: "afwfcgi"
        volumes:
            - afw:/afw

    admin:
        image: "afw-admin"
        ports:
            - "80:80"
        links:
            - afwfcgi

volumes:
    afw
            </code>
            <paragraph>
                To initialize and start both services in the background:
            </paragraph>
            <code>docker-compose up -d</code>
            <paragraph>
                To stop both services:
            </paragraph>
            <code>docker-compose stop</code>
        </section>
        <section>
            <title>Building Docker Images</title>
            <paragraph>
                If you wish to not to use officially released Docker images, and would 
                like to build your own from scratch, continue with instructions in 
                this section.
            </paragraph>
            <paragraph>
                After cloning the source, navigate to the <literal>docker/images</literal> 
                directory where Dockerfile configurations reside. The examples in this 
                section use Alpine Linux as the base distribution, but you may also 
                use the other platforms available. Alpine Linux is a nice 
                distribution base to use, because it minimizes software packages 
                in order to provide a very compact, secure image.
            </paragraph>
            <header>Building afw-dev-base Image</header>        
            <paragraph>
                The <literal>afw-dev-base</literal> image contains all of the software 
                that Adaptive Framework depends on for building. It includes autotools, 
                gcc compiler, python and other dependency packages.
            </paragraph>    
            <code>cd docker/images/builder
# Build an Alpine-based builder image
docker build -t afw-dev-base:alpine -f Dockerfile.alpine .</code>
            <paragraph>
                With the <literal>afw-dev-base</literal> built, we can now use it for 
                the next step: building from source.
            </paragraph>
            <code>docker run --rm -v /path/to/repo:/input -v /path/to/output:/output afw-dev-base:alpine</code>
            <paragraph>
                This previous step of running the <literal>afw-dev-base</literal> image 
                will use two mount points:  input, output. The input should be 
                the path to the repository and the output can be anywhere in your 
                file system that you want the builder to write out a distribution 
                file (.tar for Alpine, .rpm for RockyLinux, or .deb for Ubuntu). This 
                file is required for the next steps.
            </paragraph>
            <header>Building afwfcgi Image</header>            
            <code>cd docker/images/afwfcgi 

# Build an Alpine-based image            
docker build --build-arg BIN=&lt;alpine-based .tar file&gt; -t afwfcgi:alpine -f Dockerfile.alpine .</code>
        </section>
     </section>
     <section>
        <title>Building from Source</title>
        <paragraph>
            We recommend one of the following platform versions for building from Source:
        </paragraph>
        <list>            
            <item>RockyLinux</item>
            <item>Ubuntu 20.04</item>
            <item>OpenSUSE Leap 15.3</item>
            <item>Alpine Linux 3.16</item>
        </list>        
        <section>
            <title>Building on Ubuntu 20.04</title>
            <header>Source Build Dependencies</header>
            <code>sudo apt-get install -y git autotools-dev autoconf libtool</code>
            <header>Fetch Source</header>
            <code># Fetch source for Adaptive Framework
git clone https://github.com/afw-org/afw.git</code>
            <header>Install AdaptiveFramework Core dependencies</header>
            <code># Apache Run Time and Apache2 Dev
sudo apt-get install -y libapr1 libapr1-dev apache2-dev

# libxml2
sudo apt-get install -y libxml2 libxml2-dev

# libicu for Unicode support
sudo apt-get install -y libicu-dev

# libunwind and elfutils for stack trace
sudo apt-get install -y libunwind-setjmp0-dev elfutils libdw-dev</code>
            <header>Install AdaptiveFramework Adaptor dependencies</header>
            <code># LightningDB Adaptor
sudo apt-get install -y liblmdb-dev

# need OpenSSL and CURL for DynamoDB adaptor dependencies
sudo apt-get install -y libcurl4-openssl-dev libssl-dev

# YAML
sudo apt-get install -y libyaml-dev</code>
            <header>Install HTTP stack</header>
            <code># FastCGI library
sudo apt-get install -y libfcgi-dev

# NGNIX
sudo apt-get install -y nginx</code>
            <header>Development tools (optional)</header>
            <code># debugging
sudo apt-get install -y gdb
sudo apt-get install -y valgrind
sudo apt-get install -y lsof

# python stuff
pip install -r python-requirements.txt</code>
            <header>Building Adaptive Framework</header>
            <code>cd afw
./afwdev build --install</code>            
            <header>TL;DR</header>
            <code>sudo apt-get install git autotools-dev autoconf libtool libapr1 libapr1-dev apache2-dev libxml2 libxml2-dev libicu-dev libmysqlclient-dev libdb-dev liblmdb-dev libcurl4-openssl-dev libssl-dev libyaml-dev libfcgi-dev nginx libunwind-setjmp0-dev elfutils libdw-dev
git clone https://github.com/afw-org/afw.git
cd afw
./afwdev build &amp;&amp; sudo make install</code>            
            <header>Building Web Applications</header>
            <code>npm install
npm run build</code>
        </section>                
    </section> 
    <section>
        <title>Installation Verification</title>
        <paragraph>
            Installation Verification is a process designed to ensure your installation was 
            done correctly. 
        </paragraph>
    </section>  
</doc>