<?xml version="1.0" encoding="utf-8" ?>
<doc>
    <title>Templates and Expressions</title>
    <header>Templates</header>
    <paragraph>
        A template is a string literal that contains zero or more 
        substitutions, where a substitution is a script or expression embedded 
        inside <literal>{</literal> and <literal>}</literal>.
    </paragraph>
    <paragraph>
        The way that we interpret a template inside of an expression or script 
        is by placing the template between <literal></literal> characters, also 
        called a template string:
    </paragraph>
    <code>`The result of 1 + 1 is ${1 + 1}.`</code>
    <header>Expressions</header>
    <paragraph>
        An expression is a value composed, recursively, of one or more values, 
        joined by a combination of operators and parenthesized subexpressions. 
    </paragraph>
    <code><![CDATA[add(1, (i < 2 ? 1 : i)) + "x"]]></code>
    <paragraph>
        Expressions may be used to construct Adaptive Script statements and may
        be also used directly by Adaptive Framework when a value needs to be 
        computed.
    </paragraph>
    <paragraph>
        Before moving onto Statements, it's worth noting that Expressions are 
        quite capable of being used to compute some complicated logic by 
        nesting expressions in a functional-looking manner. For example, take 
        the following expression:
    </paragraph>
    <code><![CDATA[add( if(1 < 2, 1, 2), 3 )]]></code>
    <paragraph>
        This expression says to add 1 to 3 if 1 is less than 2, and to add 2 to 
        3 otherwise. A more readable way to express this logic is using the 
        syntactic sugar provided by statements.
    </paragraph>
    <section>
        <header>Values</header>
        <paragraph>
            Values are the fundamental components of an expression. They can be
            Array Values, Object Values, Scalar Literals, Evaluations, 
            Parenthesized Expressions or Template Strings.
        </paragraph>
        <code><![CDATA[42
"abc"
true
null
[1, 2, 3]
{ "x": 42, "y": "abc" }
(1 + 1) + 3
`1 + 1 is {1 + 1}`]]></code>
    </section>
    <section>
        <header>Factors</header>
        <paragraph>
            Factors join values with zero or more mathematical operators, 
            optionally separated with parentheses. This includes multiplication 
            <literal>*</literal>, division <literal>/</literal>, addition 
            <literal>+</literal>, subtraction <literal>-</literal>, 
            exponentiation <literal>**</literal>, modulus <literal>%</literal> 
            and unary negation <literal>-</literal>.
        </paragraph>
        <code><![CDATA[42 * 2
42 / 2        
37 - 5
2 ** 8
32 % 6
-14]]></code>
    </section>
    <section>
        <header>Comparisons</header>
        <paragraph>
            Comparisons join factors with zero or more relational operators, 
            optionally separated with parentheses. This includes less than 
            <literal>&lt;</literal>, less than or equal to 
            <literal>&lt;=</literal>, greater than <literal>></literal>, 
            greater than or equal to <literal>>=</literal>, equal 
            <literal>==</literal>, not equal <literal>!=</literal>, strict 
            equal <literal>===</literal> and not strict equal 
            <literal>!==</literal>. Comparisons result in a boolean result when 
            evaluated.
        </paragraph>
        <code><![CDATA[42 < 2
2 >= 2
1 !== 0
a === b]]></code>
    </section>
    <section>
        <header>Logical Expressions</header>
        <paragraph>
            Logical Expressions are expressions joined together by the logical 
            operators <literal>&amp;&amp;</literal> (and), 
            <literal>||</literal> (or), and <literal>!</literal> (not).
        </paragraph>
        <code><![CDATA[(a || b) && (c || !d)]]></code>
    </section>
    <section>
        <header>Nullish Coalescing</header>
        <paragraph>
            A Nullish Coalescing expression joins two Logical Expressions using 
            the <literal>??</literal> operator. The result is the first 
            expression if it is not null or undefined, otherwise the result is 
            the second expression.
        </paragraph>
        <code><![CDATA[a ?? b]]></code>
    </section>
</doc>