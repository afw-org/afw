{
    "allowEntity": true,
    "collectionURIs": [
        "/afw/_AdaptiveCollection_/core"
    ],
    "description": "The options used for objects returned by Adaptive Framework.",
    "objectType": "_AdaptiveObjectOptions_",
    "propertyTypes": {
        "checkRequired": {
            "brief": "Check for missing required properties",
            "dataType": "boolean",
            "description": "Indicates that object should be checked for missing required properties. This option implies the normalize option.",
            "label": "Check Required"
        },
        "composite": {
            "allowQuery": true,
            "brief": "Perform direct and embedded inheritance",
            "dataType": "boolean",
            "description": "Indicates that both direct and embedded inheritance should be performed.",
            "label": "Composite"
        },
        "debug": {
            "allowQuery": true,
            "brief": "Include additional debug information",
            "dataType": "boolean",
            "description": "This will cause the errors in object meta to include additional debug information. If not specified, only the message will be included.",
            "label": "Debug"
        },
        "includeDefaultValues": {
            "allowQuery": true,
            "brief": "Include default property values",
            "dataType": "boolean",
            "description": "This indicates that default property values should be included. This option implies the normalize option.",
            "label": "Include Defaults"
        },
        "includeDescendentObjectTypes": {
            "allowQuery": true,
            "brief": "Include object types for descendent objects",
            "dataType": "boolean",
            "description": "This only applies to retrieve objects requests and indicates that objects with the supplied object type along with objects with any of its descendent object types should be included in the search.",
            "label": "Include Descendent"
        },
        "inheritedFrom": {
            "allowQuery": true,
            "brief": "Show where properties are inherited from",
            "dataType": "boolean",
            "description": "Indicates that the inheritedFrom property in meta propertyTypes.<propertyName>, where <propertyName> is the associated property name, should be set. This option is ignored unless composite option is also set.",
            "label": "Inherited From"
        },
        "integersAsString": {
            "allowQuery": true,
            "brief": "Show integers as strings",
            "dataType": "boolean",
            "description": "This overrides the largeIntegersAsString option. If neither the integersAsString or large_integer_as_string is specified, integers will remain integers. If this option is specified, all data type integer values will be converted to the string data type.\\n\\nThis options is useful if a content type is used that represents integers as double (floating point) values.",
            "label": "Integers As String"
        },
        "largeIntegersAsString": {
            "allowQuery": true,
            "brief": "Show large integers as strings",
            "dataType": "boolean",
            "description": "This option is overridden by the integersAsString option.\\n\\nIf this option is specified, all integers that have a magnitude that exceeds plus or minus 9007199254740991 (2^53-1) will be converted to the string data type.\\n\\nThis options is useful if integers of a content type are interpreted as double (floating point) values, but integers are normally small enough to be represented properly. An example is Javascript's use of JSON.",
            "label": "Large Integers As String"
        },
        "metaFull": {
            "allowQuery": true,
            "brief": "Include all metadata",
            "dataType": "boolean",
            "description": "This indicates that all meta, including properties that are not part of delta from object type, are to be included. This overrides metaLimited.",
            "label": "Full meta"
        },
        "metaLimited": {
            "allowQuery": true,
            "brief": "Include only essential metadata",
            "dataType": "boolean",
            "description": "Indicates that only requested and essential (parentPaths) meta is returned.",
            "label": "Limited meta"
        },
        "normalize": {
            "allowQuery": true,
            "brief": "Normalize object data",
            "dataType": "boolean",
            "description": "Indicates that each object's object type should be processed, assigned each embedded object's object type, converting any properties to their correct data type, plus computing values when needed. If there is dataType or dataTypeParameter information available during normalization that is not in the associated _AdaptiveObjectType_, it will be added at the appropriate place in the object's meta.\\n\\nUse the includeDefaultValues option to include default values.",
            "label": "Normalize"
        },
        "objectId": {
            "allowQuery": true,
            "brief": "Include the objectId",
            "dataType": "boolean",
            "description": "Indicates that objectId property should be included in the meta for entity objects.",
            "label": "Object Id"
        },
        "objectType": {
            "allowQuery": true,
            "brief": "Include the objectType",
            "dataType": "boolean",
            "description": "Indicates that objectType property should be included in the meta for entity and embedded objects, if assigned.",
            "label": "Object Type"
        },
        "objectTypes": {
            "allowQuery": true,
            "brief": "Include all objectType objects",
            "dataType": "boolean",
            "description": "Indicates that the objectTypes property should be added to the meta of the entity containing a property of each object type used by the entity and all of its embedded objects. This option implies normalize.",
            "label": "Object Types"
        },
        "path": {
            "allowQuery": true,
            "brief": "Include object path",
            "dataType": "boolean",
            "description": "Indicates that meta path should be included for entity objects.",
            "label": "Path"
        },
        "pathEmbedded": {
            "allowQuery": true,
            "brief": "Include object path for embedded objects",
            "dataType": "boolean",
            "description": "Indicates that meta path should be included for embedded objects.",
            "label": "Path Embedded"
        },
        "reconcilable": {
            "allowQuery": true,
            "brief": "Include stateful token for object reconciliation",
            "dataType": "boolean",
            "description": "Indicates that meta reconcilable should be included in entity's meta. If this is specified on a get_object or retrieve_objects request and a retrieved object is changed, calling reconcile_object() with the changed object will use the information in meta reconcilable to produce a modify request for only the changes. The reconcilable option assumes the path option and possibly other options as needed.",
            "label": "Reconcilable"
        },
        "resolvedParentPaths": {
            "allowQuery": true,
            "brief": "Included parent paths resolved by the composite option",
            "dataType": "boolean",
            "description": "Indicates that meta resolvedParentPaths should be included with an array of parent paths that have been resolved by the composite option.",
            "label": "Parent Paths"
        },
        "typedValues": {
            "allowQuery": true,
            "brief": "Include type information on values",
            "dataType": "boolean",
            "description": "*** EXPERIMENTAL *** This option indicates that a value's type information (valueType, dataType, and objectType) should be included with each value. See the content type to determines how this is represented.",
            "label": "Typed Values"
        },
        "whitespace": {
            "allowQuery": true,
            "brief": "Include whitespace",
            "dataType": "boolean",
            "description": "This option can be optionally supported by a content type implementation. In the case of JSON, this indicates that newline, space, and tab characters should be included to make the output more readable.",
            "label": "Whitespace"
        }
    }
}
