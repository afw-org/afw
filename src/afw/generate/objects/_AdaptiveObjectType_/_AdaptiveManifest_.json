{
    "allowEntity": true,
    "collectionURIs": [
        "/afw/_AdaptiveCollection_/core"
    ],
    "description": "Adaptive Framework extension manifest.",
    "objectType": "_AdaptiveManifest_",
    "propertyTypes": {
        "brief": {
            "allowQuery": true,
            "brief": "Brief description for this extension",
            "dataType": "string",
            "description": "Brief description for this extension.",
            "label": "Brief"
        },
        "description": {
            "allowQuery": true,
            "brief": "Description for this extension in more detail",
            "dataType": "string",
            "dataTypeParameter": "text/plain",
            "description": "Description for this extension in more detail.",
            "label": "Description"
        },
        "extensionId": {
            "allowQuery": true,
            "brief": "Extension id",
            "dataType": "string",
            "description": "Extension id.",
            "label": "Extension",
            "required": true
        },
        "modulePath": {
            "allowQuery": true,
            "brief": "Module path to locate extension",
            "dataType": "string",
            "description": "Module path. A system appropriate suffix will be added ('.so' for Linux and '.dll' for Windows).",
            "label": "Module Path",
            "required": true
        },
        "providesObjects": {
            "brief": "List of object paths provided by this extension",
            "dataType": "array",
            "dataTypeParameter": "string",
            "description": "Each entry is the path of an afw adapter object supplied by this extension. This extension will be loaded by function afw_runtime_get_object() if needed.",
            "label": "Provides Objects"
        },
        "registers": {
            "brief": "List of entries this extension registers",
            "dataType": "array",
            "dataTypeParameter": "string",
            "description": "Each entry is a string of the form '<registry type>/<registry key>', where <registry type> is a valid registry type id and <registry key> is a registry key that is registered at runtime by the associated command, extension, server, etc. If this manifest is for an extension, the extension will be automatically loaded when afw_environment_registry_get() is called for a <registry type>/<registry key> combo that is not already registered. See afw/afw_environment.h for more information.",
            "label": "Registers"
        }
    }
}
