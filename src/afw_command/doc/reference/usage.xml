<?xml version="1.0" encoding="utf-8" ?>
<section>
    <title>Usage</title>
    <description>
        The afw Reference contains all information related to the afw command.
    </description>
    <code><![CDATA[Usage: afw [OPTION]... [IN]


OPTION:
 -k, --check            Parse but don't evaluate.
 -f, --conf        ARG  Configuration file.
 -x, --expression  ARG  The first string to evaluate.
 -e, --extension   ARG  Load extension.
 -h, --help             Print this help and exit successfully.
 -l, --local       ARG  Run in "local" mode with output to path or fd number.
 -s, --syntax      ARG  expression, hybrid, parenthesized, script, template, test_script
 -t, --type        ARG  Content type of configuration file.
 -v, --version          Print version and exit successfully.

The syntax option (-s) determines how input will be parsed:

  -s expression        - The input is an adaptive expression.
  -s hybrid            - The input is an adaptive hybrid.
  -s parentheses       - The input is an adaptive expression enclose in
                         parentheses.
  -s script            - The input is an adaptive script.
  -s template          - The input is an adaptive template.
  -s test_script       - The input is an adaptive test script.

A line ending with "\" will be combined with the line that follows
to form one logical line.

When option -s expression or -s template is specified, the input is
evaluated one logical line at a time.

When option -s parentheses is specified, logical lines are evaluated up
up to the expression's closing parenthesis (')'). The parenthesized
expression can be preceded by any amount of whitespace, including
comments, and followed by whitespace up to the end of the line.

When option -s hybrid is specified and the input does not begin with a
square bracket ('['), the input must be on one logical line; otherwise,
input will be evaluated through the logical line with the hybrid's
closing square bracket (']').

The conf option (-f) is used to specify the path to a configuration
file. By default, this file should be encoded with a relaxed json
syntax, which accepts standard json, plus allows block comments
(/* ... */), line comments (//), unquoted property names, and several
other conveniences.

The type option (-t) can be used to specify a content type other than the
default. If the content type is not part of AFW core, use the extension
option (-e) to load the appropriate extension.

If the -f option is not specified, only core AFW functionality is
available.

The optional adaptive expression specified by expression option (-x)
is evaluated first. If -x is specified and [IN] is not specified,
afw will end after evaluating the expression.

If neither -x or [IN] is specified, input is read from stdin.
Each line read from stdin is evaluated as an adaptive expressions
until either a line containing only "exit" or end of file is
encountered.

If [IN] is specified but -s is not, the file is evaluated as an
adaptive script.

If the -l option is specified, output is written to the path or fd
number specified. Input is always read from stdin so [IN] cannot be
specified.

When the -l option is specified, input must be, and output will be made
up of one or more segments that are in turn made up of one or more
chunks. Each chunk is preceded with a decimal length of the chunk
followed by a '\n'. A line containing only "0\n" is used to
indicate the end of a segment. The last input segment must be:
4\nexit0\n.

See the afw command documentation for information about what can be
contained in each segment.

A simple example using default directives to add 2 plus 2:

  8\nadd(2,2)0\n4\nexit0\n

The output will be:

  1\n40\n
]]></code>
</section>