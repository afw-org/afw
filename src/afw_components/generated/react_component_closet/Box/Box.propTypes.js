import PropTypes from "prop-types";

/* Generated objectType propType definition for property shrink */
const BoxItem = {
    /**
     * Property: _meta_
     * Data Type: (None)
     * 
     */
    _meta_:                             PropTypes.any,
    /**
     * Property: contains
     * Data Type: (object, _AdaptiveLayoutComponentType_)
     * 
     * Components inside of the BoxItem
     * This declares the components to be rendered inside the BoxItem.
     */
    contains:                           PropTypes.oneOfType([ PropTypes.element, PropTypes.object ]),
    /**
     * Property: grow
     * Data Type: (integer)
     * 
     * Ability to grow
     * This defines the ability for a flex item to grow if necessary. It
     * accepts a unitless value that serves as a proportion. It dictates what
     * amount of the available space inside the flex container the item
     * should take up.
     * 
     * If all items have flex-grow set to 1, the remaining space in the
     * container will be distributed equally to all children. If one of the
     * children has a value of 2, the remaining space would take up twice as
     * much space as the others (or it will try to, at least).
     */
    grow:                               PropTypes.number,
    /**
     * Property: order
     * Data Type: (integer)
     * 
     * Order of item
     * By default, flex items are laid out in the source order. However, the
     * order property controls the order in which they appear in the flex
     * container.
     */
    order:                              PropTypes.number,
    /**
     * Property: shrink
     * Data Type: (integer)
     * 
     * Ability to shrink
     * This defines the ability for a flex item to shrink if necessary.
     */
    shrink:                             PropTypes.number,
};

/**
 * PropTypes generated by _AdaptiveLayoutComponentType_Box
 */
export const propTypes = {
    /**
     * alignContent
     * Data Type: (string)
     * 
     * Aligns the Box lines within
     * This aligns a flex container's lines within when there is extra space
     * in the cross-axis, similar to how "Justify Content" aligns individual
     * items within the main-axis.
     */
    alignContent:                       PropTypes.string,
    /**
     * alignItems
     * Data Type: (string)
     * 
     * Alignment along the cross axis
     * This defines the default behavior for how flex items are laid out
     * along the cross axis on the current line. Think of it as the "Justify
     * Content" version for the cross axis (perpendicular to the main-axis).
     */
    alignItems:                         PropTypes.string,
    /**
     * contains
     * Data Type: (list, object _AdaptiveLayoutComponentType_BoxItem)
     * 
     * Items inside of the Box
     * This declares a list of items to be rendered inside the Box.
     */
    contains:                           PropTypes.arrayOf(PropTypes.shape(BoxItem)),
    /**
     * direction
     * Data Type: (string)
     * 
     * The direction of items
     * This declares the direction that items are oriented inside the Box.
     */
    direction:                          PropTypes.string,
    /**
     * justifyContent
     * Data Type: (string)
     * 
     * Alignment along the main axis
     * This defines the alignment along the main axis. It helps distribute
     * extra free space leftover when either all the flex items on a line are
     * inflexible, or are flexible but have reached their maximum size. It
     * also exerts some control over the alignment of items when they
     * overflow the line.
     */
    justifyContent:                     PropTypes.string,
    /**
     * wrap
     * Data Type: (string)
     * 
     * Item wrap behavior
     * By default, flex items will all try to fit onto one line. You can
     * change that and allow the items to wrap as needed with this property.
     */
    wrap:                               PropTypes.string,
};

export const defaultProps = {
    alignItems:                         "stretch",
    direction:                          "row",
    justifyContent:                     "flex-start",
    wrap:                               "nowrap",
};

export default propTypes;
