{
    "result": {
        "registry_type": {
            "service": {
                "allowReregister": true,
                "autoRegister": false,
                "description": "The afw_service_t for a service_id.",
                "objectType": "_AdaptiveService_",
                "registryType": "service"
            },
            "runtime_value_accessor": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_runtime_value_accessor_t for an accessor name.",
                "objectType": "_AdaptiveRuntimeValueAccessor_",
                "registryType": "runtime_value_accessor"
            },
            "xacml_status_code": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "XACML status code registry type",
                "registryType": "xacml_status_code"
            },
            "rule_combining_algorithm": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_value_function_definition_t struct for a rule combining algorithm.",
                "objectType": "_AdaptiveRuleCombiningAlgorithm_",
                "registryType": "rule_combining_algorithm"
            },
            "registry_type": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_environment_registry_type_t associated with this property name .",
                "objectType": "_AdaptiveEnvironmentRegistryType_",
                "registryType": "registry_type"
            },
            "xacml_function": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "XACML function registry type",
                "objectType": "_AdaptiveXacmlFunction_",
                "registryType": "xacml_function"
            },
            "data_type": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_data_type_t struct for a data type id.",
                "objectType": "_AdaptiveDataType_",
                "registryType": "data_type"
            },
            "xacml_policy_finder": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "XACML policy finder registry type",
                "registryType": "xacml_policy_finder"
            },
            "content_type": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_content_type_t instance for a content type.",
                "objectType": "_AdaptiveContentType_",
                "registryType": "content_type"
            },
            "extension": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_extension_t for a loaded extension.",
                "objectType": "_AdaptiveExtension_",
                "registryType": "extension"
            },
            "runtime_custom": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_runtime_custom_t for custom afw object type handling.",
                "objectType": "_AdaptiveRuntimeCustom_",
                "registryType": "runtime_custom"
            },
            "xacml_attribute_finder": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "XACML attribute finder registry type",
                "registryType": "xacml_attribute_finder"
            },
            "xacml_policy_combining_algorithm": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "XACML policy combining algorithm registry type",
                "objectType": "_AdaptiveXacmlPolicyCombiningAlgorithm_",
                "registryType": "xacml_policy_combining_algorithm"
            },
            "request_handler": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_request_handler_t instance for a request handler entry.",
                "objectType": "_AdaptiveRequestHandler_",
                "registryType": "request_handler"
            },
            "context_type": {
                "allowReregister": true,
                "autoRegister": false,
                "description": "The context type object.  /afw/_AdaptiveContextType_/<context_type_id> runtime object will be set to this object as well.",
                "objectType": "_AdaptiveContextType_",
                "registryType": "context_type"
            },
            "request_handler_type": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_request_handler_factory_t instance for a handler type.",
                "objectType": "_AdaptiveRequestHandlerType_",
                "registryType": "request_handler_type"
            },
            "xacml_rule_combining_algorithm": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "XACML rule combining algorithm registry type",
                "objectType": "_AdaptiveXacmlRuleCombiningAlgorithm_",
                "registryType": "xacml_rule_combining_algorithm"
            },
            "xacml_scope": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "XACML scope registry type",
                "registryType": "xacml_scope"
            },
            "xacml_data_type": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "XACML data type registry type",
                "objectType": "_AdaptiveXacmlDataType_",
                "registryType": "xacml_data_type"
            },
            "xacml_category": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "XACML category registry type",
                "registryType": "xacml_category"
            },
            "service_type": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_service_type_t for a service_type_id.",
                "objectType": "_AdaptiveServiceType_",
                "registryType": "service_type"
            },
            "runtime_object_map_inf": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The runtime object map interface for an object type id.",
                "objectType": "_AdaptiveRuntimeObjectMapInf_",
                "registryType": "runtime_object_map_inf"
            },
            "singleton": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The void pointer for a singleton key.",
                "objectType": "_AdaptiveSingleton_",
                "registryType": "singleton"
            },
            "xacml_resource_finder": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "XACML resource finder registry type",
                "registryType": "xacml_resource_finder"
            },
            "xacml_attribute_id": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "XACML attribute id registry type",
                "registryType": "xacml_attribute_id"
            },
            "adaptor_id": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_adaptor_id_t struct for this adaptor id.",
                "objectType": "_AdaptiveAdaptor_",
                "registryType": "adaptor_id"
            },
            "value_inf": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_value_inf_t struct for a value interface implementation.",
                "objectType": "_AdaptiveValueInf_",
                "registryType": "value_inf"
            },
            "authorization_handler_id": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_authorization_handler_id_t struct for an authorization handler id.",
                "objectType": "_AdaptiveAuthorizationHandler_",
                "registryType": "authorization_handler_id"
            },
            "flag": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_flag_t for a flag_id.",
                "objectType": "_AdaptiveFlag_",
                "registryType": "flag"
            },
            "xacml_advice": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "XACML advice registry type",
                "registryType": "xacml_advice"
            },
            "log": {
                "allowReregister": true,
                "autoRegister": false,
                "description": "The afw_log_t instance for a log id.",
                "objectType": "_AdaptiveLog_",
                "registryType": "log"
            },
            "log_type": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_log_factory_t instance for a log type.",
                "objectType": "_AdaptiveLogType_",
                "registryType": "log_type"
            },
            "error_rv_decoder": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_environment_error_rv_decoder_z_t function for a rv source id.",
                "objectType": "_AdaptiveErrorRVDecoder_",
                "registryType": "error_rv_decoder"
            },
            "function": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_value_function_definition_t struct for a function id.",
                "objectType": "_AdaptiveFunction_",
                "registryType": "function"
            },
            "conf_type": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_environment_conf_type_t for a configuration type.",
                "objectType": "_AdaptiveConfType_",
                "registryType": "conf_type"
            },
            "lock": {
                "allowReregister": true,
                "autoRegister": false,
                "description": "The afw_lock_t instance for a log id.",
                "objectType": "_AdaptiveLock_",
                "registryType": "lock"
            },
            "policy_combining_algorithm": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_value_function_definition_t struct for a policy combining algorithm.",
                "objectType": "_AdaptivePolicyCombiningAlgorithm_",
                "registryType": "policy_combining_algorithm"
            },
            "adaptor_type": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_adaptor_factory_t instance for an adaptor type.",
                "objectType": "_AdaptiveAdaptorType_",
                "registryType": "adaptor_type"
            },
            "authorization_handler_type": {
                "allowReregister": false,
                "autoRegister": false,
                "description": "The afw_authorization_handler_factory_t instance for an authorization handler type.",
                "objectType": "_AdaptiveAuthorizationHandlerType_",
                "registryType": "authorization_handler_type"
            }
        },
        "singleton": {
            "afw_request_handler_head": {
                "key": "afw_request_handler_head"
            },
            "afw_xacml_environment": {
                "key": "afw_xacml_environment"
            }
        },
        "adaptor_id": {
            "afw": {
                "adaptorId": "afw",
                "metrics": {
                    "addObjectCount": 0,
                    "deleteObjectCount": 0,
                    "getObjectCount": 69,
                    "modifyObjectCount": 0,
                    "replaceObjectCount": 0,
                    "retrieveObjectsCount": 8,
                    "updateObjectCount": 0
                },
                "properties": {
                    "type": "adaptor",
                    "adaptorType": "afw_runtime",
                    "adaptorId": "afw",
                    "sourceLocation": "Core afw adaptor"
                },
                "referenceCount": 3,
                "serviceId": "adaptor-afw"
            },
            "lmdb": {
                "adaptorId": "lmdb",
                "metrics": {
                    "addObjectCount": 0,
                    "additional": {
                        "version": {
                            "_meta_": {
                                "objectType": "_AdaptiveAdaptorMetrics_adaptor_lmdb_version"
                            },
                            "version_string": "LMDB 0.9.24: (July 24, 2019)",
                            "major": 0,
                            "minor": 9,
                            "patch": 24
                        },
                        "statistics": {
                            "_meta_": {
                                "objectType": "_AdaptiveAdaptorMetrics_adaptor_lmdb_statistics"
                            },
                            "environment": {
                                "_meta_": {
                                    "objectType": "_AdaptiveAdaptorMetrics_adaptor_lmdb_statistic"
                                },
                                "psize": 4096,
                                "depth": 1,
                                "branch_pages": 0,
                                "leaf_pages": 1,
                                "overflow_pages": 0,
                                "entries": 2
                            },
                            "Journal": {
                                "_meta_": {
                                    "objectType": "_AdaptiveAdaptorMetrics_adaptor_lmdb_statistic"
                                },
                                "psize": 4096,
                                "depth": 0,
                                "branch_pages": 0,
                                "leaf_pages": 0,
                                "overflow_pages": 0,
                                "entries": 0
                            },
                            "Primary": {
                                "_meta_": {
                                    "objectType": "_AdaptiveAdaptorMetrics_adaptor_lmdb_statistic"
                                },
                                "psize": 4096,
                                "depth": 1,
                                "branch_pages": 0,
                                "leaf_pages": 1,
                                "overflow_pages": 0,
                                "entries": 2
                            }
                        },
                        "information": {
                            "_meta_": {
                                "objectType": "_AdaptiveAdaptorMetrics_adaptor_lmdb_information"
                            },
                            "mapaddr": 0,
                            "mapsize": 137438953472,
                            "last_pgno": 10,
                            "last_txnid": 239,
                            "maxreaders": 126,
                            "numreaders": 0
                        }
                    },
                    "deleteObjectCount": 0,
                    "getObjectCount": 0,
                    "modifyObjectCount": 0,
                    "replaceObjectCount": 0,
                    "retrieveObjectsCount": 0,
                    "updateObjectCount": 0
                },
                "properties": {
                    "_meta_": {
                        "path": "/afw/_AdaptiveConf_adaptor_lmdb/lmdb"
                    },
                    "sourceLocation": "/conf/_AdaptiveServiceConf_/adaptor-lmdb/conf",
                    "env": {
                        "_meta_": {
                            "objectType": "_AdaptiveConf_adaptor_lmdb_env"
                        },
                        "path": "/afw/lmdb",
                        "mode": 384,
                        "maxreaders": 126,
                        "maxdbs": 128,
                        "mapsize": 137438953472
                    },
                    "limits": {
                        "_meta_": {
                            "objectType": "_AdaptiveConf_adaptor_lmdb_limits"
                        },
                        "size": {
                            "_meta_": {
                                "objectType": "_AdaptiveConf_adaptor_lmdb_limits_size"
                            },
                            "soft": 500,
                            "hard": 1000
                        },
                        "time": {
                            "_meta_": {
                                "objectType": "_AdaptiveConf_adaptor_lmdb_limits_time"
                            },
                            "soft": 3600,
                            "hard": 14400
                        }
                    },
                    "description": "A LMDB (Lightning Memory-Mapped Database).",
                    "adaptorId": "lmdb",
                    "adaptorType": "lmdb",
                    "type": "adaptor"
                },
                "referenceCount": 1,
                "serviceId": "adaptor-lmdb"
            },
            "dev": {
                "adaptorId": "dev",
                "metrics": {
                    "addObjectCount": 0,
                    "deleteObjectCount": 0,
                    "getObjectCount": 0,
                    "modifyObjectCount": 0,
                    "replaceObjectCount": 0,
                    "retrieveObjectsCount": 0,
                    "updateObjectCount": 0
                },
                "properties": {
                    "_meta_": {
                        "path": "/afw/_AdaptiveConf_adaptor_file/dev"
                    },
                    "sourceLocation": "/conf/_AdaptiveServiceConf_/adaptor-dev/conf",
                    "contentType": "json",
                    "filenameSuffix": ".json",
                    "isDevelopmentInput": true,
                    "root": "/workspace/src/afw/generate/objects/",
                    "description": "File adaptor for development input strings and objects.",
                    "type": "adaptor",
                    "adaptorType": "file",
                    "adaptorId": "dev"
                },
                "referenceCount": 1,
                "serviceId": "adaptor-dev"
            },
            "layouts": {
                "adaptorId": "layouts",
                "metrics": {
                    "addObjectCount": 0,
                    "deleteObjectCount": 0,
                    "getObjectCount": 0,
                    "modifyObjectCount": 0,
                    "replaceObjectCount": 0,
                    "retrieveObjectsCount": 0,
                    "updateObjectCount": 0
                },
                "properties": {
                    "_meta_": {
                        "path": "/afw/_AdaptiveConf_adaptor_file/layouts"
                    },
                    "sourceLocation": "/conf/_AdaptiveServiceConf_/adaptor-layouts/conf",
                    "adaptorId": "layouts",
                    "description": "Stores adaptive layouts.",
                    "filenameSuffix": ".json",
                    "contentType": "json",
                    "root": "/afw/layouts/",
                    "adaptorType": "file",
                    "type": "adaptor"
                },
                "referenceCount": 1,
                "serviceId": "adaptor-layouts"
            },
            "auth": {
                "adaptorId": "auth",
                "metrics": {
                    "addObjectCount": 0,
                    "deleteObjectCount": 0,
                    "getObjectCount": 0,
                    "modifyObjectCount": 0,
                    "replaceObjectCount": 0,
                    "retrieveObjectsCount": 0,
                    "updateObjectCount": 0
                },
                "properties": {
                    "_meta_": {
                        "path": "/afw/_AdaptiveConf_adaptor_file/auth"
                    },
                    "sourceLocation": "/conf/_AdaptiveServiceConf_/adaptor-auth/conf",
                    "adaptorId": "auth",
                    "description": "Stores adaptive authorization policies.",
                    "filenameSuffix": ".json",
                    "contentType": "json",
                    "root": "/afw/auth/",
                    "isPolicyLocation": true,
                    "adaptorType": "file",
                    "type": "adaptor"
                },
                "referenceCount": 1,
                "serviceId": "adaptor-auth"
            },
            "files": {
                "adaptorId": "files",
                "metrics": {
                    "addObjectCount": 0,
                    "deleteObjectCount": 0,
                    "getObjectCount": 0,
                    "modifyObjectCount": 0,
                    "replaceObjectCount": 0,
                    "retrieveObjectsCount": 0,
                    "updateObjectCount": 0
                },
                "properties": {
                    "_meta_": {
                        "path": "/afw/_AdaptiveConf_adaptor_file/files"
                    },
                    "sourceLocation": "/conf/_AdaptiveServiceConf_/adaptor-files/conf",
                    "adaptorId": "files",
                    "isDevelopmentInput": true,
                    "description": "Stores objects in files.",
                    "filenameSuffix": ".json",
                    "contentType": "json",
                    "root": "/afw/files/",
                    "adaptorType": "file",
                    "type": "adaptor"
                },
                "referenceCount": 1,
                "serviceId": "adaptor-files"
            },
            "models": {
                "adaptorId": "models",
                "metrics": {
                    "addObjectCount": 0,
                    "deleteObjectCount": 0,
                    "getObjectCount": 0,
                    "modifyObjectCount": 0,
                    "replaceObjectCount": 0,
                    "retrieveObjectsCount": 0,
                    "updateObjectCount": 0
                },
                "properties": {
                    "_meta_": {
                        "path": "/afw/_AdaptiveConf_adaptor_file/models"
                    },
                    "sourceLocation": "/conf/_AdaptiveServiceConf_/adaptor-models/conf",
                    "adaptorId": "models",
                    "description": "Stores adaptive models.",
                    "filenameSuffix": ".json",
                    "contentType": "json",
                    "root": "/afw/models/",
                    "isModelLocation": true,
                    "adaptorType": "file",
                    "type": "adaptor"
                },
                "referenceCount": 1,
                "serviceId": "adaptor-models"
            },
            "tier": {
                "adaptorId": "tier",
                "metrics": {
                    "addObjectCount": 0,
                    "deleteObjectCount": 0,
                    "getObjectCount": 0,
                    "modifyObjectCount": 0,
                    "replaceObjectCount": 0,
                    "retrieveObjectsCount": 0,
                    "updateObjectCount": 0
                },
                "properties": {
                    "_meta_": {
                        "path": "/afw/_AdaptiveConf_adaptor_model/tier"
                    },
                    "sourceLocation": "/conf/_AdaptiveServiceConf_/adaptor-tier/conf",
                    "mappedAdaptorId": "lmdb",
                    "modelId": "TIER Core Schema",
                    "modelLocationAdaptorId": "models",
                    "description": "TIER model using LMDB as a backend.",
                    "type": "adaptor",
                    "adaptorType": "model",
                    "adaptorId": "tier"
                },
                "referenceCount": 1,
                "serviceId": "adaptor-tier"
            },
            "conf": {
                "adaptorId": "conf",
                "metrics": {
                    "addObjectCount": 0,
                    "deleteObjectCount": 0,
                    "getObjectCount": 20,
                    "modifyObjectCount": 0,
                    "replaceObjectCount": 0,
                    "retrieveObjectsCount": 3,
                    "updateObjectCount": 0
                },
                "properties": {
                    "_meta_": {
                        "path": "/afw/_AdaptiveConf_adaptor_file/conf"
                    },
                    "sourceLocation": "/workspace/docker/dev/afw.conf entry 1",
                    "root": "/afw/config/",
                    "contentType": "json",
                    "filenameSuffix": ".json",
                    "adaptorType": "file",
                    "adaptorId": "conf",
                    "type": "adaptor"
                },
                "referenceCount": 3,
                "serviceId": "adaptor-conf"
            }
        },
        "adaptor_type": {
            "lmdb": {
                "adaptorType": "lmdb",
                "description": "Adaptor type for Lightning Memory-Mapped Database (LMDB)."
            },
            "dbd_mysql": {
                "adaptorType": "dbd_mysql",
                "description": "Adaptor type for Apache DBD (MySQL)."
            },
            "file": {
                "adaptorType": "file",
                "description": "Adaptor type for accessing objects contained in files."
            },
            "sql": {
                "adaptorType": "sql",
                "description": "Adaptor type for Structured Query Language (SQL)."
            },
            "afw_runtime": {
                "adaptorType": "afw_runtime",
                "description": "Adaptor type for accessing runtime objects."
            },
            "model": {
                "adaptorType": "model",
                "description": "Adaptor type for using models to access objects."
            },
            "ldap": {
                "adaptorType": "ldap",
                "description": "Adaptor type for Lightweight Directory Access Protocol (LDAP)."
            }
        },
        "authorization_handler_id": {
            "auth-script": {
                "authorizationHandlerId": "auth-script",
                "processingOrder": 1,
                "properties": {
                    "_meta_": {
                        "path": "/afw/_AdaptiveConf_authorizationHandler_script/auth-script"
                    },
                    "priority": 9999,
                    "sourceLocation": "/conf/_AdaptiveServiceConf_/authorizationHandler-auth-script/conf",
                    "qualifiedVariables": {
                        "_meta_": {
                            "objectType": "_AdaptiveTemplatePropertiesObjects_"
                        },
                        "x": {
                            "_meta_": {
                                "objectType": "_AdaptiveTemplateProperties_"
                            },
                            "y": "fds"
                        }
                    },
                    "authorizationCheck": "loc object decision;\n\ntrace(\"Got into auth script..\\n\");\n\ndecision = {\n    \"decisionId\": \"notApplicable\"\n};\n\n//trace(x::y);\n\nreturn {\n    \"decisionId\": \"permit\"\n};",
                    "description": "Handles authorization using an adaptive script.",
                    "type": "authorizationHandler",
                    "authorizationHandlerType": "script",
                    "authorizationHandlerId": "auth-script"
                },
                "referenceCount": 1,
                "serviceId": "authorization_handler-auth-script"
            }
        },
        "authorization_handler_type": {
            "script": {
                "authorizationHandlerType": "script",
                "description": "Authorization handler type - script."
            },
            "xacml": {
                "authorizationHandlerType": "xacml",
                "description": "XACML authorization handler."
            },
            "policy": {
                "authorizationHandlerType": "policy",
                "description": "Policy based authorization."
            }
        },
        "conf_type": {
            "requestHandler": {
                "description": "This configuration type adds a request handler to this Adaptive Framework environment.",
                "idRuntimeObjectType": "_AdaptiveRequestHandler_",
                "isUnique": false,
                "subtypePropertyName": "requestHandlerType",
                "subtypeRuntimeObjectType": "_AdaptiveRequestHandlerType_",
                "title": "Adaptive Framework Request Handler Configuration",
                "type": "requestHandler"
            },
            "adaptor": {
                "description": "This configuration type adds an adaptor and corresponding service to this Adaptive Framework environment.",
                "idPropertyName": "adaptorId",
                "idRegistryType": "adaptor_id",
                "idRuntimeObjectType": "_AdaptiveAdaptor_",
                "isUnique": true,
                "subtypePropertyName": "adaptorType",
                "subtypeRegistryType": "adaptor_type",
                "subtypeRuntimeObjectType": "_AdaptiveAdaptorType_",
                "title": "Adaptive Framework Adaptor Configuration",
                "type": "adaptor"
            },
            "extension": {
                "description": "This configuration type adds additional functionality this Adaptive Framework environment.",
                "idPropertyName": "extensionId",
                "idRegistryType": "extension",
                "idRuntimeObjectType": "_AdaptiveExtension_",
                "isUnique": false,
                "title": "Adaptive Framework Extension Configuration",
                "type": "extension"
            },
            "authorizationHandler": {
                "description": "This configuration type adds an authorization handler for this Adaptive Framework environment.",
                "idPropertyName": "authorizationHandlerId",
                "idRegistryType": "authorization_handler_id",
                "idRuntimeObjectType": "_AdaptiveAuthorizationHandler_",
                "isUnique": false,
                "subtypePropertyName": "authorizationHandlerType",
                "subtypeRegistryType": "authorization_handler_type",
                "subtypeRuntimeObjectType": "_AdaptiveAuthorizationHandlerType_",
                "title": "Adaptive Framework Authorization Handler Configuration",
                "type": "authorizationHandler"
            },
            "log": {
                "description": "This configuration type adds a log and corresponding service to this Adaptive Framework environment.",
                "idPropertyName": "logId",
                "idRegistryType": "log_id",
                "idRuntimeObjectType": "_AdaptiveLog_",
                "isUnique": true,
                "subtypePropertyName": "logType",
                "subtypeRegistryType": "log_type",
                "subtypeRuntimeObjectType": "_AdaptiveLogType_",
                "title": "Adaptive Framework Log Configuration",
                "type": "log"
            },
            "application": {
                "description": "This configuration type provides the application object for this Adaptive Framework environment.  It can only be specified once.",
                "idRuntimeObjectType": "_AdaptiveApplication_",
                "isUnique": false,
                "title": "Adaptive Framework Application Configuration",
                "type": "application"
            }
        },
        "content_type": {
            "yaml": {
                "mediaType": "yaml"
            },
            "application/xml": {
                "mediaType": "application/xml"
            },
            "application/ubjson": {
                "mediaType": "application/ubjson"
            },
            "json": {
                "mediaType": "json"
            },
            "*": {
                "mediaType": "*"
            },
            "application/x-yaml": {
                "mediaType": "application/x-yaml"
            },
            "application/json": {
                "mediaType": "application/json"
            },
            "xml": {
                "mediaType": "xml"
            },
            "ubjson": {
                "mediaType": "ubjson"
            }
        },
        "context_type": {
            "modelDeleteObject": {
                "contextTypeId": "modelDeleteObject",
                "qualifierDefinitions": {
                    "_meta_": {
                        "parentPaths": [
                            "/afw/_AdaptiveContextType_/application/qualifierDefinitions"
                        ]
                    },
                    "current": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "adaptorId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Adaptor Id",
                            "description": "The adaptor id of the object being converted to mapped object."
                        },
                        "objectId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "ObjectId",
                            "description": "The object id of the object being converted to mapped object."
                        },
                        "objectType": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "ObjectType",
                            "description": "The object type of the object being converted to mapped object."
                        }
                    }
                },
                "description": "current:: variables available in delete object hybrid values related to objects going to an adaptor"
            },
            "logType-splunk": {
                "contextTypeId": "logType-splunk",
                "qualifierDefinitions": {
                    "_meta_": {
                        "parentPaths": [
                            "/afw/_AdaptiveContextType_/application/qualifierDefinitions"
                        ]
                    },
                    "log": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "alert": {
                            "allowQuery": true,
                            "brief": "Include alert priority",
                            "dataType": "boolean",
                            "description": "Include alert priority.",
                            "label": "Alert"
                        },
                        "crit": {
                            "allowQuery": true,
                            "brief": "Include crit priority",
                            "dataType": "boolean",
                            "description": "Include crit priority.",
                            "label": "Critical"
                        },
                        "debug": {
                            "allowQuery": true,
                            "brief": "Include debug priority",
                            "dataType": "boolean",
                            "description": "Include debug priority.",
                            "label": "Debug"
                        },
                        "emerg": {
                            "allowQuery": true,
                            "brief": "Include emerg priority",
                            "dataType": "boolean",
                            "description": "Include emerg priority.",
                            "label": "Emergency"
                        },
                        "err": {
                            "allowQuery": true,
                            "brief": "Include err priority",
                            "dataType": "boolean",
                            "description": "Include err priority.",
                            "label": "Error"
                        },
                        "info": {
                            "allowQuery": true,
                            "brief": "Include info priority",
                            "dataType": "boolean",
                            "description": "Include info priority.",
                            "label": "Informational"
                        },
                        "logId": {
                            "allowQuery": true,
                            "brief": "The id of this log",
                            "dataType": "string",
                            "description": "The id of this log.  This defaults to logType.",
                            "label": "Log",
                            "unique": true
                        },
                        "logType": {
                            "allowQuery": true,
                            "brief": "The type of this log",
                            "dataType": "string",
                            "description": "The type of this log.",
                            "label": "Log Type",
                            "required": true
                        },
                        "notice": {
                            "allowQuery": true,
                            "brief": "Include notice priority",
                            "dataType": "boolean",
                            "description": "Include notice priority.",
                            "label": "Notice"
                        },
                        "trace1": {
                            "allowQuery": true,
                            "brief": "Include trace1 priority",
                            "dataType": "boolean",
                            "description": "Include trace1 priority.",
                            "label": "Trace1"
                        },
                        "trace2": {
                            "allowQuery": true,
                            "brief": "Include trace2 priority",
                            "dataType": "boolean",
                            "description": "Include trace2 priority.",
                            "label": "Trace2"
                        },
                        "trace3": {
                            "allowQuery": true,
                            "brief": "Include trace3 priority",
                            "dataType": "boolean",
                            "description": "Include trace3 priority.",
                            "label": "Trace3"
                        },
                        "trace4": {
                            "allowQuery": true,
                            "brief": "Include trace4 priority",
                            "dataType": "boolean",
                            "description": "Include trace4 priority.",
                            "label": "Trace4"
                        },
                        "trace5": {
                            "allowQuery": true,
                            "brief": "Include trace5 priority",
                            "dataType": "boolean",
                            "description": "Include trace5 priority.",
                            "label": "Trace5"
                        },
                        "trace6": {
                            "allowQuery": true,
                            "brief": "Include trace6 priority",
                            "dataType": "boolean",
                            "description": "Include trace6 priority.",
                            "label": "Trace6"
                        },
                        "trace7": {
                            "allowQuery": true,
                            "brief": "Include trace7 priority",
                            "dataType": "boolean",
                            "description": "Include trace7 priority.",
                            "label": "Trace7"
                        },
                        "trace8": {
                            "allowQuery": true,
                            "brief": "Include trace8 priority",
                            "dataType": "boolean",
                            "description": "Include trace8 priority.",
                            "label": "Trace8"
                        },
                        "warning": {
                            "allowQuery": true,
                            "brief": "Include warning priority",
                            "dataType": "boolean",
                            "description": "Include warning priority.",
                            "label": "Warning"
                        },
                        "type": {
                            "required": true,
                            "label": "Type",
                            "description": "Configuration type.",
                            "dataType": "string",
                            "brief": "Configuration type",
                            "allowQuery": true
                        },
                        "title": {
                            "label": "Title",
                            "description": "The title for this configuration component.",
                            "dataType": "string",
                            "brief": "The title for this configuration component",
                            "allowQuery": true
                        },
                        "sourceLocation": {
                            "label": "Source Location",
                            "description": "This is a contextual string added when this configuration object is processed.",
                            "dataType": "string",
                            "brief": "Contextual string added when this configuration object is processed",
                            "allowQuery": true
                        },
                        "description": {
                            "label": "Description",
                            "description": "The description of this configuration component.",
                            "dataTypeParameter": "text/plain",
                            "dataType": "string",
                            "brief": "The description of this configuration component",
                            "allowQuery": true
                        },
                        "url": {
                            "unique": false,
                            "required": true,
                            "label": "Url",
                            "description": "The url of the Splunk HTTP Event Collector.  For example, https://splunk-host:8088/services/collector/event",
                            "dataType": "string",
                            "allowQuery": true
                        },
                        "sslOptions": {
                            "unique": false,
                            "label": "SSL Options",
                            "description": "Options for configuring SSL.",
                            "dataTypeParameter": "_AdaptiveConf_log_splunk_ssl",
                            "dataType": "object",
                            "allowQuery": false
                        },
                        "sourcetype": {
                            "unique": false,
                            "required": false,
                            "label": "Source Type",
                            "description": "The sourcetype value to assign to the event data.",
                            "dataType": "string",
                            "allowQuery": true
                        },
                        "source": {
                            "unique": false,
                            "required": false,
                            "label": "Source",
                            "description": "The source value to assign to the event data. For example, if you're sending data from an app you're developing, you could set this key to the name of the app.",
                            "dataType": "string",
                            "allowQuery": true
                        },
                        "index": {
                            "unique": false,
                            "required": false,
                            "label": "Index",
                            "description": "The name of the index by which the event data is to be indexed. The index you specify here must within the list of allowed indexes if the token has the indexes parameter set.",
                            "dataType": "string",
                            "allowQuery": true
                        },
                        "host": {
                            "unique": false,
                            "required": false,
                            "label": "Host",
                            "description": "The host value to assign to the event data. This is typically the hostname of the client from which you're sending data.",
                            "dataType": "string",
                            "allowQuery": true
                        },
                        "hecToken": {
                            "unique": false,
                            "required": true,
                            "label": "HEC Token",
                            "description": "Client authentication token generated by the HTTP Event Collector.",
                            "dataType": "string",
                            "allowQuery": true
                        },
                        "fields": {
                            "unique": false,
                            "required": false,
                            "label": "Fields",
                            "description": "(Not applicable to raw data.) Specifies a JSON object that contains explicit custom fields to be defined at index time. Requests containing the \"fields\" property must be sent to the /collector/event endpoint, or they will not be indexed. For more information, see <a href=\"/view/event-collector/SP-CAAAFB6\">Indexed field extractions</a>.",
                            "dataType": "object",
                            "allowQuery": true
                        },
                        "connectionOptions": {
                            "unique": false,
                            "label": "Connection Options",
                            "description": "Options for configuring connection.",
                            "dataTypeParameter": "_AdaptiveConf_log_splunk_connection",
                            "dataType": "object",
                            "allowQuery": false
                        }
                    },
                    "current": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "message": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Message",
                            "description": "Unformatted message that is being logged."
                        },
                        "xctxUUID": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "UUID",
                            "description": "The current scope's UUID."
                        },
                        "source": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Source",
                            "description": "Source file that issued message."
                        }
                    }
                }
            },
            "modelInitialObjectId": {
                "contextTypeId": "modelInitialObjectId",
                "qualifierDefinitions": {
                    "_meta_": {
                        "parentPaths": [
                            "/afw/_AdaptiveContextType_/application/qualifierDefinitions"
                        ]
                    },
                    "current": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "mappedAdaptorId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Mapped Adaptor Id",
                            "description": "The adaptor id of the object being converted to object."
                        },
                        "mappedObject": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "object",
                            "label": "Mapped Object",
                            "description": "This is object being converted to object."
                        },
                        "mappedObjectId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Mapped Object Id",
                            "description": "The object id of the object being converted to object."
                        },
                        "mappedObjectType": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Mapped Object Type",
                            "description": "The object type of the object being converted to object."
                        },
                        "adaptorId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Adaptor Id",
                            "description": "The adaptor id of the object being converted to mapped object."
                        },
                        "object": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "object",
                            "label": "Object",
                            "description": "This is object being converted to mapped object."
                        },
                        "objectId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "ObjectId",
                            "description": "The object id of the object being converted to mapped object."
                        },
                        "objectType": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "ObjectType",
                            "description": "The object type of the object being converted to mapped object."
                        }
                    }
                },
                "description": "current:: variables available for initialObjectId resolution"
            },
            "authorizationCheck": {
                "contextTypeId": "authorizationCheck",
                "qualifierDefinitions": {
                    "_meta_": {
                        "parentPaths": [
                            "/afw/_AdaptiveContextType_/application/qualifierDefinitions"
                        ]
                    },
                    "current": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "requestId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Request Id",
                            "description": "The id of the authorization check being processed."
                        },
                        "resourceId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Resource Id",
                            "description": "The id of the resource being accessed."
                        },
                        "object": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "object",
                            "label": "Object",
                            "description": "The object being accessed."
                        },
                        "actionId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Action Id",
                            "description": "The id of the action being performed on the resource."
                        }
                    }
                },
                "description": "current:: variables available in authorizationCheck hybrid"
            },
            "modelModifyObject": {
                "contextTypeId": "modelModifyObject",
                "qualifierDefinitions": {
                    "_meta_": {
                        "parentPaths": [
                            "/afw/_AdaptiveContextType_/application/qualifierDefinitions"
                        ]
                    },
                    "current": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "modifyEntries": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "array",
                            "label": "Modify Entries",
                            "description": "The modify entries."
                        },
                        "adaptorId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Adaptor Id",
                            "description": "The adaptor id of the object being converted to mapped object."
                        },
                        "object": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "object",
                            "label": "Object",
                            "description": "This is object being converted to mapped object."
                        },
                        "objectId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "ObjectId",
                            "description": "The object id of the object being converted to mapped object."
                        },
                        "objectType": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "ObjectType",
                            "description": "The object type of the object being converted to mapped object."
                        }
                    }
                },
                "description": "current:: variables available in modify object hybrid values related to objects going to an adaptor"
            },
            "authorizationHandler-auth-script": {
                "contextTypeId": "authorizationHandler-auth-script",
                "qualifierDefinitions": {
                    "_meta_": {
                        "parentPaths": [
                            "/afw/_AdaptiveContextType_/application/qualifierDefinitions"
                        ]
                    },
                    "authorizationHandler": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "allowDenyOverride": {
                            "allowQuery": true,
                            "brief": "Allow override of previous deny",
                            "dataType": "boolean",
                            "description": "Use caution when setting this parameter to true.  If this parameter is true, a decision of permit by this authorization handler will override a decision of deny by a previous authorization handler.",
                            "label": "Allow Deny Override",
                            "required": false
                        },
                        "allowPermitOverride": {
                            "allowQuery": true,
                            "brief": "Allow override of previous permit",
                            "dataType": "boolean",
                            "description": "If this parameter is true, a decision of deny by this authorization handler will override a decision of permit by a previous authorization handler.",
                            "label": "Allow Permit Override",
                            "required": false
                        },
                        "authorizationHandlerId": {
                            "allowQuery": true,
                            "brief": "Authorization handler id",
                            "dataType": "string",
                            "description": "Authorization handler id.",
                            "label": "Authorization Id"
                        },
                        "authorizationHandlerType": {
                            "allowQuery": true,
                            "brief": "Authorization handler type",
                            "dataType": "string",
                            "description": "Authorization handler type.",
                            "label": "Authorization Type",
                            "required": true
                        },
                        "priority": {
                            "allowQuery": true,
                            "brief": "Authorization handler priority",
                            "dataType": "integer",
                            "defaultValue": 9999,
                            "description": "When there are multiple active authorization handlers, this priority determines order this handler will be checked.  Priority 1 is the highest and will be checked first.  If multiple handlers have the same priority the order will vary.",
                            "label": "Priority",
                            "maxValue": 9999,
                            "minValue": 1,
                            "required": false
                        },
                        "required": {
                            "allowQuery": true,
                            "brief": "This authorization handler is required",
                            "dataType": "boolean",
                            "description": "If true, this authorization handler must be running to make an authorization decision if not running in core mode and if initialAuthorizationCheck did not make a decision.",
                            "label": "Required",
                            "required": false
                        },
                        "type": {
                            "required": true,
                            "label": "Type",
                            "description": "Configuration type.",
                            "dataType": "string",
                            "brief": "Configuration type",
                            "allowQuery": true
                        },
                        "title": {
                            "label": "Title",
                            "description": "The title for this configuration component.",
                            "dataType": "string",
                            "brief": "The title for this configuration component",
                            "allowQuery": true
                        },
                        "sourceLocation": {
                            "label": "Source Location",
                            "description": "This is a contextual string added when this configuration object is processed.",
                            "dataType": "string",
                            "brief": "Contextual string added when this configuration object is processed",
                            "allowQuery": true
                        },
                        "description": {
                            "label": "Description",
                            "description": "The description of this configuration component.",
                            "dataTypeParameter": "text/plain",
                            "dataType": "string",
                            "brief": "The description of this configuration component",
                            "allowQuery": true
                        },
                        "qualifiedVariables": {
                            "label": "Qualified Variables",
                            "description": "The name of each property in this object corresponds to a qualifier that is available in processing associated with this authorization handler.  The qualifier can be an empty string for unqualified variables.  The properties of these \"qualifier objects\" are hybrid values that are accessible as qualified variables while processing this authorization handler.  These variables are evaluated once per authorization check as they are accessed.\n\nVariables specified here have precedence over duplicate application variables when this authorization handler is being processed.\n\nSome qualifiers are restricted.",
                            "dataTypeParameter": "_AdaptiveTemplatePropertiesObjects_",
                            "dataType": "object",
                            "brief": "Qualified variables associated with this authorization handler"
                        }
                    },
                    "current": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "message": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Message",
                            "description": "Unformatted message that is being logged."
                        }
                    },
                    "x": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "y": {
                            "dataType": "template"
                        }
                    }
                }
            },
            "modelRetrieveObjects": {
                "contextTypeId": "modelRetrieveObjects",
                "qualifierDefinitions": {
                    "_meta_": {
                        "parentPaths": [
                            "/afw/_AdaptiveContextType_/application/qualifierDefinitions"
                        ]
                    },
                    "current": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "mappedAdaptorId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Mapped Adaptor Id",
                            "description": "The adaptor id of the object being converted to object."
                        },
                        "mappedObject": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "object",
                            "label": "Mapped Object",
                            "description": "This is object being converted to object."
                        },
                        "mappedObjectId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Mapped Object Id",
                            "description": "The object id of the object being converted to object."
                        },
                        "mappedObjectType": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Mapped Object Type",
                            "description": "The object type of the object being converted to object."
                        }
                    }
                },
                "description": "current:: variables available in _AdaptiveModelObjectType_ hybrid values related to objects coming from an adaptor"
            },
            "modelAddObject": {
                "contextTypeId": "modelAddObject",
                "qualifierDefinitions": {
                    "_meta_": {
                        "parentPaths": [
                            "/afw/_AdaptiveContextType_/application/qualifierDefinitions"
                        ]
                    },
                    "current": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "adaptorId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Adaptor Id",
                            "description": "The adaptor id of the object being converted to mapped object."
                        },
                        "object": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "object",
                            "label": "Object",
                            "description": "This is object being converted to mapped object."
                        },
                        "objectId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "ObjectId",
                            "description": "The object id of the object being converted to mapped object."
                        },
                        "objectType": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "ObjectType",
                            "description": "The object type of the object being converted to mapped object."
                        }
                    }
                },
                "description": "current:: variables available in add object hybridvalues related to objects going to an adaptor"
            },
            "logType-standard": {
                "contextTypeId": "logType-standard",
                "qualifierDefinitions": {
                    "_meta_": {
                        "parentPaths": [
                            "/afw/_AdaptiveContextType_/application/qualifierDefinitions"
                        ]
                    },
                    "log": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "alert": {
                            "allowQuery": true,
                            "brief": "Include alert priority",
                            "dataType": "boolean",
                            "description": "Include alert priority.",
                            "label": "Alert"
                        },
                        "crit": {
                            "allowQuery": true,
                            "brief": "Include crit priority",
                            "dataType": "boolean",
                            "description": "Include crit priority.",
                            "label": "Critical"
                        },
                        "debug": {
                            "allowQuery": true,
                            "brief": "Include debug priority",
                            "dataType": "boolean",
                            "description": "Include debug priority.",
                            "label": "Debug"
                        },
                        "emerg": {
                            "allowQuery": true,
                            "brief": "Include emerg priority",
                            "dataType": "boolean",
                            "description": "Include emerg priority.",
                            "label": "Emergency"
                        },
                        "err": {
                            "allowQuery": true,
                            "brief": "Include err priority",
                            "dataType": "boolean",
                            "description": "Include err priority.",
                            "label": "Error"
                        },
                        "info": {
                            "allowQuery": true,
                            "brief": "Include info priority",
                            "dataType": "boolean",
                            "description": "Include info priority.",
                            "label": "Informational"
                        },
                        "logId": {
                            "allowQuery": true,
                            "brief": "The id of this log",
                            "dataType": "string",
                            "description": "The id of this log.  This defaults to logType.",
                            "label": "Log",
                            "unique": true
                        },
                        "logType": {
                            "allowQuery": true,
                            "brief": "The type of this log",
                            "dataType": "string",
                            "description": "The type of this log.",
                            "label": "Log Type",
                            "required": true
                        },
                        "notice": {
                            "allowQuery": true,
                            "brief": "Include notice priority",
                            "dataType": "boolean",
                            "description": "Include notice priority.",
                            "label": "Notice"
                        },
                        "trace1": {
                            "allowQuery": true,
                            "brief": "Include trace1 priority",
                            "dataType": "boolean",
                            "description": "Include trace1 priority.",
                            "label": "Trace1"
                        },
                        "trace2": {
                            "allowQuery": true,
                            "brief": "Include trace2 priority",
                            "dataType": "boolean",
                            "description": "Include trace2 priority.",
                            "label": "Trace2"
                        },
                        "trace3": {
                            "allowQuery": true,
                            "brief": "Include trace3 priority",
                            "dataType": "boolean",
                            "description": "Include trace3 priority.",
                            "label": "Trace3"
                        },
                        "trace4": {
                            "allowQuery": true,
                            "brief": "Include trace4 priority",
                            "dataType": "boolean",
                            "description": "Include trace4 priority.",
                            "label": "Trace4"
                        },
                        "trace5": {
                            "allowQuery": true,
                            "brief": "Include trace5 priority",
                            "dataType": "boolean",
                            "description": "Include trace5 priority.",
                            "label": "Trace5"
                        },
                        "trace6": {
                            "allowQuery": true,
                            "brief": "Include trace6 priority",
                            "dataType": "boolean",
                            "description": "Include trace6 priority.",
                            "label": "Trace6"
                        },
                        "trace7": {
                            "allowQuery": true,
                            "brief": "Include trace7 priority",
                            "dataType": "boolean",
                            "description": "Include trace7 priority.",
                            "label": "Trace7"
                        },
                        "trace8": {
                            "allowQuery": true,
                            "brief": "Include trace8 priority",
                            "dataType": "boolean",
                            "description": "Include trace8 priority.",
                            "label": "Trace8"
                        },
                        "warning": {
                            "allowQuery": true,
                            "brief": "Include warning priority",
                            "dataType": "boolean",
                            "description": "Include warning priority.",
                            "label": "Warning"
                        },
                        "type": {
                            "required": true,
                            "label": "Type",
                            "description": "Configuration type.",
                            "dataType": "string",
                            "brief": "Configuration type",
                            "allowQuery": true
                        },
                        "title": {
                            "label": "Title",
                            "description": "The title for this configuration component.",
                            "dataType": "string",
                            "brief": "The title for this configuration component",
                            "allowQuery": true
                        },
                        "sourceLocation": {
                            "label": "Source Location",
                            "description": "This is a contextual string added when this configuration object is processed.",
                            "dataType": "string",
                            "brief": "Contextual string added when this configuration object is processed",
                            "allowQuery": true
                        },
                        "description": {
                            "label": "Description",
                            "description": "The description of this configuration component.",
                            "dataTypeParameter": "text/plain",
                            "dataType": "string",
                            "brief": "The description of this configuration component",
                            "allowQuery": true
                        }
                    },
                    "current": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "message": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Message",
                            "description": "Unformatted message that is being logged."
                        },
                        "xctxUUID": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "UUID",
                            "description": "The current scope's UUID."
                        },
                        "source": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Source",
                            "description": "Source file that issued message."
                        }
                    }
                }
            },
            "modelSetProperty": {
                "contextTypeId": "modelSetProperty",
                "qualifierDefinitions": {
                    "_meta_": {
                        "parentPaths": [
                            "/afw/_AdaptiveContextType_/application/qualifierDefinitions"
                        ]
                    },
                    "current": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "adaptorId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Adaptor Id",
                            "description": "The adaptor id of the object being converted to mapped object."
                        },
                        "object": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "object",
                            "label": "Object",
                            "description": "This is object being converted to mapped object."
                        },
                        "objectId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "ObjectId",
                            "description": "The object id of the object being converted to mapped object."
                        },
                        "objectType": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "ObjectType",
                            "description": "The object type of the object being converted to mapped object."
                        },
                        "propertyName": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Property Name",
                            "description": "The property name in current::object of this property."
                        },
                        "value": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "label": "Value",
                            "description": "The value of this property from current::object."
                        }
                    }
                },
                "description": "current:: variables available to model setProperty expression"
            },
            "logType-syslog": {
                "contextTypeId": "logType-syslog",
                "qualifierDefinitions": {
                    "_meta_": {
                        "parentPaths": [
                            "/afw/_AdaptiveContextType_/application/qualifierDefinitions"
                        ]
                    },
                    "log": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "alert": {
                            "allowQuery": true,
                            "brief": "Include alert priority",
                            "dataType": "boolean",
                            "description": "Include alert priority.",
                            "label": "Alert"
                        },
                        "crit": {
                            "allowQuery": true,
                            "brief": "Include crit priority",
                            "dataType": "boolean",
                            "description": "Include crit priority.",
                            "label": "Critical"
                        },
                        "debug": {
                            "allowQuery": true,
                            "brief": "Include debug priority",
                            "dataType": "boolean",
                            "description": "Include debug priority.",
                            "label": "Debug"
                        },
                        "emerg": {
                            "allowQuery": true,
                            "brief": "Include emerg priority",
                            "dataType": "boolean",
                            "description": "Include emerg priority.",
                            "label": "Emergency"
                        },
                        "err": {
                            "allowQuery": true,
                            "brief": "Include err priority",
                            "dataType": "boolean",
                            "description": "Include err priority.",
                            "label": "Error"
                        },
                        "info": {
                            "allowQuery": true,
                            "brief": "Include info priority",
                            "dataType": "boolean",
                            "description": "Include info priority.",
                            "label": "Informational"
                        },
                        "logId": {
                            "allowQuery": true,
                            "brief": "The id of this log",
                            "dataType": "string",
                            "description": "The id of this log.  This defaults to logType.",
                            "label": "Log",
                            "unique": true
                        },
                        "logType": {
                            "allowQuery": true,
                            "brief": "The type of this log",
                            "dataType": "string",
                            "description": "The type of this log.",
                            "label": "Log Type",
                            "required": true
                        },
                        "notice": {
                            "allowQuery": true,
                            "brief": "Include notice priority",
                            "dataType": "boolean",
                            "description": "Include notice priority.",
                            "label": "Notice"
                        },
                        "trace1": {
                            "allowQuery": true,
                            "brief": "Include trace1 priority",
                            "dataType": "boolean",
                            "description": "Include trace1 priority.",
                            "label": "Trace1"
                        },
                        "trace2": {
                            "allowQuery": true,
                            "brief": "Include trace2 priority",
                            "dataType": "boolean",
                            "description": "Include trace2 priority.",
                            "label": "Trace2"
                        },
                        "trace3": {
                            "allowQuery": true,
                            "brief": "Include trace3 priority",
                            "dataType": "boolean",
                            "description": "Include trace3 priority.",
                            "label": "Trace3"
                        },
                        "trace4": {
                            "allowQuery": true,
                            "brief": "Include trace4 priority",
                            "dataType": "boolean",
                            "description": "Include trace4 priority.",
                            "label": "Trace4"
                        },
                        "trace5": {
                            "allowQuery": true,
                            "brief": "Include trace5 priority",
                            "dataType": "boolean",
                            "description": "Include trace5 priority.",
                            "label": "Trace5"
                        },
                        "trace6": {
                            "allowQuery": true,
                            "brief": "Include trace6 priority",
                            "dataType": "boolean",
                            "description": "Include trace6 priority.",
                            "label": "Trace6"
                        },
                        "trace7": {
                            "allowQuery": true,
                            "brief": "Include trace7 priority",
                            "dataType": "boolean",
                            "description": "Include trace7 priority.",
                            "label": "Trace7"
                        },
                        "trace8": {
                            "allowQuery": true,
                            "brief": "Include trace8 priority",
                            "dataType": "boolean",
                            "description": "Include trace8 priority.",
                            "label": "Trace8"
                        },
                        "warning": {
                            "allowQuery": true,
                            "brief": "Include warning priority",
                            "dataType": "boolean",
                            "description": "Include warning priority.",
                            "label": "Warning"
                        },
                        "type": {
                            "required": true,
                            "label": "Type",
                            "description": "Configuration type.",
                            "dataType": "string",
                            "brief": "Configuration type",
                            "allowQuery": true
                        },
                        "title": {
                            "label": "Title",
                            "description": "The title for this configuration component.",
                            "dataType": "string",
                            "brief": "The title for this configuration component",
                            "allowQuery": true
                        },
                        "sourceLocation": {
                            "label": "Source Location",
                            "description": "This is a contextual string added when this configuration object is processed.",
                            "dataType": "string",
                            "brief": "Contextual string added when this configuration object is processed",
                            "allowQuery": true
                        },
                        "description": {
                            "label": "Description",
                            "description": "The description of this configuration component.",
                            "dataTypeParameter": "text/plain",
                            "dataType": "string",
                            "brief": "The description of this configuration component",
                            "allowQuery": true
                        },
                        "optionLogPid": {
                            "required": false,
                            "label": "Log PID",
                            "description": "Include PID with each message.",
                            "dataType": "boolean",
                            "brief": "Include PID with each message"
                        },
                        "optionLogPError": {
                            "required": false,
                            "label": "Standard Error",
                            "description": "Print to stderr as well.",
                            "dataType": "boolean",
                            "brief": "Print to stderr as well"
                        },
                        "optionLogODelay": {
                            "required": false,
                            "label": "Delay Connection",
                            "description": "The converse of LOG_NDELAY; opening of the connection is delayed until syslog() is called. (This is the default, and need not be specified.)",
                            "defaultValue": true,
                            "dataType": "boolean",
                            "brief": "Delay opening the connection"
                        },
                        "optionLogNoWait": {
                            "required": false,
                            "label": "No Wait",
                            "description": "Don't wait for child processes that may have been created while logging the message. (The GNU C library does not create a child process, so this option has no effect on Linux.)",
                            "dataType": "boolean",
                            "brief": "Don't wait for child process"
                        },
                        "optionLogNoDelay": {
                            "required": false,
                            "label": "Connect Immediately",
                            "description": "Open the connection immediately (normally, the connection is opened when the first message is logged).",
                            "dataType": "boolean",
                            "brief": "Open the connection immediately"
                        },
                        "optionLogCons": {
                            "required": false,
                            "label": "Write to Console",
                            "description": "Write directly to system console if there is an error while sending to system logger.",
                            "dataType": "boolean",
                            "brief": "Write to Console on error"
                        },
                        "ident": {
                            "required": false,
                            "label": "Identifier",
                            "description": "The identifier is prepended to every message, and is typically set to the program name. If omitted, the program name is used.",
                            "dataType": "string",
                            "brief": "The syslog message identifier"
                        },
                        "facility": {
                            "required": false,
                            "label": "Facility",
                            "description": "The facility argument is used to specify what type of program is logging the message. This lets the configuration file specify that messages from different facilities will be handled differently.  Valid options are:  auth, authpriv, cron, daemon, ftp, kern, local0 through local7, lpr, mail, news, user, uucp.",
                            "dataType": "string",
                            "brief": "The syslog facility"
                        }
                    },
                    "current": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "message": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Message",
                            "description": "Unformatted message that is being logged."
                        },
                        "xctxUUID": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "UUID",
                            "description": "The current scope's UUID."
                        },
                        "source": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Source",
                            "description": "Source file that issued message."
                        }
                    }
                }
            },
            "application": {
                "contextTypeId": "application",
                "qualifierDefinitions": {
                    "_meta_": {
                        "objectType": "_AdaptiveQualifierDefinitions_"
                    },
                    "current": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "mode": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Authorization Mode",
                            "description": "The current authorization mode."
                        },
                        "pid": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "integer",
                            "label": "Pid",
                            "description": "The current processor id."
                        },
                        "programName": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Program Name",
                            "description": "The current program name."
                        },
                        "xctxUUID": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "XCTX UUID",
                            "description": "The execution context (xctx) UUID which can normally be considered the UUID of the current request."
                        }
                    },
                    "application": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "title": {
                            "allowQuery": true,
                            "brief": "The title of the application",
                            "dataType": "string",
                            "description": "The title of the application.  This is used as the title of the Adaptive Framework Web App and is available for use in other places as appropriate.",
                            "label": "Title",
                            "required": false
                        },
                        "description": {
                            "allowQuery": true,
                            "brief": "The description of the application",
                            "dataType": "string",
                            "dataTypeParameter": "text/plain",
                            "description": "The description of the application.",
                            "label": "Description",
                            "required": false
                        },
                        "defaultAdaptorId": {
                            "allowQuery": true,
                            "brief": "This is the adaptorId chosen by default for user interface select components",
                            "dataType": "string",
                            "description": "This is the adaptorId chosen by default for user interface select components.",
                            "label": "Default Adaptor",
                            "required": false
                        },
                        "defaultModelAdaptorId": {
                            "allowQuery": true,
                            "brief": "The default adaptorId to select for model storage",
                            "dataType": "string",
                            "description": "When presented with multiple model adaptors, this is the default adaptorId to use.  This will be the default selected adaptor chosen by user interface components.",
                            "label": "Default Model Adaptor",
                            "required": false
                        },
                        "layoutsAdaptorId": {
                            "allowQuery": true,
                            "brief": "The default adaptorId to select for layout component objects",
                            "dataType": "string",
                            "description": "This is the adaptorId that locates Adaptive Layout Component objects.",
                            "label": "Layouts Adaptor",
                            "required": false
                        },
                        "qualifiedVariables": {
                            "brief": "Qualified set of variables",
                            "dataType": "object",
                            "dataTypeParameter": "_AdaptiveTemplatePropertiesObjects_",
                            "description": "The name of each property in this object corresponds to a qualifier that is available in processing associated with this application.  The qualifier can not be an empty string.  The properties of these \"qualifier objects\" are hybrid values that are accessible as qualified variables.  These variables are evaluated once per scope as they are accessed.\n\nSome qualifiers are restricted.",
                            "label": "Qualified Variables"
                        },
                        "extensions": {
                            "brief": "List of extensions to load at startup",
                            "dataType": "array",
                            "dataTypeParameter": "string",
                            "description": "This is a list of extensionId of extensions to load at startup.  Each extensionId must be the objectId of an object in /afw/_AdaptiveManifest_/.",
                            "label": "Extensions",
                            "required": false
                        },
                        "defaultFlags": {
                            "brief": "List of default flags to be set when a scope (request) is created.",
                            "dataType": "array",
                            "dataTypeParameter": "string",
                            "description": "This is a list of the flagId of default flags that will be set when a scope (request) is created.  Flags in this list that are not yet registered will be set as a default when/if they are registered.  Each registered flagId is the objectId of an object in /afw/_AdaptiveFlag_/.",
                            "label": "Default Flags",
                            "required": false
                        },
                        "sourceLocation": {
                            "label": "Source Location",
                            "description": "This is a contextual string added when this configuration object is processed.",
                            "dataType": "string",
                            "brief": "Contextual string added when this configuration object is processed",
                            "allowQuery": true
                        },
                        "applicationId": {
                            "allowQuery": true,
                            "allowWrite": false,
                            "brief": "This is the id of the application",
                            "dataType": "string",
                            "description": "This is id of the application.  The default applicationId is \"application\".  This property can only be specified in the type=application entry of the conf file.",
                            "label": "Application"
                        },
                        "confAdaptorId": {
                            "allowQuery": true,
                            "allowWrite": false,
                            "brief": "Optional adaptorId of the running adaptor that contains configuration related objects",
                            "dataType": "string",
                            "description": "This is the optional adaptorId of the running adaptor that contains configuration related objects.  This property can only be specified in the type=application entry of the conf file.\n\nThe runtime /afw/_AdaptiveApplication_/current object will consist of properties from the type=application entry of the conf file plus unique properties from the optional /<confAdaptorId>/_AdaptiveConf_application/<applicationId> object.\n\nAll services defined by _AdaptiveServiceConf_ objects in <confAdaptorId> with startup \"permanent\" or \"immediate\" will be started when the type=application conf entry is processed.",
                            "label": "Conf Adaptor"
                        },
                        "type": {
                            "required": true,
                            "label": "Type",
                            "description": "Configuration type.",
                            "dataType": "string",
                            "brief": "Configuration type",
                            "allowQuery": true
                        }
                    },
                    "subject": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "subjectId": {
                            "dataType": "template"
                        },
                        "vaultApiKey": {
                            "dataType": "template"
                        },
                        "primaryAffiliation": {
                            "dataType": "template"
                        },
                        "mail": {
                            "dataType": "template"
                        },
                        "nickname": {
                            "dataType": "template"
                        },
                        "fullName": {
                            "dataType": "template"
                        },
                        "givenName": {
                            "dataType": "template"
                        },
                        "displayName": {
                            "dataType": "template"
                        },                        
                        "affiliation": {
                            "dataType": "template"
                        },                        
                        "edirgroup": {
                            "dataType": "template"
                        }
                    },
                    "environment": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "sslClientVerify": {
                            "dataType": "template"
                        },
                        "remoteAddr": {
                            "dataType": "template"
                        },
                        "authType": {
                            "dataType": "template"
                        }
                    }
                }
            },
            "modelReplaceObject": {
                "contextTypeId": "modelReplaceObject",
                "qualifierDefinitions": {
                    "_meta_": {
                        "parentPaths": [
                            "/afw/_AdaptiveContextType_/application/qualifierDefinitions"
                        ]
                    },
                    "current": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "adaptorId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Adaptor Id",
                            "description": "The adaptor id of the object being converted to mapped object."
                        },
                        "object": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "object",
                            "label": "Object",
                            "description": "This is object being converted to mapped object."
                        },
                        "objectId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "ObjectId",
                            "description": "The object id of the object being converted to mapped object."
                        },
                        "objectType": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "ObjectType",
                            "description": "The object type of the object being converted to mapped object."
                        }
                    }
                },
                "description": "current:: variables available in replace object hybrid values related to objects going to an adaptor"
            },
            "modelGetProperty": {
                "contextTypeId": "modelGetProperty",
                "qualifierDefinitions": {
                    "_meta_": {
                        "parentPaths": [
                            "/afw/_AdaptiveContextType_/application/qualifierDefinitions"
                        ]
                    },
                    "current": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "mappedAdaptorId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Mapped Adaptor Id",
                            "description": "The adaptor id of the object being converted to object."
                        },
                        "mappedObject": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "object",
                            "label": "Mapped Object",
                            "description": "This is object being converted to object."
                        },
                        "mappedObjectId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Mapped Object Id",
                            "description": "The object id of the object being converted to object."
                        },
                        "mappedObjectType": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Mapped Object Type",
                            "description": "The object type of the object being converted to object."
                        },
                        "mappedPropertyName": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Mapped Property Name",
                            "description": "The property name in current::mappedObject of this property."
                        },
                        "mappedValue": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "label": "Mapped Value",
                            "description": "The value of this property from current::mappedObject."
                        }
                    }
                },
                "description": "current:: variables available to model getProperty expression"
            },
            "modelGetObject": {
                "contextTypeId": "modelGetObject",
                "qualifierDefinitions": {
                    "_meta_": {
                        "parentPaths": [
                            "/afw/_AdaptiveContextType_/application/qualifierDefinitions"
                        ]
                    },
                    "current": {
                        "_meta_": {
                            "objectType": "_AdaptivePropertyTypes_"
                        },
                        "mappedAdaptorId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Mapped Adaptor Id",
                            "description": "The adaptor id of the object being converted to object."
                        },
                        "mappedObject": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "object",
                            "label": "Mapped Object",
                            "description": "This is object being converted to object."
                        },
                        "mappedObjectId": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Mapped Object Id",
                            "description": "The object id of the object being converted to object."
                        },
                        "mappedObjectType": {
                            "_meta_": {
                                "objectType": "_AdaptiveValueMeta_"
                            },
                            "dataType": "string",
                            "label": "Mapped Object Type",
                            "description": "The object type of the object being converted to object."
                        }
                    }
                },
                "description": "current:: variables available in _AdaptiveModelObjectType_ hybrid values related to objects coming from an adaptor"
            }
        },
        "data_type": {
            "dayTimeDuration": {
                "brief": "A day time duration",
                "cType": "afw_dayTimeDuration_t",
                "dataType": "dayTimeDuration",
                "description": "Data type dayTimeDuration is an ISO 8601 extended format DTnHnMnS",
                "directReturn": false,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "jsonPrimitive": "string",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                "relationalCompares": true,
                "scalar": true
            },
            "ia5String": {
                "brief": "An ASN.1 value",
                "cType": "afw_utf8_t",
                "dataType": "ia5String",
                "description": "Data type ia5String holds a string restricted to the ASN.1 notation. It is used to represent ISO 646 (IA5) characters. which contains precisely 128 characters.",
                "directReturn": false,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "jsonPrimitive": "string",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.26{64512}",
                "relationalCompares": true,
                "scalar": true
            },
            "rfc822Name": {
                "brief": "A RFC 822 name",
                "cType": "afw_utf8_t",
                "dataType": "rfc822Name",
                "description": "Data type rfc822Name holds a string value that conforms to RFC822: local-part@domain",
                "directReturn": false,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "jsonPrimitive": "string",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                "relationalCompares": false,
                "scalar": true
            },
            "double": {
                "brief": "A 64-bit floating point number",
                "cType": "double",
                "dataType": "double",
                "description": "Data type double holds a double-precision 64-bit floating point number.  It also can hold the values 0, -0, INF, -INF and NaN.",
                "directReturn": true,
                "evaluated": false,
                "jsonImpliesDataType": true,
                "jsonPrimitive": "number",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                "relationalCompares": true,
                "scalar": true
            },
            "array": {
                "brief": "A list of adaptive values",
                "cType": "const afw_array_t *",
                "dataType": "array",
                "dataTypeParameterType": "ArrayOf",
                "description": "Data type list holds a list of adaptive value.  The list can have value all of one data type or of different data types.",
                "directReturn": true,
                "evaluated": false,
                "jsonImpliesDataType": true,
                "jsonPrimitive": "array",
                "relationalCompares": false,
                "scalar": false
            },
            "date": {
                "brief": "A date",
                "cType": "afw_date_t",
                "dataType": "date",
                "description": "Data type date holds a calendar date in format CCYY-MM-DD.",
                "directReturn": false,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "jsonPrimitive": "string",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.24",
                "relationalCompares": true,
                "scalar": true
            },
            "ipAddress": {
                "brief": "An IP address",
                "cType": "afw_utf8_t",
                "dataType": "ipAddress",
                "description": "Data type ipAddress holds an Internet Protocol address (IP address).",
                "directReturn": false,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "jsonPrimitive": "string",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                "relationalCompares": false,
                "scalar": true
            },
            "any": {
                "brief": "Any value is allowed",
                "cType": "const afw_value_t *",
                "dataType": "any",
                "description": "Any value can be assigned as the value of data type \"any\".  The actual data type is the data type of the value.  Data type \"unknown\" is prefered over data type \"any\" since \"any\" only detects type check errors during evaluation.",
                "directReturn": true,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "relationalCompares": false,
                "scalar": false
            },
            "hexBinary": {
                "brief": "A binary value whose string value is character hex encoded",
                "cType": "afw_memory_t",
                "dataType": "hexBinary",
                "dataTypeParameterType": "MediaType",
                "description": "Data type hexBinary holds binary data.  Its string value is character hex encoded.",
                "directReturn": false,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "jsonPrimitive": "string",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.5",
                "relationalCompares": true,
                "scalar": true
            },
            "x500Name": {
                "brief": "A X.500 distinguished name",
                "cType": "afw_utf8_t",
                "dataType": "x500Name",
                "description": "Data type x500Name hold a X.500 distinguished name.",
                "directReturn": false,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "jsonPrimitive": "string",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                "relationalCompares": false,
                "scalar": true
            },
            "password": {
                "brief": "A password",
                "cType": "afw_utf8_t",
                "dataType": "password",
                "description": "Data type password hold a secret series of characters that enables a user to access a file, computer, or program.",
                "directReturn": false,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "jsonPrimitive": "string",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.40{128}",
                "relationalCompares": true,
                "scalar": true
            },
            "xpathExpression": {
                "brief": "A XPath expression",
                "cType": "afw_utf8_t",
                "dataType": "xpathExpression",
                "description": "Data type xpathExpression holds an XML Path Language (XPath) expression.  An xpath expression provides the ability to navigate around the tree representation of an XML document.",
                "directReturn": false,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "jsonPrimitive": "string",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                "relationalCompares": false,
                "scalar": true
            },
            "script": {
                "brief": "An adaptive script",
                "cType": "afw_utf8_t",
                "dataType": "script",
                "dataTypeParameterType": "SourceParameter",
                "description": "Data type script holds the source for an adaptive script.",
                "directReturn": false,
                "evaluated": true,
                "jsonImpliesDataType": false,
                "jsonPrimitive": "string",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                "relationalCompares": true,
                "scalar": true
            },
            "string": {
                "brief": "A string",
                "cType": "afw_utf8_t",
                "dataType": "string",
                "dataTypeParameterType": "MediaType",
                "description": "Data type string hold a sequence of Unicode code points as defined at http://www.unicode.org.",
                "directReturn": false,
                "evaluated": false,
                "jsonImpliesDataType": true,
                "jsonPrimitive": "string",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                "relationalCompares": true,
                "scalar": true
            },
            "object": {
                "brief": "An adaptive object",
                "cType": "const afw_object_t *",
                "dataType": "object",
                "dataTypeParameterType": "ObjectType",
                "description": "Data type object holds an adaptive object.",
                "directReturn": true,
                "evaluated": false,
                "jsonImpliesDataType": true,
                "jsonPrimitive": "object",
                "relationalCompares": false,
                "scalar": false
            },
            "anyURI": {
                "brief": "A Uniform Resource Identifier Reference (URI)",
                "cType": "afw_utf8_t",
                "dataType": "anyURI",
                "description": "Data type anyURI holds a Uniform Resource Identifier Reference (URI). The URI can be absolute or relative, and may have an optional fragment identifier.",
                "directReturn": false,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "jsonPrimitive": "string",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                "relationalCompares": true,
                "scalar": true
            },
            "null": {
                "brief": "No value",
                "cType": "void *",
                "dataType": "null",
                "description": "Data type null is a special data type that represents no value.",
                "directReturn": true,
                "evaluated": false,
                "jsonImpliesDataType": true,
                "jsonPrimitive": "null",
                "relationalCompares": false,
                "scalar": true
            },
            "template": {
                "brief": "An adaptive template",
                "cType": "afw_utf8_t",
                "dataType": "template",
                "dataTypeParameterType": "SourceParameter",
                "description": "Data type template holds the source for an adaptive template.",
                "directReturn": false,
                "evaluated": true,
                "jsonImpliesDataType": false,
                "jsonPrimitive": "string",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                "relationalCompares": true,
                "scalar": true
            },
            "yearMonthDuration": {
                "brief": "A year month duration",
                "cType": "afw_yearMonthDuration_t",
                "dataType": "yearMonthDuration",
                "description": "Data type yearMonthDuration an ISO 8601 extended format PnYnMn.",
                "directReturn": false,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "jsonPrimitive": "string",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                "relationalCompares": true,
                "scalar": true
            },
            "unevaluated": {
                "brief": "An unevaluated value produced by compile",
                "cType": "const afw_value_t *",
                "dataType": "unevaluated",
                "dataTypeParameterType": "Type",
                "description": "This is a value produced by any of the Adaptive compile functions that can be evaluated using the evaluate() function.",
                "directReturn": true,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "relationalCompares": false,
                "scalar": false
            },
            "boolean": {
                "brief": "A boolean value",
                "cType": "afw_boolean_t",
                "dataType": "boolean",
                "description": "Data type boolean holds a boolean value.  Its to_string() value is \"true\" or \"false\".  Its from_string() true value can be mixed case \"t\", \"true\" or \"1\".  Its from_string() false value can be mixed case \"f\", \"false\" or \"0\".",
                "directReturn": true,
                "evaluated": false,
                "jsonImpliesDataType": true,
                "jsonPrimitive": "boolean",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.7",
                "relationalCompares": false,
                "scalar": true
            },
            "objectPath": {
                "brief": "An adaptive object's object path",
                "cType": "afw_utf8_t",
                "dataType": "objectPath",
                "description": "Data type objectPath is the path within the same instance of Adaptive Framework of an object.  Its for is /<adaptorId>/<objectType>/<objectId> where <adaptorId> is an adaptor id, <objectType> is the object id of an object type, and <objectId> is the id of an object.",
                "directReturn": false,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "jsonPrimitive": "string",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                "relationalCompares": true,
                "scalar": true
            },
            "objectId": {
                "brief": "An adaptive object's object id",
                "cType": "afw_utf8_t",
                "dataType": "objectId",
                "dataTypeParameterType": "ObjectType",
                "description": "Data type objectId holds an adaptive object's object id.  This is an association with another adaptive object by objectId that has the same adaptor id and object type id.",
                "directReturn": false,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "jsonPrimitive": "string",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                "relationalCompares": true,
                "scalar": true
            },
            "unknown": {
                "brief": "The data type is unknown by the value",
                "cType": "const afw_value_t *",
                "dataType": "unknown",
                "description": "Any value can be assigned as the value of data type \"unknown\".  The actual data type is the data type of the value.  Most \"type check\" errors can be detected during compile to reduce the number of errors detected during evaluation.",
                "directReturn": true,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "relationalCompares": false,
                "scalar": false
            },
            "dnsName": {
                "brief": "A DNS name",
                "cType": "afw_utf8_t",
                "dataType": "dnsName",
                "description": "Data type dnsName is Domain Name System (DNS) name.",
                "directReturn": false,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "jsonPrimitive": "string",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                "relationalCompares": false,
                "scalar": true
            },
            "function": {
                "brief": "A function",
                "cType": "const afw_value_t *",
                "dataType": "function",
                "dataTypeParameterType": "FunctionSignature",
                "description": "This is an Adaptive Script function definition, an ExpressionTupleOperation_lambda, the name of a built-in Adaptive function, or the name of a qualified variable that holds a function value.  If dataTypeParameterType is specified, the function must match that signature.",
                "directReturn": true,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "jsonPrimitive": "string",
                "relationalCompares": false,
                "scalar": false
            },
            "base64Binary": {
                "brief": "A binary value whose string value is base64 encoded",
                "cType": "afw_memory_t",
                "dataType": "base64Binary",
                "dataTypeParameterType": "MediaType",
                "description": "Data type base64Binary holds binary data.  Its string value is base64 encoded.",
                "directReturn": false,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "jsonPrimitive": "string",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.5",
                "relationalCompares": true,
                "scalar": true
            },
            "dateTime": {
                "brief": "A date and time",
                "cType": "afw_dateTime_t",
                "dataType": "dateTime",
                "description": "Data type dateTime is ISO 8601 extended format CCYY-MM-DDThh:mm:ss with an optional time zone.",
                "directReturn": false,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "jsonPrimitive": "string",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.24",
                "relationalCompares": true,
                "scalar": true
            },
            "integer": {
                "brief": "An integer",
                "cType": "afw_integer_t",
                "dataType": "integer",
                "description": "Data type integer hold a positive or negative whole numbers.  The string value of a negative integer is preceded with a minus sign ('-').  A positive integer is displayed without a sign but can optionally be preceded by a plus sign ('+') on input.",
                "directReturn": true,
                "evaluated": false,
                "jsonImpliesDataType": true,
                "jsonPrimitive": "number",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.27",
                "relationalCompares": true,
                "scalar": true
            },
            "time": {
                "brief": "A time",
                "cType": "afw_time_t",
                "dataType": "time",
                "description": "Data type time is ISO 8601 extended format hh:mm:ss with an optional time zone.",
                "directReturn": false,
                "evaluated": false,
                "jsonImpliesDataType": false,
                "jsonPrimitive": "string",
                "ldapOid": "1.3.6.1.4.1.1466.115.121.1.24",
                "relationalCompares": true,
                "scalar": true
            }
        },
        "error_rv_decoder": {
            "icu": {
                "key": "icu"
            },
            "ldap": {
                "key": "ldap"
            },
            "apr": {
                "key": "apr"
            },
            "dbd": {
                "key": "dbd"
            },
            "splunk": {
                "key": "splunk"
            },
            "lmdb": {
                "key": "lmdb"
            }
        },
        "extension": {
            "afw_splunk": {
                "afwCompiledVersion": "0.7.7-dev",
                "extensionId": "afw_splunk",
                "extensionVersion": "0.0.1"
            },
            "afw_lmdb": {
                "afwCompiledVersion": "0.7.7-dev",
                "extensionId": "afw_lmdb",
                "extensionVersion": "0.0.1"
            },
            "afw_authorization_policy": {
                "afwCompiledVersion": "0.7.7-dev",
                "extensionId": "afw_authorization_policy",
                "extensionVersion": "0.0.1"
            },
            "afw_sql": {
                "afwCompiledVersion": "0.7.7-dev",
                "extensionId": "afw_sql",
                "extensionVersion": "0.0.1"
            },
            "afw_ldap": {
                "afwCompiledVersion": "0.7.7-dev",
                "extensionId": "afw_ldap",
                "extensionVersion": "0.0.1"
            },
            "afw_xml": {
                "afwCompiledVersion": "0.7.7-dev",
                "extensionId": "afw_xml",
                "extensionVersion": "0.0.1"
            },
            "afw_ubjson": {
                "afwCompiledVersion": "0.7.7-dev",
                "extensionId": "afw_ubjson",
                "extensionVersion": "0.0.1"
            },
            "afw_yaml": {
                "afwCompiledVersion": "0.7.7-dev",
                "extensionId": "afw_yaml",
                "extensionVersion": "0.0.1"
            },
            "afw_xacml": {
                "afwCompiledVersion": "0.7.7-dev",
                "extensionId": "afw_xacml",
                "extensionVersion": "0.0.1"
            },
            "afw_components": {
                "afwCompiledVersion": "0.7.7-dev",
                "extensionId": "afw_components",
                "extensionVersion": "0.1.0"
            },
            "afw_dbd": {
                "afwCompiledVersion": "0.7.7-dev",
                "extensionId": "afw_dbd",
                "extensionVersion": "0.0.1"
            }
        },
        "flag": {
            "trace:adaptorId:auth:detail": {
                "applicableFlags": [
                    "trace:adaptorId:auth:detail",
                    "trace:adaptorId:auth"
                ],
                "brief": "Detail trace of adaptor id auth",
                "description": "This produces a basic plus detail trace of adaptor id auth.",
                "flagId": "trace:adaptorId:auth:detail",
                "flagIndex": 57,
                "includedByFlags": [
                    "trace:adaptorType:file:detail"
                ],
                "includesFlags": [
                    "trace:adaptorId:auth"
                ]
            },
            "trace:adaptorId:tier:detail": {
                "applicableFlags": [
                    "trace:adaptorId:tier:detail",
                    "trace:adaptorId:tier"
                ],
                "brief": "Detail trace of adaptor id tier",
                "description": "This produces a basic plus detail trace of adaptor id tier.",
                "flagId": "trace:adaptorId:tier:detail",
                "flagIndex": 59,
                "includedByFlags": [
                    "trace:adaptorType:model:detail"
                ],
                "includesFlags": [
                    "trace:adaptorId:tier"
                ]
            },
            "trace:adaptorType:dbd_mysql:detail": {
                "applicableFlags": [
                    "trace:adaptorType:dbd_mysql:detail",
                    "trace:adaptorType:dbd_mysql"
                ],
                "brief": "Debug trace adaptor type dbd_mysql",
                "description": "This produces a basic plus additional detail trace for all adaptors of type dbd_mysql.",
                "flagId": "trace:adaptorType:dbd_mysql:detail",
                "flagIndex": 49,
                "includedByFlags": [
                    "trace:adaptor:detail"
                ],
                "includesFlags": [
                    "trace:adaptorType:dbd_mysql"
                ]
            },
            "trace:adaptorType:lmdb:detail": {
                "applicableFlags": [
                    "trace:adaptorType:lmdb:detail",
                    "trace:adaptorType:lmdb",
                    "trace:adaptorId:lmdb:detail",
                    "trace:adaptorId:lmdb"
                ],
                "brief": "Debug trace adaptor type lmdb",
                "description": "This produces a basic plus additional detail trace for all adaptors of type lmdb.",
                "flagId": "trace:adaptorType:lmdb:detail",
                "flagIndex": 47,
                "includedByFlags": [
                    "trace:adaptor:detail"
                ],
                "includesFlags": [
                    "trace:adaptorType:lmdb",
                    "trace:adaptorId:lmdb:detail"
                ]
            },
            "trace:detail": {
                "applicableFlags": [
                    "trace:detail",
                    "trace",
                    "trace:adaptor:detail",
                    "trace:adaptor",
                    "trace:authorizationHandler:detail",
                    "trace:authorizationHandler",
                    "trace:evaluation:detail",
                    "trace:request:detail",
                    "trace:request",
                    "trace:adaptorType:afw_runtime:detail",
                    "trace:adaptorType:afw_runtime",
                    "trace:adaptorId:afw:detail",
                    "trace:adaptorId:afw",
                    "trace:adaptorType:file:detail",
                    "trace:adaptorType:file",
                    "trace:adaptorType:model:detail",
                    "trace:adaptorType:model",
                    "trace:authorizationHandlerType:script:detail",
                    "trace:authorizationHandlerType:script",
                    "trace:authorization:detail",
                    "trace:authorization",
                    "trace:authorization:bypass",
                    "trace:authorization:check:detail",
                    "trace:authorization:check",
                    "trace:authorization:decision:detail",
                    "trace:authorization:decision",
                    "trace:adaptorId:conf:detail",
                    "trace:adaptorId:conf",
                    "trace:authorizationHandlerType:policy:detail",
                    "trace:authorizationHandlerType:policy",
                    "trace:authorizationHandlerType:xacml:detail",
                    "trace:authorizationHandlerType:xacml",
                    "trace:adaptorType:ldap:detail",
                    "trace:adaptorType:ldap",
                    "trace:adaptorType:lmdb:detail",
                    "trace:adaptorType:lmdb",
                    "trace:adaptorType:dbd_mysql:detail",
                    "trace:adaptorType:dbd_mysql",
                    "trace:adaptorType:sql:detail",
                    "trace:adaptorType:sql",
                    "trace:adaptorId:layouts:detail",
                    "trace:adaptorId:layouts",
                    "trace:adaptorId:models:detail",
                    "trace:adaptorId:models",
                    "trace:adaptorId:auth:detail",
                    "trace:adaptorId:auth",
                    "trace:adaptorId:tier:detail",
                    "trace:adaptorId:tier",
                    "trace:authorizationHandlerId:auth-script:detail",
                    "trace:authorizationHandlerId:auth-script",
                    "trace:adaptorId:files:detail",
                    "trace:adaptorId:files",
                    "trace:adaptorId:lmdb:detail",
                    "trace:adaptorId:lmdb",
                    "trace:adaptorId:dev:detail",
                    "trace:adaptorId:dev",
                    "trace:server",
                    "trace:server:request",
                    "trace:server:request:process"
                ],
                "brief": "All detail traces",
                "description": "This produces all basic plus additional detail traces.",
                "flagId": "trace:detail",
                "flagIndex": 13,
                "includesFlags": [
                    "trace",
                    "trace:adaptor:detail",
                    "trace:authorizationHandler:detail",
                    "trace:evaluation:detail",
                    "trace:request:detail",
                    "trace:authorization:detail"
                ]
            },
            "trace:server": {
                "applicableFlags": [
                    "trace:server",
                    "trace:server:request",
                    "trace:server:request:process"
                ],
                "brief": "Server related flags",
                "description": "This includes all trace:server related flags.",
                "flagId": "trace:server",
                "flagIndex": 69,
                "includedByFlags": [
                    "trace"
                ],
                "includesFlags": [
                    "trace:server:request"
                ]
            },
            "trace:authorization:decision": {
                "applicableFlags": [
                    "trace:authorization:decision"
                ],
                "brief": "Basic trace for authorization check call's decision",
                "description": "This produces basic traces for authorization check call's decision.",
                "flagId": "trace:authorization:decision",
                "flagIndex": 38,
                "includedByFlags": [
                    "trace:authorization",
                    "trace:authorization:decision:detail"
                ]
            },
            "response:error:backtraceEvaluation": {
                "applicableFlags": [
                    "response:error:backtraceEvaluation",
                    "response:error:hasAdditionalDetail"
                ],
                "brief": "Include evaluation backtrace",
                "description": "Include evaluation backtrace in error responses.",
                "flagId": "response:error:backtraceEvaluation",
                "flagIndex": 7,
                "includedByFlags": [
                    "response:error"
                ],
                "includesFlags": [
                    "response:error:hasAdditionalDetail"
                ]
            },
            "trace:adaptorId:models:detail": {
                "applicableFlags": [
                    "trace:adaptorId:models:detail",
                    "trace:adaptorId:models"
                ],
                "brief": "Detail trace of adaptor id models",
                "description": "This produces a basic plus detail trace of adaptor id models.",
                "flagId": "trace:adaptorId:models:detail",
                "flagIndex": 55,
                "includedByFlags": [
                    "trace:adaptorType:file:detail"
                ],
                "includesFlags": [
                    "trace:adaptorId:models"
                ]
            },
            "trace:adaptorId:tier": {
                "applicableFlags": [
                    "trace:adaptorId:tier"
                ],
                "brief": "Trace adaptor id tier",
                "description": "This produces a basic trace of adaptor id tier.",
                "flagId": "trace:adaptorId:tier",
                "flagIndex": 60,
                "includedByFlags": [
                    "trace:adaptorType:model",
                    "trace:adaptorId:tier:detail"
                ]
            },
            "trace:adaptorType:dbd_mysql": {
                "applicableFlags": [
                    "trace:adaptorType:dbd_mysql"
                ],
                "brief": "Trace adaptor type dbd_mysql",
                "description": "This produces a basic trace of all adaptors of type dbd_mysql.",
                "flagId": "trace:adaptorType:dbd_mysql",
                "flagIndex": 50,
                "includedByFlags": [
                    "trace:adaptor",
                    "trace:adaptorType:dbd_mysql:detail"
                ]
            },
            "trace:adaptorType:lmdb": {
                "applicableFlags": [
                    "trace:adaptorType:lmdb",
                    "trace:adaptorId:lmdb"
                ],
                "brief": "Trace adaptor type lmdb",
                "description": "This produces a basic trace of all adaptors of type lmdb.",
                "flagId": "trace:adaptorType:lmdb",
                "flagIndex": 48,
                "includedByFlags": [
                    "trace:adaptor",
                    "trace:adaptorType:lmdb:detail"
                ],
                "includesFlags": [
                    "trace:adaptorId:lmdb"
                ]
            },
            "trace:authorization:decision:detail": {
                "applicableFlags": [
                    "trace:authorization:decision:detail",
                    "trace:authorization:decision"
                ],
                "brief": "Detail trace for authorization check call's decision",
                "description": "This produces all basic plus additional detail traces for authorization check call's decision.",
                "flagId": "trace:authorization:decision:detail",
                "flagIndex": 37,
                "includedByFlags": [
                    "trace:authorization:detail"
                ],
                "includesFlags": [
                    "trace:authorization:decision"
                ]
            },
            "trace": {
                "applicableFlags": [
                    "trace",
                    "trace:adaptor",
                    "trace:authorizationHandler",
                    "trace:request",
                    "trace:adaptorType:afw_runtime",
                    "trace:adaptorId:afw",
                    "trace:adaptorType:file",
                    "trace:adaptorType:model",
                    "trace:authorizationHandlerType:script",
                    "trace:authorization",
                    "trace:authorization:bypass",
                    "trace:authorization:check",
                    "trace:authorization:decision",
                    "trace:adaptorId:conf",
                    "trace:authorizationHandlerType:policy",
                    "trace:authorizationHandlerType:xacml",
                    "trace:adaptorType:ldap",
                    "trace:adaptorType:lmdb",
                    "trace:adaptorType:dbd_mysql",
                    "trace:adaptorType:sql",
                    "trace:adaptorId:layouts",
                    "trace:adaptorId:models",
                    "trace:adaptorId:auth",
                    "trace:adaptorId:tier",
                    "trace:authorizationHandlerId:auth-script",
                    "trace:adaptorId:files",
                    "trace:adaptorId:lmdb",
                    "trace:adaptorId:dev",
                    "trace:server",
                    "trace:server:request",
                    "trace:server:request:process"
                ],
                "brief": "Basic traces",
                "description": "This produces all basic traces.",
                "flagId": "trace",
                "flagIndex": 14,
                "includedByFlags": [
                    "trace:detail"
                ],
                "includesFlags": [
                    "trace:adaptor",
                    "trace:authorizationHandler",
                    "trace:request",
                    "trace:authorization",
                    "trace:server"
                ]
            },
            "debug:detail": {
                "applicableFlags": [
                    "debug:detail",
                    "debug",
                    "debug:function_active:detail",
                    "debug:function_active"
                ],
                "brief": "Debug detail",
                "description": "This triggers all basic plus detail debugging.",
                "flagId": "debug:detail",
                "flagIndex": 1,
                "includesFlags": [
                    "debug",
                    "debug:function_active:detail",
                    "debug:function_active"
                ]
            },
            "trace:adaptor": {
                "applicableFlags": [
                    "trace:adaptor",
                    "trace:adaptorType:afw_runtime",
                    "trace:adaptorId:afw",
                    "trace:adaptorType:file",
                    "trace:adaptorType:model",
                    "trace:adaptorId:conf",
                    "trace:adaptorType:ldap",
                    "trace:adaptorType:lmdb",
                    "trace:adaptorType:dbd_mysql",
                    "trace:adaptorType:sql",
                    "trace:adaptorId:layouts",
                    "trace:adaptorId:models",
                    "trace:adaptorId:auth",
                    "trace:adaptorId:tier",
                    "trace:adaptorId:files",
                    "trace:adaptorId:lmdb",
                    "trace:adaptorId:dev"
                ],
                "brief": "Basic trace for all adaptors",
                "description": "This produces basic traces for all adaptors.",
                "flagId": "trace:adaptor",
                "flagIndex": 16,
                "includedByFlags": [
                    "trace",
                    "trace:adaptor:detail"
                ],
                "includesFlags": [
                    "trace:adaptorType:afw_runtime",
                    "trace:adaptorType:file",
                    "trace:adaptorType:model",
                    "trace:adaptorType:ldap",
                    "trace:adaptorType:lmdb",
                    "trace:adaptorType:dbd_mysql",
                    "trace:adaptorType:sql"
                ]
            },
            "response:error:hasAdditionalDetail": {
                "applicableFlags": [
                    "response:error:hasAdditionalDetail"
                ],
                "brief": "Active if any other response:error flags are active",
                "description": "This flag can be tested to determine if any other response:error flags are active.  This flag should not normally be directly set.",
                "flagId": "response:error:hasAdditionalDetail",
                "flagIndex": 9,
                "includedByFlags": [
                    "response:error",
                    "response:error:backtrace",
                    "response:error:backtraceEvaluation",
                    "response:error:contextual"
                ]
            },
            "trace:authorizationHandler": {
                "applicableFlags": [
                    "trace:authorizationHandler",
                    "trace:authorizationHandlerType:script",
                    "trace:authorizationHandlerType:policy",
                    "trace:authorizationHandlerType:xacml",
                    "trace:authorizationHandlerId:auth-script"
                ],
                "brief": "Basic trace for all authorizationHandler",
                "description": "This produces basic traces for all authorizationHandler.",
                "flagId": "trace:authorizationHandler",
                "flagIndex": 18,
                "includedByFlags": [
                    "trace",
                    "trace:authorizationHandler:detail"
                ],
                "includesFlags": [
                    "trace:authorizationHandlerType:script",
                    "trace:authorizationHandlerType:policy",
                    "trace:authorizationHandlerType:xacml"
                ]
            },
            "trace:adaptorId:afw": {
                "applicableFlags": [
                    "trace:adaptorId:afw"
                ],
                "brief": "Trace adaptor id afw",
                "description": "This produces a basic trace of adaptor id afw.",
                "flagId": "trace:adaptorId:afw",
                "flagIndex": 25,
                "includedByFlags": [
                    "trace:adaptorType:afw_runtime",
                    "trace:adaptorId:afw:detail"
                ]
            },
            "trace:authorization": {
                "applicableFlags": [
                    "trace:authorization",
                    "trace:authorization:bypass",
                    "trace:authorization:check",
                    "trace:authorization:decision"
                ],
                "brief": "Basic trace for authorization",
                "description": "This produces basic traces for authorization.",
                "flagId": "trace:authorization",
                "flagIndex": 33,
                "includedByFlags": [
                    "trace",
                    "trace:authorization:detail"
                ],
                "includesFlags": [
                    "trace:authorization:bypass",
                    "trace:authorization:check",
                    "trace:authorization:decision"
                ]
            },
            "response:console": {
                "applicableFlags": [
                    "response:console"
                ],
                "brief": "Request will have console property with console output",
                "description": "If anything is written to console during request, include it in the \"console\" property of response.",
                "flagId": "response:console",
                "flagIndex": 10
            },
            "trace:server:request:process": {
                "applicableFlags": [
                    "trace:server:request:process"
                ],
                "brief": "Trace process request begin and end",
                "description": "This traces the begin and end of processing for requests.",
                "flagId": "trace:server:request:process",
                "flagIndex": 71,
                "includedByFlags": [
                    "trace:server:request"
                ]
            },
            "trace:adaptorType:file:detail": {
                "applicableFlags": [
                    "trace:adaptorType:file:detail",
                    "trace:adaptorType:file",
                    "trace:adaptorId:conf:detail",
                    "trace:adaptorId:conf",
                    "trace:adaptorId:layouts:detail",
                    "trace:adaptorId:layouts",
                    "trace:adaptorId:models:detail",
                    "trace:adaptorId:models",
                    "trace:adaptorId:auth:detail",
                    "trace:adaptorId:auth",
                    "trace:adaptorId:files:detail",
                    "trace:adaptorId:files",
                    "trace:adaptorId:dev:detail",
                    "trace:adaptorId:dev"
                ],
                "brief": "Debug trace adaptor type file",
                "description": "This produces a basic plus additional detail trace for all adaptors of type file.",
                "flagId": "trace:adaptorType:file:detail",
                "flagIndex": 26,
                "includedByFlags": [
                    "trace:adaptor:detail"
                ],
                "includesFlags": [
                    "trace:adaptorType:file",
                    "trace:adaptorId:conf:detail",
                    "trace:adaptorId:layouts:detail",
                    "trace:adaptorId:models:detail",
                    "trace:adaptorId:auth:detail",
                    "trace:adaptorId:files:detail",
                    "trace:adaptorId:dev:detail"
                ]
            },
            "trace:adaptorType:ldap:detail": {
                "applicableFlags": [
                    "trace:adaptorType:ldap:detail",
                    "trace:adaptorType:ldap"
                ],
                "brief": "Debug trace adaptor type ldap",
                "description": "This produces a basic plus additional detail trace for all adaptors of type ldap.",
                "flagId": "trace:adaptorType:ldap:detail",
                "flagIndex": 45,
                "includedByFlags": [
                    "trace:adaptor:detail"
                ],
                "includesFlags": [
                    "trace:adaptorType:ldap"
                ]
            },
            "trace:adaptorId:models": {
                "applicableFlags": [
                    "trace:adaptorId:models"
                ],
                "brief": "Trace adaptor id models",
                "description": "This produces a basic trace of adaptor id models.",
                "flagId": "trace:adaptorId:models",
                "flagIndex": 56,
                "includedByFlags": [
                    "trace:adaptorType:file",
                    "trace:adaptorId:models:detail"
                ]
            },
            "trace:adaptorType:sql": {
                "applicableFlags": [
                    "trace:adaptorType:sql"
                ],
                "brief": "Trace adaptor type sql",
                "description": "This produces a basic trace of all adaptors of type sql.",
                "flagId": "trace:adaptorType:sql",
                "flagIndex": 52,
                "includedByFlags": [
                    "trace:adaptor",
                    "trace:adaptorType:sql:detail"
                ]
            },
            "trace:server:request": {
                "applicableFlags": [
                    "trace:server:request",
                    "trace:server:request:process"
                ],
                "brief": "Trace server request",
                "description": "This includes all trace:server:request related flags.",
                "flagId": "trace:server:request",
                "flagIndex": 70,
                "includedByFlags": [
                    "trace:server"
                ],
                "includesFlags": [
                    "trace:server:request:process"
                ]
            },
            "trace:authorization:detail": {
                "applicableFlags": [
                    "trace:authorization:detail",
                    "trace:authorization",
                    "trace:authorization:bypass",
                    "trace:authorization:check:detail",
                    "trace:authorization:check",
                    "trace:authorization:decision:detail",
                    "trace:authorization:decision"
                ],
                "brief": "Detail trace for authorization",
                "description": "This produces all basic plus additional detail traces for authorization.",
                "flagId": "trace:authorization:detail",
                "flagIndex": 32,
                "includedByFlags": [
                    "trace:detail"
                ],
                "includesFlags": [
                    "trace:authorization",
                    "trace:authorization:check:detail",
                    "trace:authorization:decision:detail"
                ]
            },
            "debug": {
                "applicableFlags": [
                    "debug",
                    "debug:function_active"
                ],
                "brief": "Basic debug flag",
                "description": "This triggers all basic debugging.",
                "flagId": "debug",
                "flagIndex": 2,
                "includedByFlags": [
                    "debug:detail"
                ],
                "includesFlags": [
                    "debug:function_active"
                ]
            },
            "trace:authorizationHandlerType:script": {
                "applicableFlags": [
                    "trace:authorizationHandlerType:script",
                    "trace:authorizationHandlerId:auth-script"
                ],
                "brief": "Trace authorizationHandler type script",
                "description": "This produces a basic trace of all authorizationHandlers of type script.",
                "flagId": "trace:authorizationHandlerType:script",
                "flagIndex": 31,
                "includedByFlags": [
                    "trace:authorizationHandler",
                    "trace:authorizationHandlerType:script:detail"
                ],
                "includesFlags": [
                    "trace:authorizationHandlerId:auth-script"
                ]
            },
            "response:stdout": {
                "applicableFlags": [
                    "response:stdout"
                ],
                "brief": "Request will have stdout property with stdout output",
                "description": "If anything is written to stdout during request, include it in the \"stdout\" property of response.",
                "flagId": "response:stdout",
                "flagIndex": 12
            },
            "trace:adaptorId:files": {
                "applicableFlags": [
                    "trace:adaptorId:files"
                ],
                "brief": "Trace adaptor id files",
                "description": "This produces a basic trace of adaptor id files.",
                "flagId": "trace:adaptorId:files",
                "flagIndex": 64,
                "includedByFlags": [
                    "trace:adaptorType:file",
                    "trace:adaptorId:files:detail"
                ]
            },
            "trace:authorizationHandlerType:policy:detail": {
                "applicableFlags": [
                    "trace:authorizationHandlerType:policy:detail",
                    "trace:authorizationHandlerType:policy"
                ],
                "brief": "Debug trace authorizationHandler type policy",
                "description": "This produces a basic plus additional detail trace for all authorizationHandlers of type policy.",
                "flagId": "trace:authorizationHandlerType:policy:detail",
                "flagIndex": 41,
                "includedByFlags": [
                    "trace:authorizationHandler:detail"
                ],
                "includesFlags": [
                    "trace:authorizationHandlerType:policy"
                ]
            },
            "trace:adaptorType:afw_runtime": {
                "applicableFlags": [
                    "trace:adaptorType:afw_runtime",
                    "trace:adaptorId:afw"
                ],
                "brief": "Trace adaptor type afw_runtime",
                "description": "This produces a basic trace of all adaptors of type afw_runtime.",
                "flagId": "trace:adaptorType:afw_runtime",
                "flagIndex": 23,
                "includedByFlags": [
                    "trace:adaptor",
                    "trace:adaptorType:afw_runtime:detail"
                ],
                "includesFlags": [
                    "trace:adaptorId:afw"
                ]
            },
            "trace:authorization:check": {
                "applicableFlags": [
                    "trace:authorization:check"
                ],
                "brief": "Basic trace for authorization check call",
                "description": "This produces basic traces for authorization check call.",
                "flagId": "trace:authorization:check",
                "flagIndex": 36,
                "includedByFlags": [
                    "trace:authorization",
                    "trace:authorization:check:detail"
                ]
            },
            "trace:request": {
                "applicableFlags": [
                    "trace:request"
                ],
                "brief": "Basic trace for all requests",
                "description": "This produces basic traces for all requests.",
                "flagId": "trace:request",
                "flagIndex": 21,
                "includedByFlags": [
                    "trace",
                    "trace:request:detail"
                ]
            },
            "response:error": {
                "applicableFlags": [
                    "response:error",
                    "response:error:backtrace",
                    "response:error:backtraceEvaluation",
                    "response:error:contextual",
                    "response:error:hasAdditionalDetail"
                ],
                "brief": "Include backtrace, backtraceEvaluation, and contextual",
                "description": "Include backtrace, backtraceEvaluation, and contextual in error responses.",
                "flagId": "response:error",
                "flagIndex": 5,
                "includesFlags": [
                    "response:error:backtrace",
                    "response:error:backtraceEvaluation",
                    "response:error:contextual",
                    "response:error:hasAdditionalDetail"
                ]
            },
            "response:error:contextual": {
                "applicableFlags": [
                    "response:error:contextual",
                    "response:error:hasAdditionalDetail"
                ],
                "brief": "Include contextual",
                "description": "Include contextual information in error responses.",
                "flagId": "response:error:contextual",
                "flagIndex": 8,
                "includedByFlags": [
                    "response:error"
                ],
                "includesFlags": [
                    "response:error:hasAdditionalDetail"
                ]
            },
            "trace:adaptorId:layouts:detail": {
                "applicableFlags": [
                    "trace:adaptorId:layouts:detail",
                    "trace:adaptorId:layouts"
                ],
                "brief": "Detail trace of adaptor id layouts",
                "description": "This produces a basic plus detail trace of adaptor id layouts.",
                "flagId": "trace:adaptorId:layouts:detail",
                "flagIndex": 53,
                "includedByFlags": [
                    "trace:adaptorType:file:detail"
                ],
                "includesFlags": [
                    "trace:adaptorId:layouts"
                ]
            },
            "trace:adaptorId:dev": {
                "applicableFlags": [
                    "trace:adaptorId:dev"
                ],
                "brief": "Trace adaptor id dev",
                "description": "This produces a basic trace of adaptor id dev.",
                "flagId": "trace:adaptorId:dev",
                "flagIndex": 68,
                "includedByFlags": [
                    "trace:adaptorType:file",
                    "trace:adaptorId:dev:detail"
                ]
            },
            "trace:adaptorId:files:detail": {
                "applicableFlags": [
                    "trace:adaptorId:files:detail",
                    "trace:adaptorId:files"
                ],
                "brief": "Detail trace of adaptor id files",
                "description": "This produces a basic plus detail trace of adaptor id files.",
                "flagId": "trace:adaptorId:files:detail",
                "flagIndex": 63,
                "includedByFlags": [
                    "trace:adaptorType:file:detail"
                ],
                "includesFlags": [
                    "trace:adaptorId:files"
                ]
            },
            "response:stderr": {
                "applicableFlags": [
                    "response:stderr"
                ],
                "brief": "Request will have stderr property with stderr output",
                "description": "If anything is written to stderr during request, include it in the \"stderr\" property of response.",
                "flagId": "response:stderr",
                "flagIndex": 11
            },
            "trace:authorization:check:detail": {
                "applicableFlags": [
                    "trace:authorization:check:detail",
                    "trace:authorization:check"
                ],
                "brief": "Detail trace for authorization check call",
                "description": "This produces all basic plus additional detail traces for authorization check calls.",
                "flagId": "trace:authorization:check:detail",
                "flagIndex": 35,
                "includedByFlags": [
                    "trace:authorization:detail"
                ],
                "includesFlags": [
                    "trace:authorization:check"
                ]
            },
            "trace:request:detail": {
                "applicableFlags": [
                    "trace:request:detail",
                    "trace:request"
                ],
                "brief": "Detail trace for all requests",
                "description": "This produces all basic plus additional detail traces for all requests.",
                "flagId": "trace:request:detail",
                "flagIndex": 20,
                "includedByFlags": [
                    "trace:detail"
                ],
                "includesFlags": [
                    "trace:request"
                ]
            },
            "trace:authorizationHandlerId:auth-script:detail": {
                "applicableFlags": [
                    "trace:authorizationHandlerId:auth-script:detail",
                    "trace:authorizationHandlerId:auth-script"
                ],
                "brief": "Detail trace of authorizationHandlerId auth-script",
                "description": "This produces a basic plus detail trace of authorizationHandlerId auth-script.",
                "flagId": "trace:authorizationHandlerId:auth-script:detail",
                "flagIndex": 61,
                "includedByFlags": [
                    "trace:authorizationHandlerType:script:detail"
                ],
                "includesFlags": [
                    "trace:authorizationHandlerId:auth-script"
                ]
            },
            "trace:adaptorId:conf": {
                "applicableFlags": [
                    "trace:adaptorId:conf"
                ],
                "brief": "Trace adaptor id conf",
                "description": "This produces a basic trace of adaptor id conf.",
                "flagId": "trace:adaptorId:conf",
                "flagIndex": 40,
                "includedByFlags": [
                    "trace:adaptorType:file",
                    "trace:adaptorId:conf:detail"
                ]
            },
            "trace:adaptorType:model": {
                "applicableFlags": [
                    "trace:adaptorType:model",
                    "trace:adaptorId:tier"
                ],
                "brief": "Trace adaptor type model",
                "description": "This produces a basic trace of all adaptors of type model.",
                "flagId": "trace:adaptorType:model",
                "flagIndex": 29,
                "includedByFlags": [
                    "trace:adaptor",
                    "trace:adaptorType:model:detail"
                ],
                "includesFlags": [
                    "trace:adaptorId:tier"
                ]
            },
            "trace:authorization:bypass": {
                "applicableFlags": [
                    "trace:authorization:bypass"
                ],
                "brief": "Basic trace for authorization check call bypasses",
                "description": "This produces traces for authorization check call bypasses.",
                "flagId": "trace:authorization:bypass",
                "flagIndex": 34,
                "includedByFlags": [
                    "trace:authorization"
                ]
            },
            "trace:adaptorId:afw:detail": {
                "applicableFlags": [
                    "trace:adaptorId:afw:detail",
                    "trace:adaptorId:afw"
                ],
                "brief": "Detail trace of adaptor id afw",
                "description": "This produces a basic plus detail trace of adaptor id afw.",
                "flagId": "trace:adaptorId:afw:detail",
                "flagIndex": 24,
                "includedByFlags": [
                    "trace:adaptorType:afw_runtime:detail"
                ],
                "includesFlags": [
                    "trace:adaptorId:afw"
                ]
            },
            "trace:adaptorId:dev:detail": {
                "applicableFlags": [
                    "trace:adaptorId:dev:detail",
                    "trace:adaptorId:dev"
                ],
                "brief": "Detail trace of adaptor id dev",
                "description": "This produces a basic plus detail trace of adaptor id dev.",
                "flagId": "trace:adaptorId:dev:detail",
                "flagIndex": 67,
                "includedByFlags": [
                    "trace:adaptorType:file:detail"
                ],
                "includesFlags": [
                    "trace:adaptorId:dev"
                ]
            },
            "trace:authorizationHandlerType:xacml": {
                "applicableFlags": [
                    "trace:authorizationHandlerType:xacml"
                ],
                "brief": "Trace authorizationHandler type xacml",
                "description": "This produces a basic trace of all authorizationHandlers of type xacml.",
                "flagId": "trace:authorizationHandlerType:xacml",
                "flagIndex": 44,
                "includedByFlags": [
                    "trace:authorizationHandler",
                    "trace:authorizationHandlerType:xacml:detail"
                ]
            },
            "trace:adaptorId:auth": {
                "applicableFlags": [
                    "trace:adaptorId:auth"
                ],
                "brief": "Trace adaptor id auth",
                "description": "This produces a basic trace of adaptor id auth.",
                "flagId": "trace:adaptorId:auth",
                "flagIndex": 58,
                "includedByFlags": [
                    "trace:adaptorType:file",
                    "trace:adaptorId:auth:detail"
                ]
            },
            "trace:evaluation:detail": {
                "applicableFlags": [
                    "trace:evaluation:detail"
                ],
                "brief": "Detail trace for evaluations",
                "description": "This produces detail traces for adaptive value evaluations.",
                "flagId": "trace:evaluation:detail",
                "flagIndex": 19,
                "includedByFlags": [
                    "trace:detail"
                ]
            },
            "trace:adaptorType:file": {
                "applicableFlags": [
                    "trace:adaptorType:file",
                    "trace:adaptorId:conf",
                    "trace:adaptorId:layouts",
                    "trace:adaptorId:models",
                    "trace:adaptorId:auth",
                    "trace:adaptorId:files",
                    "trace:adaptorId:dev"
                ],
                "brief": "Trace adaptor type file",
                "description": "This produces a basic trace of all adaptors of type file.",
                "flagId": "trace:adaptorType:file",
                "flagIndex": 27,
                "includedByFlags": [
                    "trace:adaptor",
                    "trace:adaptorType:file:detail"
                ],
                "includesFlags": [
                    "trace:adaptorId:conf",
                    "trace:adaptorId:layouts",
                    "trace:adaptorId:models",
                    "trace:adaptorId:auth",
                    "trace:adaptorId:files",
                    "trace:adaptorId:dev"
                ]
            },
            "trace:authorizationHandlerId:auth-script": {
                "applicableFlags": [
                    "trace:authorizationHandlerId:auth-script"
                ],
                "brief": "Trace authorizationHandlerId auth-script",
                "description": "This produces a basic trace of authorizationHandlerId auth-script.",
                "flagId": "trace:authorizationHandlerId:auth-script",
                "flagIndex": 62,
                "includedByFlags": [
                    "trace:authorizationHandlerType:script",
                    "trace:authorizationHandlerId:auth-script:detail"
                ]
            },
            "trace:authorizationHandlerType:script:detail": {
                "applicableFlags": [
                    "trace:authorizationHandlerType:script:detail",
                    "trace:authorizationHandlerType:script",
                    "trace:authorizationHandlerId:auth-script:detail",
                    "trace:authorizationHandlerId:auth-script"
                ],
                "brief": "Debug trace authorizationHandler type script",
                "description": "This produces a basic plus additional detail trace for all authorizationHandlers of type script.",
                "flagId": "trace:authorizationHandlerType:script:detail",
                "flagIndex": 30,
                "includedByFlags": [
                    "trace:authorizationHandler:detail"
                ],
                "includesFlags": [
                    "trace:authorizationHandlerType:script",
                    "trace:authorizationHandlerId:auth-script:detail"
                ]
            },
            "trace:adaptorId:lmdb": {
                "applicableFlags": [
                    "trace:adaptorId:lmdb"
                ],
                "brief": "Trace adaptor id lmdb",
                "description": "This produces a basic trace of adaptor id lmdb.",
                "flagId": "trace:adaptorId:lmdb",
                "flagIndex": 66,
                "includedByFlags": [
                    "trace:adaptorType:lmdb",
                    "trace:adaptorId:lmdb:detail"
                ]
            },
            "trace:adaptorType:afw_runtime:detail": {
                "applicableFlags": [
                    "trace:adaptorType:afw_runtime:detail",
                    "trace:adaptorType:afw_runtime",
                    "trace:adaptorId:afw:detail",
                    "trace:adaptorId:afw"
                ],
                "brief": "Debug trace adaptor type afw_runtime",
                "description": "This produces a basic plus additional detail trace for all adaptors of type afw_runtime.",
                "flagId": "trace:adaptorType:afw_runtime:detail",
                "flagIndex": 22,
                "includedByFlags": [
                    "trace:adaptor:detail"
                ],
                "includesFlags": [
                    "trace:adaptorType:afw_runtime",
                    "trace:adaptorId:afw:detail"
                ]
            },
            "trace:adaptor:detail": {
                "applicableFlags": [
                    "trace:adaptor:detail",
                    "trace:adaptor",
                    "trace:adaptorType:afw_runtime:detail",
                    "trace:adaptorType:afw_runtime",
                    "trace:adaptorId:afw:detail",
                    "trace:adaptorId:afw",
                    "trace:adaptorType:file:detail",
                    "trace:adaptorType:file",
                    "trace:adaptorType:model:detail",
                    "trace:adaptorType:model",
                    "trace:adaptorId:conf:detail",
                    "trace:adaptorId:conf",
                    "trace:adaptorType:ldap:detail",
                    "trace:adaptorType:ldap",
                    "trace:adaptorType:lmdb:detail",
                    "trace:adaptorType:lmdb",
                    "trace:adaptorType:dbd_mysql:detail",
                    "trace:adaptorType:dbd_mysql",
                    "trace:adaptorType:sql:detail",
                    "trace:adaptorType:sql",
                    "trace:adaptorId:layouts:detail",
                    "trace:adaptorId:layouts",
                    "trace:adaptorId:models:detail",
                    "trace:adaptorId:models",
                    "trace:adaptorId:auth:detail",
                    "trace:adaptorId:auth",
                    "trace:adaptorId:tier:detail",
                    "trace:adaptorId:tier",
                    "trace:adaptorId:files:detail",
                    "trace:adaptorId:files",
                    "trace:adaptorId:lmdb:detail",
                    "trace:adaptorId:lmdb",
                    "trace:adaptorId:dev:detail",
                    "trace:adaptorId:dev"
                ],
                "brief": "Detail trace for all adaptors",
                "description": "This produces all basic plus additional detail traces for all adaptors.",
                "flagId": "trace:adaptor:detail",
                "flagIndex": 15,
                "includedByFlags": [
                    "trace:detail"
                ],
                "includesFlags": [
                    "trace:adaptor",
                    "trace:adaptorType:afw_runtime:detail",
                    "trace:adaptorType:file:detail",
                    "trace:adaptorType:model:detail",
                    "trace:adaptorType:ldap:detail",
                    "trace:adaptorType:lmdb:detail",
                    "trace:adaptorType:dbd_mysql:detail",
                    "trace:adaptorType:sql:detail"
                ]
            },
            "debug:function_active": {
                "applicableFlags": [
                    "debug:function_active"
                ],
                "brief": "Print debug() if not detail calls",
                "description": "This causes calls to the debug() adaptive function to print if the detail parameter is not true.  If off, debug() calls are ignored.",
                "flagId": "debug:function_active",
                "flagIndex": 4,
                "includedByFlags": [
                    "debug",
                    "debug:detail",
                    "debug:function_active:detail"
                ]
            },
            "trace:authorizationHandlerType:policy": {
                "applicableFlags": [
                    "trace:authorizationHandlerType:policy"
                ],
                "brief": "Trace authorizationHandler type policy",
                "description": "This produces a basic trace of all authorizationHandlers of type policy.",
                "flagId": "trace:authorizationHandlerType:policy",
                "flagIndex": 42,
                "includedByFlags": [
                    "trace:authorizationHandler",
                    "trace:authorizationHandlerType:policy:detail"
                ]
            },
            "trace:authorizationHandler:detail": {
                "applicableFlags": [
                    "trace:authorizationHandler:detail",
                    "trace:authorizationHandler",
                    "trace:authorizationHandlerType:script:detail",
                    "trace:authorizationHandlerType:script",
                    "trace:authorizationHandlerType:policy:detail",
                    "trace:authorizationHandlerType:policy",
                    "trace:authorizationHandlerType:xacml:detail",
                    "trace:authorizationHandlerType:xacml",
                    "trace:authorizationHandlerId:auth-script:detail",
                    "trace:authorizationHandlerId:auth-script"
                ],
                "brief": "Detail trace for all authorizationHandlers",
                "description": "This produces all basic plus additional detail traces for all authorizationHandlers.",
                "flagId": "trace:authorizationHandler:detail",
                "flagIndex": 17,
                "includedByFlags": [
                    "trace:detail"
                ],
                "includesFlags": [
                    "trace:authorizationHandler",
                    "trace:authorizationHandlerType:script:detail",
                    "trace:authorizationHandlerType:policy:detail",
                    "trace:authorizationHandlerType:xacml:detail"
                ]
            },
            "trace:adaptorId:lmdb:detail": {
                "applicableFlags": [
                    "trace:adaptorId:lmdb:detail",
                    "trace:adaptorId:lmdb"
                ],
                "brief": "Detail trace of adaptor id lmdb",
                "description": "This produces a basic plus detail trace of adaptor id lmdb.",
                "flagId": "trace:adaptorId:lmdb:detail",
                "flagIndex": 65,
                "includedByFlags": [
                    "trace:adaptorType:lmdb:detail"
                ],
                "includesFlags": [
                    "trace:adaptorId:lmdb"
                ]
            },
            "trace:adaptorId:layouts": {
                "applicableFlags": [
                    "trace:adaptorId:layouts"
                ],
                "brief": "Trace adaptor id layouts",
                "description": "This produces a basic trace of adaptor id layouts.",
                "flagId": "trace:adaptorId:layouts",
                "flagIndex": 54,
                "includedByFlags": [
                    "trace:adaptorType:file",
                    "trace:adaptorId:layouts:detail"
                ]
            },
            "trace:adaptorType:sql:detail": {
                "applicableFlags": [
                    "trace:adaptorType:sql:detail",
                    "trace:adaptorType:sql"
                ],
                "brief": "Debug trace adaptor type sql",
                "description": "This produces a basic plus additional detail trace for all adaptors of type sql.",
                "flagId": "trace:adaptorType:sql:detail",
                "flagIndex": 51,
                "includedByFlags": [
                    "trace:adaptor:detail"
                ],
                "includesFlags": [
                    "trace:adaptorType:sql"
                ]
            },
            "response:error:backtrace": {
                "applicableFlags": [
                    "response:error:backtrace",
                    "response:error:hasAdditionalDetail"
                ],
                "brief": "Include backtrace",
                "description": "Include backtrace in error responses.",
                "flagId": "response:error:backtrace",
                "flagIndex": 6,
                "includedByFlags": [
                    "response:error"
                ],
                "includesFlags": [
                    "response:error:hasAdditionalDetail"
                ]
            },
            "trace:adaptorId:conf:detail": {
                "applicableFlags": [
                    "trace:adaptorId:conf:detail",
                    "trace:adaptorId:conf"
                ],
                "brief": "Detail trace of adaptor id conf",
                "description": "This produces a basic plus detail trace of adaptor id conf.",
                "flagId": "trace:adaptorId:conf:detail",
                "flagIndex": 39,
                "includedByFlags": [
                    "trace:adaptorType:file:detail"
                ],
                "includesFlags": [
                    "trace:adaptorId:conf"
                ]
            },
            "trace:adaptorType:model:detail": {
                "applicableFlags": [
                    "trace:adaptorType:model:detail",
                    "trace:adaptorType:model",
                    "trace:adaptorId:tier:detail",
                    "trace:adaptorId:tier"
                ],
                "brief": "Debug trace adaptor type model",
                "description": "This produces a basic plus additional detail trace for all adaptors of type model.",
                "flagId": "trace:adaptorType:model:detail",
                "flagIndex": 28,
                "includedByFlags": [
                    "trace:adaptor:detail"
                ],
                "includesFlags": [
                    "trace:adaptorType:model",
                    "trace:adaptorId:tier:detail"
                ]
            },
            "debug:function_active:detail": {
                "applicableFlags": [
                    "debug:function_active:detail",
                    "debug:function_active"
                ],
                "brief": "Print all debug() calls",
                "description": "This causes all calls to the debug() adaptive function to print.  If off, debug() calls with true specified for detail parameter are ignored.",
                "flagId": "debug:function_active:detail",
                "flagIndex": 3,
                "includedByFlags": [
                    "debug:detail"
                ],
                "includesFlags": [
                    "debug:function_active"
                ]
            },
            "unspecified": {
                "applicableFlags": [
                    "unspecified"
                ],
                "brief": "Never set",
                "description": "This is flag index 0 and is never set.",
                "flagId": "unspecified",
                "flagIndex": 0
            },
            "trace:adaptorType:ldap": {
                "applicableFlags": [
                    "trace:adaptorType:ldap"
                ],
                "brief": "Trace adaptor type ldap",
                "description": "This produces a basic trace of all adaptors of type ldap.",
                "flagId": "trace:adaptorType:ldap",
                "flagIndex": 46,
                "includedByFlags": [
                    "trace:adaptor",
                    "trace:adaptorType:ldap:detail"
                ]
            },
            "trace:authorizationHandlerType:xacml:detail": {
                "applicableFlags": [
                    "trace:authorizationHandlerType:xacml:detail",
                    "trace:authorizationHandlerType:xacml"
                ],
                "brief": "Debug trace authorizationHandler type xacml",
                "description": "This produces a basic plus additional detail trace for all authorizationHandlers of type xacml.",
                "flagId": "trace:authorizationHandlerType:xacml:detail",
                "flagIndex": 43,
                "includedByFlags": [
                    "trace:authorizationHandler:detail"
                ],
                "includesFlags": [
                    "trace:authorizationHandlerType:xacml"
                ]
            }
        },
        "function": {
            "at_least_one_member_of_integer": {
                "afwCamelCaseFunctionLabel": "afwAtLeastOneMemberOfInteger",
                "brief": "Checks for at least one value in common",
                "camelCaseFunctionLabel": "atLeastOneMemberOfInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 1,
                "deprecated": false,
                "description": "Returns boolean true if at least one value in integer list1 is in integer list2.",
                "functionId": "at_least_one_member_of<integer>",
                "functionLabel": "at_least_one_member_of_integer",
                "functionSignature": "boolean((list integer) list1, (list integer) list2)",
                "functionDeclaration": "/* Checks for at least one value in common */\nboolean (\n    (list integer) list1,\n    (list integer) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "integer",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "integer",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "add_dayTimeDuration_1_0_dateTime": {
                "afwCamelCaseFunctionLabel": "afwAddDayTimeDuration10DateTime",
                "brief": "Add duration",
                "camelCaseFunctionLabel": "addDayTimeDuration10DateTime",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Add dateTime arg1 to dayTimeDuration_1_0 arg2 and return the dateTime result.",
                "functionId": "add_dayTimeDuration_1_0<dateTime>",
                "functionLabel": "add_dayTimeDuration_1_0_dateTime",
                "functionSignature": "dateTime(dateTime arg1, dayTimeDuration_1_0 arg2)",
                "functionDeclaration": "/* Add duration */\ndateTime (\n    dateTime arg1,\n    dayTimeDuration_1_0 arg2)",
                "parameters": [
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "dayTimeDuration_1_0",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "dateTime",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "sort": {
                "afwCamelCaseFunctionLabel": "afwSort",
                "brief": "Sort values in a list",
                "camelCaseFunctionLabel": "sort",
                "category": "higher_order_array",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This produces a list with values sorted based on result of compareFunction.  The compareFunction is passed two values from the list and must return an integer less than 0 if the first value is less than the second value, 0 if they are equal, and a integer greater than 0 if the first value is greater than the second value.",
                "functionId": "sort",
                "functionLabel": "sort",
                "functionSignature": "list((function (integer)(value1, value2)) compareFunction, list list)",
                "functionDeclaration": "/* Sort values in a list */\nlist (\n    (function (integer)(value1, value2)) compareFunction,\n    list list)",
                "parameters": [
                    {
                        "dataType": "function",
                        "dataTypeParameter": "(integer)(value1, value2)",
                        "description": "This function is called with two value from list.",
                        "minArgs": -1,
                        "name": "compareFunction",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "description": "This is the list to sort.",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "description": "This the the resulting sorted list.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ne_string": {
                "afwCamelCaseFunctionLabel": "afwNeString",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "neString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 13,
                "deprecated": false,
                "description": "Checks for string arg1 is not equal to string arg2 and return the boolean result.",
                "functionId": "ne<string>",
                "functionLabel": "ne_string",
                "functionSignature": "boolean(string arg1, string arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    string arg1,\n    string arg2)",
                "op": "!=",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "random_hexBinary": {
                "afwCamelCaseFunctionLabel": "afwRandomHexBinary",
                "brief": "Generate random octets (hexBinary)",
                "camelCaseFunctionLabel": "randomHexBinary",
                "category": "random",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This returns a specified number of random octets as dataType hexBinary.",
                "functionId": "random_hexBinary",
                "functionLabel": "random_hexBinary",
                "functionSignature": "hexBinary(integer numberOfOctets)",
                "functionDeclaration": "/* Generate random octets (hexBinary) */\nhexBinary (\n    integer numberOfOctets)",
                "parameters": [
                    {
                        "dataType": "integer",
                        "description": "The number of random octets to generate.",
                        "minArgs": -1,
                        "name": "numberOfOctets",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "hexBinary",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "encode_as_hexBinary": {
                "afwCamelCaseFunctionLabel": "afwEncodeAsHexBinary",
                "brief": "Encode to a hexBinary value",
                "camelCaseFunctionLabel": "encodeAsHexBinary",
                "category": "polymorphic",
                "dataTypeMethodNumber": 58,
                "deprecated": false,
                "description": "Encode a value as a hexBinary.  The effect is to create a hexBinary value with an internal value of the value passed.",
                "functionId": "encode_as_hexBinary",
                "functionLabel": "encode_as_hexBinary",
                "functionSignature": "<Type> hexBinary(Type value)",
                "functionDeclaration": "/* Encode to a hexBinary value */\n<Type> hexBinary (\n    Type value)",
                "parameters": [
                    {
                        "description": "The <Type> value to encode.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "hexBinary",
                    "description": "A hexBinary value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ge": {
                "afwCamelCaseFunctionLabel": "afwGe",
                "brief": "Checks for greater than or equal",
                "camelCaseFunctionLabel": "ge",
                "category": "polymorphic",
                "dataTypeMethodNumber": 32,
                "deprecated": false,
                "description": "Checks for <Type> arg1 is greater than or equal to <Type> arg2 and return the boolean result.",
                "functionId": "ge",
                "functionLabel": "ge",
                "functionSignature": "<Type> boolean(Type arg1, Type arg2)",
                "functionDeclaration": "/* Checks for greater than or equal */\n<Type> boolean (\n    Type arg1,\n    Type arg2)",
                "op": ">=",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "date",
                    "dateTime",
                    "double",
                    "integer",
                    "string",
                    "time"
                ],
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_in_yearMonthDuration_1_0": {
                "afwCamelCaseFunctionLabel": "afwIsInYearMonthDuration10",
                "brief": "Checks whether a value is in a list",
                "camelCaseFunctionLabel": "isInYearMonthDuration10",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Checks whether yearMonthDuration_1_0 value is in list list and returns the boolean result.",
                "functionId": "is_in<yearMonthDuration_1_0>",
                "functionLabel": "is_in_yearMonthDuration_1_0",
                "functionSignature": "boolean(yearMonthDuration_1_0 value, (list list) list)",
                "functionDeclaration": "/* Checks whether a value is in a list */\nboolean (\n    yearMonthDuration_1_0 value,\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "yearMonthDuration_1_0",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "at_least_one_member_of_rfc822Name": {
                "afwCamelCaseFunctionLabel": "afwAtLeastOneMemberOfRfc822Name",
                "brief": "Checks for at least one value in common",
                "camelCaseFunctionLabel": "atLeastOneMemberOfRfc822Name",
                "category": "rfc822Name",
                "dataType": "rfc822Name",
                "dataTypeMethodNumber": 1,
                "deprecated": false,
                "description": "Returns boolean true if at least one value in rfc822Name list1 is in rfc822Name list2.",
                "functionId": "at_least_one_member_of<rfc822Name>",
                "functionLabel": "at_least_one_member_of_rfc822Name",
                "functionSignature": "boolean((list rfc822Name) list1, (list rfc822Name) list2)",
                "functionDeclaration": "/* Checks for at least one value in common */\nboolean (\n    (list rfc822Name) list1,\n    (list rfc822Name) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "rfc822Name",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "rfc822Name",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_size_integer": {
                "afwCamelCaseFunctionLabel": "afwBagSizeInteger",
                "brief": "Returns the number of values in a bag",
                "camelCaseFunctionLabel": "bagSizeInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 3,
                "deprecated": false,
                "description": "This returns the integer number of values in list bag arg.",
                "functionId": "bag_size<integer>",
                "functionLabel": "bag_size_integer",
                "functionSignature": "integer((list integer) arg)",
                "functionDeclaration": "/* Returns the number of values in a bag */\ninteger (\n    (list integer) arg)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "integer",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "at_least_one_member_of_yearMonthDuration_1_0": {
                "afwCamelCaseFunctionLabel": "afwAtLeastOneMemberOfYearMonthDuration10",
                "brief": "Checks for at least one value in common",
                "camelCaseFunctionLabel": "atLeastOneMemberOfYearMonthDuration10",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Returns boolean true if at least one value in yearMonthDuration_1_0 list1 is in yearMonthDuration_1_0 list2.",
                "functionId": "at_least_one_member_of<yearMonthDuration_1_0>",
                "functionLabel": "at_least_one_member_of_yearMonthDuration_1_0",
                "functionSignature": "boolean((list yearMonthDuration_1_0) list1, (list yearMonthDuration_1_0) list2)",
                "functionDeclaration": "/* Checks for at least one value in common */\nboolean (\n    (list yearMonthDuration_1_0) list1,\n    (list yearMonthDuration_1_0) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "yearMonthDuration_1_0",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "yearMonthDuration_1_0",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "policy_ordered_deny_overrides_1_1": {
                "afwCamelCaseFunctionLabel": "afwPolicyOrderedDenyOverrides11",
                "brief": "Policy combining algorithm - legacy_policy_deny_overrides",
                "camelCaseFunctionLabel": "policyOrderedDenyOverrides11",
                "category": "policy_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Policy combining algorithm for legacy policy deny overrides.",
                "functionId": "policy_ordered_deny_overrides_1_1",
                "functionLabel": "policy_ordered_deny_overrides_1_1",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Policy combining algorithm - legacy_policy_deny_overrides */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "contains_anyURI": {
                "afwCamelCaseFunctionLabel": "afwContainsAnyURI",
                "brief": "Checks whether anyURI value includes a string",
                "camelCaseFunctionLabel": "containsAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 4,
                "deprecated": false,
                "description": "Checks whether anyURI value contains a anyURI and return the boolean result.",
                "functionId": "contains<anyURI>",
                "functionLabel": "contains_anyURI",
                "functionSignature": "boolean(anyURI value, string subString)",
                "functionDeclaration": "/* Checks whether anyURI value includes a string */\nboolean /* Indicates if substring found */ (\n    anyURI value     /* <Type> value to search */,\n    string subString /* Substring to find */)",
                "parameters": [
                    {
                        "brief": "<Type> value to search",
                        "dataType": "anyURI",
                        "description": "anyURI value to search.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "brief": "Substring to find",
                        "dataType": "string",
                        "description": "Substring to find.",
                        "minArgs": -1,
                        "name": "subString",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "brief": "Indicates if substring found",
                    "dataType": "boolean",
                    "description": "Indicates if substring is contained in value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "evaluate": {
                "afwCamelCaseFunctionLabel": "afwEvaluate",
                "brief": "Evaluate <Type> value",
                "camelCaseFunctionLabel": "evaluate",
                "category": "polymorphic",
                "dataTypeMethodNumber": 52,
                "deprecated": false,
                "description": "Compile and evaluate <Type> value.",
                "functionId": "evaluate",
                "functionLabel": "evaluate",
                "functionSignature": "<Type> unevaluated(Type source, (object _AdaptiveTemplatePropertiesObjects_) additionalContext?)",
                "functionDeclaration": "/* Evaluate <Type> value */\n<Type> unevaluated (\n    Type source                                                   /* Source to evaluate */,\n    (object _AdaptiveTemplatePropertiesObjects_) additionalContext? /* Additional context */)",
                "parameters": [
                    {
                        "brief": "Source to evaluate",
                        "description": "<Type> string to compile and evaluate",
                        "minArgs": -1,
                        "name": "source",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "brief": "Additional context",
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveTemplatePropertiesObjects_",
                        "description": "Additional context to use first during evaluation.",
                        "minArgs": -1,
                        "name": "additionalContext",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "script",
                    "template",
                    "xpathExpression"
                ],
                "pure": true,
                "returns": {
                    "dataType": "unevaluated",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_ipAddress_string": {
                "afwCamelCaseFunctionLabel": "afwToIpAddressString",
                "brief": "Converts string to ipAddress",
                "camelCaseFunctionLabel": "toIpAddressString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 70,
                "deprecated": false,
                "description": "Converts string arg to ipAddress.",
                "functionId": "to_ipAddress<string>",
                "functionLabel": "to_ipAddress_string",
                "functionSignature": "ipAddress(string arg)",
                "functionDeclaration": "/* Converts string to ipAddress */\nipAddress (\n    string arg)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "ipAddress",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "metas": {
                "afwCamelCaseFunctionLabel": "afwMetas",
                "brief": "Return a list of the result of calling meta() for each value in a list or object adaptive value",
                "camelCaseFunctionLabel": "metas",
                "category": "value",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This function returns a list of the result of calling meta() for each value in a list or object adaptive value.",
                "functionId": "metas",
                "functionLabel": "metas",
                "functionSignature": "object(any value)",
                "functionDeclaration": "/* Return a list of the result of calling meta() for each value in a list or object adaptive value */\nobject (\n    any value)",
                "parameters": [
                    {
                        "description": "This is an adaptive list or object.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "object",
                    "description": "An list containing the result of calling meta() of each value in list or object adaptive value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "gt": {
                "afwCamelCaseFunctionLabel": "afwGt",
                "brief": "Checks for greater than",
                "camelCaseFunctionLabel": "gt",
                "category": "polymorphic",
                "dataTypeMethodNumber": 33,
                "deprecated": false,
                "description": "Checks for <Type> arg1 is greater than <Type> arg2 and return the boolean result.",
                "functionId": "gt",
                "functionLabel": "gt",
                "functionSignature": "<Type> boolean(Type arg1, Type arg2)",
                "functionDeclaration": "/* Checks for greater than */\n<Type> boolean (\n    Type arg1,\n    Type arg2)",
                "op": ">",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "date",
                    "dateTime",
                    "double",
                    "integer",
                    "string",
                    "time"
                ],
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "compile_script": {
                "afwCamelCaseFunctionLabel": "afwCompileScript",
                "brief": "Compile script value",
                "camelCaseFunctionLabel": "compileScript",
                "category": "script",
                "dataType": "script",
                "dataTypeMethodNumber": 51,
                "deprecated": false,
                "description": "Compile script value and return either an unevaluated adaptive value or a string containing the compiler listing.",
                "functionId": "compile<script>",
                "functionLabel": "compile_script",
                "functionSignature": "unevaluated(script source, any listing?)",
                "functionDeclaration": "/* Compile script value */\nunevaluated (\n    script source /* Source to compile */,\n    any listing?  /* Listing option */)",
                "parameters": [
                    {
                        "brief": "Source to compile",
                        "dataType": "script",
                        "description": "script string to compile",
                        "minArgs": -1,
                        "name": "source",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "brief": "Listing option",
                        "description": "If specified, a compiler listing is produced instead of an unevaluated expression value.\n\nThis parameter can be an integer between 0 and 10 of a string that is used for indentation.  If 0 is specified, no whitespace is added to the resulting string.  If 1 through 10 is specified, that number of spaces is used.",
                        "minArgs": -1,
                        "name": "listing",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "unevaluated",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "access_permitted": {
                "afwCamelCaseFunctionLabel": "afwAccessPermitted",
                "brief": "Check access",
                "camelCaseFunctionLabel": "accessPermitted",
                "category": "xacml_other",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Implementation of urn:oasis:names:tc:xacml:3.0:function:access-permitted.",
                "functionId": "access_permitted",
                "functionLabel": "access_permitted",
                "functionSignature": "boolean(anyURI arg1, string arg2)",
                "functionDeclaration": "/* Check access */\nboolean (\n    anyURI arg1,\n    string arg2)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "mod": {
                "afwCamelCaseFunctionLabel": "afwMod",
                "brief": "Remainder of dividing numbers",
                "camelCaseFunctionLabel": "mod",
                "category": "polymorphic",
                "dataTypeMethodNumber": 53,
                "deprecated": false,
                "description": "Divide <Type> dividend by <Type> divisor and return the <Type> remainder.",
                "functionId": "mod",
                "functionLabel": "mod",
                "functionSignature": "<Type> Type(Type dividend, Type divisor)",
                "functionDeclaration": "/* Remainder of dividing numbers */\n<Type> Type (\n    Type dividend,\n    Type divisor)",
                "op": "%",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "dividend",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "divisor",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "integer"
                ],
                "pure": true,
                "returns": {
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eqx_dayTimeDuration": {
                "afwCamelCaseFunctionLabel": "afwEqxDayTimeDuration",
                "brief": "Checks for equal and type",
                "camelCaseFunctionLabel": "eqxDayTimeDuration",
                "category": "dayTimeDuration",
                "dataType": "dayTimeDuration",
                "dataTypeMethodNumber": 7,
                "deprecated": false,
                "description": "Checks for dayTimeDuration arg1 is equal to value and type of arg2 and return the boolean result.",
                "functionId": "eqx<dayTimeDuration>",
                "functionLabel": "eqx_dayTimeDuration",
                "functionSignature": "boolean(dayTimeDuration arg1, dayTimeDuration arg2)",
                "functionDeclaration": "/* Checks for equal and type */\nboolean (\n    dayTimeDuration arg1,\n    dayTimeDuration arg2)",
                "op": "===",
                "parameters": [
                    {
                        "dataType": "dayTimeDuration",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "dayTimeDuration",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_in_time": {
                "afwCamelCaseFunctionLabel": "afwIsInTime",
                "brief": "Checks whether a value is in a list",
                "camelCaseFunctionLabel": "isInTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 10,
                "deprecated": false,
                "description": "Checks whether time value is in list of time list and returns the boolean result.",
                "functionId": "is_in<time>",
                "functionLabel": "is_in_time",
                "functionSignature": "boolean(time value, (list time) list)",
                "functionDeclaration": "/* Checks whether a value is in a list */\nboolean (\n    time value,\n    (list time) list)",
                "parameters": [
                    {
                        "dataType": "time",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "time",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "generate_uuid": {
                "afwCamelCaseFunctionLabel": "afwGenerateUuid",
                "brief": "Generate UUID",
                "camelCaseFunctionLabel": "generateUuid",
                "category": "miscellaneous",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Generate a UUID.",
                "functionId": "generate_uuid",
                "functionLabel": "generate_uuid",
                "functionSignature": "string()",
                "functionDeclaration": "/* Generate UUID */\nstring (\n)",
                "parameters": [],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "string",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "nex_rfc822Name": {
                "afwCamelCaseFunctionLabel": "afwNexRfc822Name",
                "brief": "Checks for not equal value or type",
                "camelCaseFunctionLabel": "nexRfc822Name",
                "category": "rfc822Name",
                "dataType": "rfc822Name",
                "dataTypeMethodNumber": 14,
                "deprecated": false,
                "description": "Checks for rfc822Name arg1 not equal to value or data type of arg2 and return the boolean result.",
                "functionId": "nex<rfc822Name>",
                "functionLabel": "nex_rfc822Name",
                "functionSignature": "boolean(rfc822Name arg1, rfc822Name arg2)",
                "functionDeclaration": "/* Checks for not equal value or type */\nboolean (\n    rfc822Name arg1,\n    rfc822Name arg2)",
                "op": "!==",
                "parameters": [
                    {
                        "dataType": "rfc822Name",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "rfc822Name",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eq_dateTime": {
                "afwCamelCaseFunctionLabel": "afwEqDateTime",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "eqDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 6,
                "deprecated": false,
                "description": "Checks for dateTime arg1 is equal to dateTime arg2 and return the boolean result.",
                "functionId": "eq<dateTime>",
                "functionLabel": "eq_dateTime",
                "functionSignature": "boolean(dateTime arg1, dateTime arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    dateTime arg1,\n    dateTime arg2)",
                "op": "==",
                "parameters": [
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subset_integer": {
                "afwCamelCaseFunctionLabel": "afwSubsetInteger",
                "brief": "Determines if the first list is a subset of second list",
                "camelCaseFunctionLabel": "subsetInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 24,
                "deprecated": false,
                "description": "Returns boolean true if the unique values in integer list1 are all in integer list2.",
                "functionId": "subset<integer>",
                "functionLabel": "subset_integer",
                "functionSignature": "boolean((list integer) list1, (list integer) list2)",
                "functionDeclaration": "/* Determines if the first list is a subset of second list */\nboolean (\n    (list integer) list1,\n    (list integer) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "integer",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "integer",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "continue": {
                "afwCamelCaseFunctionLabel": "afwContinue",
                "brief": "Continue at beginning of a loop",
                "camelCaseFunctionLabel": "continue",
                "category": "script",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This is a special function that can be called in the body of a loop function to test the condition and, if true, start evaluating the body again.  If called outside of a loop body, an error is thrown.",
                "functionId": "continue",
                "functionLabel": "continue",
                "functionSignature": "any()",
                "functionDeclaration": "/* Continue at beginning of a loop */\nany (\n)",
                "parameters": [],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "description": "This function does not return.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 4
            },
            "variable_get": {
                "afwCamelCaseFunctionLabel": "afwVariableGet",
                "brief": "Get a variable value",
                "camelCaseFunctionLabel": "variableGet",
                "category": "miscellaneous",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Return the value of a variable.  If variable is not available, return a default or null value.",
                "functionId": "variable_get",
                "functionLabel": "variable_get",
                "functionSignature": "any(string name, any defaultValue?)",
                "functionDeclaration": "/* Get a variable value */\nany (\n    string name,\n    any defaultValue?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Name of variable to get.  The name can optionally be preceded with a qualifier followed by \"::\".",
                        "minArgs": -1,
                        "name": "name",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "The default value of variable if it does not exist in object.  If not specified, null value is the default.",
                        "minArgs": -1,
                        "name": "defaultValue",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "description": "Evaluated variable value or default.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ge_double": {
                "afwCamelCaseFunctionLabel": "afwGeDouble",
                "brief": "Checks for greater than or equal",
                "camelCaseFunctionLabel": "geDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 32,
                "deprecated": false,
                "description": "Checks for double arg1 is greater than or equal to double arg2 and return the boolean result.",
                "functionId": "ge<double>",
                "functionLabel": "ge_double",
                "functionSignature": "boolean(double arg1, double arg2)",
                "functionDeclaration": "/* Checks for greater than or equal */\nboolean (\n    double arg1,\n    double arg2)",
                "op": ">=",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "evaluate_with_retry": {
                "afwCamelCaseFunctionLabel": "afwEvaluateWithRetry",
                "brief": "Evaluate value with retry",
                "camelCaseFunctionLabel": "evaluateWithRetry",
                "category": "compiler",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Evaluate a value and retry up to a limit if an exception occurs.",
                "functionId": "evaluate_with_retry",
                "functionLabel": "evaluate_with_retry",
                "functionSignature": "any(any value, integer limit)",
                "functionDeclaration": "/* Evaluate value with retry */\nany (\n    any value,\n    integer limit)",
                "parameters": [
                    {
                        "description": "Value to evaluated",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "Maximum number to retry if an exception occurs.",
                        "minArgs": -1,
                        "name": "limit",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "description": "Evaluated value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "index_create": {
                "afwCamelCaseFunctionLabel": "afwIndexCreate",
                "brief": "Create index definition",
                "camelCaseFunctionLabel": "indexCreate",
                "category": "indexes",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Create an index definition.",
                "functionId": "index_create",
                "functionLabel": "index_create",
                "functionSignature": "object(string adaptorId, string key, string value?, string objectType?, string filter?, string options?, boolean retroactive?, boolean test?)",
                "functionDeclaration": "/* Create index definition */\nobject (\n    string adaptorId,\n    string key,\n    string value?,\n    string objectType?,\n    string filter?,\n    string options?,\n    boolean retroactive?,\n    boolean test?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Id of adaptor.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Name of the property index to be created.",
                        "minArgs": -1,
                        "name": "key",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Expression to calculate the index value(s).",
                        "minArgs": -1,
                        "name": "value",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Object Type(s) this index may apply to.",
                        "minArgs": -1,
                        "name": "objectType",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Expression to determine if this index applies to a particular object.",
                        "minArgs": -1,
                        "name": "filter",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Indexing options.",
                        "minArgs": -1,
                        "name": "options",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "boolean",
                        "description": "Retroactively generate indexes for existing objects.",
                        "minArgs": -1,
                        "name": "retroactive",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "boolean",
                        "description": "Test create (don't actually perform).",
                        "minArgs": -1,
                        "name": "test",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Object response from the indexing process",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "regexp_index_of_string": {
                "afwCamelCaseFunctionLabel": "afwRegexpIndexOfString",
                "brief": "Returns index of first match of regular expression",
                "camelCaseFunctionLabel": "regexpIndexOfString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 16,
                "deprecated": false,
                "description": "Search string value for a regular expression and return index.  If not found, -1 is returned.",
                "functionId": "regexp_index_of<string>",
                "functionLabel": "regexp_index_of_string",
                "functionSignature": "integer(string value, string regexp)",
                "functionDeclaration": "/* Returns index of first match of regular expression */\ninteger (\n    string value,\n    string regexp)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "The string value to search.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "A regular expression to use for search.",
                        "minArgs": -1,
                        "name": "regexp",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "description": "Zero-based index of subString or -1 if not found.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "normalize_to_lower_case_string": {
                "afwCamelCaseFunctionLabel": "afwNormalizeToLowerCaseString",
                "brief": "Converts to lower case",
                "camelCaseFunctionLabel": "normalizeToLowerCaseString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 63,
                "deprecated": false,
                "description": "Normalize string arg to lower case and returns string result.",
                "functionId": "normalize_to_lower_case<string>",
                "functionLabel": "normalize_to_lower_case_string",
                "functionSignature": "string(string arg)",
                "functionDeclaration": "/* Converts to lower case */\nstring (\n    string arg)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "one_and_only_anyURI": {
                "afwCamelCaseFunctionLabel": "afwOneAndOnlyAnyURI",
                "brief": "Converts a one value list to a anyURI value",
                "camelCaseFunctionLabel": "oneAndOnlyAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 15,
                "deprecated": false,
                "description": "This converts a list list  that contains one value to a data type anyURI value.",
                "functionId": "one_and_only<anyURI>",
                "functionLabel": "one_and_only_anyURI",
                "functionSignature": "anyURI((list list) list)",
                "functionDeclaration": "/* Converts a one value list to a anyURI value */\nanyURI (\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "anyURI",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "regexp_match_string": {
                "afwCamelCaseFunctionLabel": "afwRegexpMatchString",
                "brief": "Search for a match using a regular expression",
                "camelCaseFunctionLabel": "regexpMatchString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 17,
                "deprecated": false,
                "description": "Checks whether string value matches the regular expression regexp and return the boolean result.",
                "functionId": "regexp_match<string>",
                "functionLabel": "regexp_match_string",
                "functionSignature": "boolean(string value, string regexp)",
                "functionDeclaration": "/* Search for a match using a regular expression */\nboolean (\n    string value,\n    string regexp)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "regexp",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subset_anyURI": {
                "afwCamelCaseFunctionLabel": "afwSubsetAnyURI",
                "brief": "Determines if the first list is a subset of second list",
                "camelCaseFunctionLabel": "subsetAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 24,
                "deprecated": false,
                "description": "Returns boolean true if the unique values in anyURI list1 are all in anyURI list2.",
                "functionId": "subset<anyURI>",
                "functionLabel": "subset_anyURI",
                "functionSignature": "boolean((list anyURI) list1, (list anyURI) list2)",
                "functionDeclaration": "/* Determines if the first list is a subset of second list */\nboolean (\n    (list anyURI) list1,\n    (list anyURI) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "anyURI",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "anyURI",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "at_least_one_member_of_string": {
                "afwCamelCaseFunctionLabel": "afwAtLeastOneMemberOfString",
                "brief": "Checks for at least one value in common",
                "camelCaseFunctionLabel": "atLeastOneMemberOfString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 1,
                "deprecated": false,
                "description": "Returns boolean true if at least one value in string list1 is in string list2.",
                "functionId": "at_least_one_member_of<string>",
                "functionLabel": "at_least_one_member_of_string",
                "functionSignature": "boolean((list string) list1, (list string) list2)",
                "functionDeclaration": "/* Checks for at least one value in common */\nboolean (\n    (list string) list1,\n    (list string) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "string",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "string",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "add_yearMonthDuration_dateTime": {
                "afwCamelCaseFunctionLabel": "afwAddYearMonthDurationDateTime",
                "brief": "Add duration",
                "camelCaseFunctionLabel": "addYearMonthDurationDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 31,
                "deprecated": false,
                "description": "Add dateTime arg1 to yearMonthDuration arg2 and return the dateTime result.",
                "functionId": "add_yearMonthDuration<dateTime>",
                "functionLabel": "add_yearMonthDuration_dateTime",
                "functionSignature": "dateTime(dateTime arg1, yearMonthDuration arg2)",
                "functionDeclaration": "/* Add duration */\ndateTime (\n    dateTime arg1,\n    yearMonthDuration arg2)",
                "parameters": [
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "yearMonthDuration",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "dateTime",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eq_date": {
                "afwCamelCaseFunctionLabel": "afwEqDate",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "eqDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 6,
                "deprecated": false,
                "description": "Checks for date arg1 is equal to date arg2 and return the boolean result.",
                "functionId": "eq<date>",
                "functionLabel": "eq_date",
                "functionSignature": "boolean(date arg1, date arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    date arg1,\n    date arg2)",
                "op": "==",
                "parameters": [
                    {
                        "dataType": "date",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "date",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "test_script": {
                "afwCamelCaseFunctionLabel": "afwTestScript",
                "brief": "Test an adaptive script",
                "camelCaseFunctionLabel": "testScript",
                "category": "compiler",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Compile and evaluate an adaptive script and compare the results to an expected value.  Return object with the test's results.",
                "functionId": "test_script",
                "functionLabel": "test_script",
                "functionSignature": "object(string id, string description, string script, any expected, (object _AdaptiveContextType_) additionalContext?)",
                "functionDeclaration": "/* Test an adaptive script */\nobject (\n    string id,\n    string description,\n    string script,\n    any expected,\n    (object _AdaptiveContextType_) additionalContext?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Id of test",
                        "minArgs": -1,
                        "name": "id",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Description of test",
                        "minArgs": -1,
                        "name": "description",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Script to compile and evaluate.",
                        "minArgs": -1,
                        "name": "script",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "Expected result.",
                        "minArgs": -1,
                        "name": "expected",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveContextType_",
                        "description": "Additional context to use first during evaluation.",
                        "minArgs": -1,
                        "name": "additionalContext",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Test results.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "add_properties": {
                "afwCamelCaseFunctionLabel": "afwAddProperties",
                "brief": "Add properties of one object to another",
                "camelCaseFunctionLabel": "addProperties",
                "category": "object",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Add the properties of one object to another replacing existing properties by the same name.",
                "functionId": "add_properties",
                "functionLabel": "add_properties",
                "functionSignature": "object(object target, ...object source)",
                "functionDeclaration": "/* Add properties of one object to another */\nobject (\n    object target,\n    ...object source)",
                "parameters": [
                    {
                        "dataType": "object",
                        "description": "Target object.  This object must not be immutable.",
                        "minArgs": -1,
                        "name": "target",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "Source object(s).",
                        "minArgs": 1,
                        "name": "source",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "The modified target object.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0,
                "sideEffects": [
                    "Target object is modified."
                ]
            },
            "subtract_integer": {
                "afwCamelCaseFunctionLabel": "afwSubtractInteger",
                "brief": "Subtract numbers",
                "camelCaseFunctionLabel": "subtractInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 49,
                "deprecated": false,
                "description": "Subtract integer arg2 from integer arg1 and return the integer result.",
                "functionId": "subtract<integer>",
                "functionLabel": "subtract_integer",
                "functionSignature": "integer(integer arg1, integer arg2)",
                "functionDeclaration": "/* Subtract numbers */\ninteger (\n    integer arg1,\n    integer arg2)",
                "op": "-",
                "parameters": [
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "union_dateTime": {
                "afwCamelCaseFunctionLabel": "afwUnionDateTime",
                "brief": "Returns union of two or more string lists",
                "camelCaseFunctionLabel": "unionDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 27,
                "deprecated": false,
                "description": "Returns a list of dateTime contains all of the unique values in two or more list of dateTime args.",
                "functionId": "union<dateTime>",
                "functionLabel": "union_dateTime",
                "functionSignature": "(list dateTime)(...(list dateTime) lists)",
                "functionDeclaration": "/* Returns union of two or more string lists */\n(list dateTime) (\n    ...(list dateTime) lists)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dateTime",
                        "description": "Two or more lists.",
                        "minArgs": 2,
                        "name": "lists",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "dateTime",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "xpath_node_match": {
                "afwCamelCaseFunctionLabel": "afwXpathNodeMatch",
                "brief": "Checks whether two node-sets or their children have an equal node",
                "camelCaseFunctionLabel": "xpathNodeMatch",
                "category": "xpathExpression",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Returns true if any of the nodes matched by nodeset1 are equal to any of the nodes matched by nodeset2 or their corresponding children.",
                "functionId": "xpath_node_match",
                "functionLabel": "xpath_node_match",
                "functionSignature": "boolean(xpathExpression nodeset2, xpathExpression arg2)",
                "functionDeclaration": "/* Checks whether two node-sets or their children have an equal node */\nboolean (\n    xpathExpression nodeset2,\n    xpathExpression arg2)",
                "parameters": [
                    {
                        "dataType": "xpathExpression",
                        "minArgs": -1,
                        "name": "nodeset2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "xpathExpression",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "substring_anyURI": {
                "afwCamelCaseFunctionLabel": "afwSubstringAnyURI",
                "brief": "Extract a substring",
                "camelCaseFunctionLabel": "substringAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 25,
                "deprecated": false,
                "description": "Returns the anyURI substring of value beginning at zero-based position integer startIndex and ending at the position before integer endIndex.  Specify -1 or omitting endIndex to return up to end of anyURI.",
                "functionId": "substring<anyURI>",
                "functionLabel": "substring_anyURI",
                "functionSignature": "anyURI(anyURI string, integer startIndex, integer endIndex?)",
                "functionDeclaration": "/* Extract a substring */\nanyURI (\n    anyURI string,\n    integer startIndex,\n    integer endIndex?)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "minArgs": -1,
                        "name": "string",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "startIndex",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "endIndex",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "anyURI",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "rule_permit_overrides_1_0": {
                "afwCamelCaseFunctionLabel": "afwRulePermitOverrides10",
                "brief": "Rule combining algorithm - legacy_rule_permit_overrides",
                "camelCaseFunctionLabel": "rulePermitOverrides10",
                "category": "rule_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Rule combining algorithm for legacy rule permit overrides.",
                "functionId": "rule_permit_overrides_1_0",
                "functionLabel": "rule_permit_overrides_1_0",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Rule combining algorithm - legacy_rule_permit_overrides */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_size_rfc822Name": {
                "afwCamelCaseFunctionLabel": "afwBagSizeRfc822Name",
                "brief": "Returns the number of values in a bag",
                "camelCaseFunctionLabel": "bagSizeRfc822Name",
                "category": "rfc822Name",
                "dataType": "rfc822Name",
                "dataTypeMethodNumber": 3,
                "deprecated": false,
                "description": "This returns the integer number of values in list bag arg.",
                "functionId": "bag_size<rfc822Name>",
                "functionLabel": "bag_size_rfc822Name",
                "functionSignature": "integer((list rfc822Name) arg)",
                "functionDeclaration": "/* Returns the number of values in a bag */\ninteger (\n    (list rfc822Name) arg)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "rfc822Name",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "starts_with": {
                "afwCamelCaseFunctionLabel": "afwStartsWith",
                "brief": "Checks whether value starts with a string",
                "camelCaseFunctionLabel": "startsWith",
                "category": "polymorphic",
                "dataTypeMethodNumber": 23,
                "deprecated": false,
                "description": "Checks whether <Type> value starts with a subString and return the boolean result.",
                "functionId": "starts_with",
                "functionLabel": "starts_with",
                "functionSignature": "<Type> boolean(Type value, Type subString)",
                "functionDeclaration": "/* Checks whether value starts with a string */\n<Type> boolean (\n    Type value,\n    Type subString)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "subString",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ipAddress": {
                "afwCamelCaseFunctionLabel": "afwIpAddress",
                "brief": "Convert to data type ipAddress",
                "camelCaseFunctionLabel": "ipAddress",
                "category": "ipAddress",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type ipAddress returning ipAddress result.",
                "functionId": "ipAddress",
                "functionLabel": "ipAddress",
                "functionSignature": "ipAddress(any arg)",
                "functionDeclaration": "/* Convert to data type ipAddress */\nipAddress (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "ipAddress",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_in_integer": {
                "afwCamelCaseFunctionLabel": "afwIsInInteger",
                "brief": "Checks whether a value is in a list",
                "camelCaseFunctionLabel": "isInInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 10,
                "deprecated": false,
                "description": "Checks whether integer value is in list of integer list and returns the boolean result.",
                "functionId": "is_in<integer>",
                "functionLabel": "is_in_integer",
                "functionSignature": "boolean(integer value, (list integer) list)",
                "functionDeclaration": "/* Checks whether a value is in a list */\nboolean (\n    integer value,\n    (list integer) list)",
                "parameters": [
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "integer",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_dateTime_string": {
                "afwCamelCaseFunctionLabel": "afwToDateTimeString",
                "brief": "Converts string to dateTime",
                "camelCaseFunctionLabel": "toDateTimeString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 67,
                "deprecated": false,
                "description": "Converts string arg to dateTime.",
                "functionId": "to_dateTime<string>",
                "functionLabel": "to_dateTime_string",
                "functionSignature": "dateTime(string arg)",
                "functionDeclaration": "/* Converts string to dateTime */\ndateTime (\n    string arg)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "dateTime",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_time": {
                "afwCamelCaseFunctionLabel": "afwToStringTime",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts time arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<time>",
                "functionLabel": "to_string_time",
                "functionSignature": "string(time arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    time arg)",
                "parameters": [
                    {
                        "dataType": "time",
                        "description": "A time value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "round": {
                "afwCamelCaseFunctionLabel": "afwRound",
                "brief": "Round to nearest integer",
                "camelCaseFunctionLabel": "round",
                "category": "polymorphic",
                "dataTypeMethodNumber": 48,
                "deprecated": false,
                "description": "Determine the integer closest to <Type> arg and return the <Type> result.",
                "functionId": "round",
                "functionLabel": "round",
                "functionSignature": "<Type> Type(Type arg)",
                "functionDeclaration": "/* Round to nearest integer */\n<Type> Type (\n    Type arg)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "double"
                ],
                "pure": true,
                "returns": {
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eqx_double": {
                "afwCamelCaseFunctionLabel": "afwEqxDouble",
                "brief": "Checks for equal and type",
                "camelCaseFunctionLabel": "eqxDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 7,
                "deprecated": false,
                "description": "Checks for double arg1 is equal to value and type of arg2 and return the boolean result.",
                "functionId": "eqx<double>",
                "functionLabel": "eqx_double",
                "functionSignature": "boolean(double arg1, double arg2)",
                "functionDeclaration": "/* Checks for equal and type */\nboolean (\n    double arg1,\n    double arg2)",
                "op": "===",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "variable_is_not_null": {
                "afwCamelCaseFunctionLabel": "afwVariableIsNotNull",
                "brief": "Determine if a variable exists and is not null",
                "camelCaseFunctionLabel": "variableIsNotNull",
                "category": "miscellaneous",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Return the true if the named variable exists and is not null.",
                "functionId": "variable_is_not_null",
                "functionLabel": "variable_is_not_null",
                "functionSignature": "boolean(string name)",
                "functionDeclaration": "/* Determine if a variable exists and is not null */\nboolean (\n    string name)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Name of variable to check.  The name can optionally be preceded with a qualifier followed by \"::\".",
                        "minArgs": -1,
                        "name": "name",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if variable exists and is not null.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "lt_dateTime": {
                "afwCamelCaseFunctionLabel": "afwLtDateTime",
                "brief": "Checks for less than",
                "camelCaseFunctionLabel": "ltDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 35,
                "deprecated": false,
                "description": "Checks for dateTime arg1 is less that dateTime arg2 and return the boolean result.\n\nIf a dateTime value does not include a time-zone value, then the local time-zone value will be assigned.",
                "functionId": "lt<dateTime>",
                "functionLabel": "lt_dateTime",
                "functionSignature": "boolean(dateTime arg1, dateTime arg2)",
                "functionDeclaration": "/* Checks for less than */\nboolean (\n    dateTime arg1,\n    dateTime arg2)",
                "op": "<",
                "parameters": [
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "if": {
                "afwCamelCaseFunctionLabel": "afwIf",
                "brief": "If/then/else function",
                "camelCaseFunctionLabel": "if",
                "category": "script",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Evaluate one of two different values depending on test condition.",
                "functionId": "if",
                "functionLabel": "if",
                "functionSignature": "any(boolean condition, list then, list else?)",
                "functionDeclaration": "/* If/then/else function */\nany (\n    boolean condition,\n    list then,\n    list else?)",
                "parameters": [
                    {
                        "dataType": "boolean",
                        "description": "If true, parameter \"then\" is evaluated for result.  If false, parameter \"else\" is evaluated.",
                        "minArgs": -1,
                        "name": "condition",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "description": "This is the body of a structured block that is evaluated if \"condition\" is true.  See the \"body\" parameter of the \"block\" function for information on how the body is processed.",
                        "minArgs": -1,
                        "name": "then",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "description": "This is the body of a structured block that is evaluated if \"condition\" is false.  If not specified and condition is false, a null value is returned.  See the \"body\" parameter of the \"block\" function for information on how the body is processed.",
                        "minArgs": -1,
                        "name": "else",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "description": "The result of evaluating \"then\" or \"else\"",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 8
            },
            "divide_double": {
                "afwCamelCaseFunctionLabel": "afwDivideDouble",
                "brief": "Divide numbers",
                "camelCaseFunctionLabel": "divideDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 43,
                "deprecated": false,
                "description": "Divide double dividend by double divisor and return the double quotient.",
                "functionId": "divide<double>",
                "functionLabel": "divide_double",
                "functionSignature": "double(double dividend, double divisor)",
                "functionDeclaration": "/* Divide numbers */\ndouble (\n    double dividend,\n    double divisor)",
                "op": "/",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "dividend",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "divisor",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "double",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "flag_get_defaults": {
                "afwCamelCaseFunctionLabel": "afwFlagGetDefaults",
                "brief": "Get the list of flags used to determine the default active flags",
                "camelCaseFunctionLabel": "flagGetDefaults",
                "category": "administrative",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Get the list of the flagId of flags that are used to determine the default active flags when a scope (request) is created.  This list can contain the flagId of flags that have not yet been registered.  Each of these flags and the flags they include are set as the active default flags.",
                "functionId": "flag_get_defaults",
                "functionLabel": "flag_get_defaults",
                "functionSignature": "(list string)()",
                "functionDeclaration": "/* Get the list of flags used to determine the default active flags */\n(list string) (\n)",
                "parameters": [],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "string",
                    "description": "This is a list of the flagId of flags used to determine the default active flags.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "abs_double": {
                "afwCamelCaseFunctionLabel": "afwAbsDouble",
                "brief": "Absolute value",
                "camelCaseFunctionLabel": "absDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 40,
                "deprecated": false,
                "description": "Compute the absolute value of the double arg and return the double result.",
                "functionId": "abs<double>",
                "functionLabel": "abs_double",
                "functionSignature": "double(double arg)",
                "functionDeclaration": "/* Absolute value */\ndouble (\n    double arg)",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "double",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "divide": {
                "afwCamelCaseFunctionLabel": "afwDivide",
                "brief": "Divide numbers",
                "camelCaseFunctionLabel": "divide",
                "category": "polymorphic",
                "dataTypeMethodNumber": 43,
                "deprecated": false,
                "description": "Divide <Type> dividend by <Type> divisor and return the <Type> quotient.",
                "functionId": "divide",
                "functionLabel": "divide",
                "functionSignature": "<Type> Type(Type dividend, Type divisor)",
                "functionDeclaration": "/* Divide numbers */\n<Type> Type (\n    Type dividend,\n    Type divisor)",
                "op": "/",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "dividend",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "divisor",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "double",
                    "integer"
                ],
                "pure": true,
                "returns": {
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_null": {
                "afwCamelCaseFunctionLabel": "afwIsNull",
                "brief": "Checks whether value is dataType null",
                "camelCaseFunctionLabel": "isNull",
                "category": "null",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type null.  Use is_list_of_null() instead to test for a list of null.",
                "functionId": "is<null>",
                "functionLabel": "is_null",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType null */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is null.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eqx_x500Name": {
                "afwCamelCaseFunctionLabel": "afwEqxX500Name",
                "brief": "Checks for equal and type",
                "camelCaseFunctionLabel": "eqxX500Name",
                "category": "x500Name",
                "dataType": "x500Name",
                "dataTypeMethodNumber": 7,
                "deprecated": false,
                "description": "Checks for x500Name arg1 is equal to value and type of arg2 and return the boolean result.",
                "functionId": "eqx<x500Name>",
                "functionLabel": "eqx_x500Name",
                "functionSignature": "boolean(x500Name arg1, x500Name arg2)",
                "functionDeclaration": "/* Checks for equal and type */\nboolean (\n    x500Name arg1,\n    x500Name arg2)",
                "op": "===",
                "parameters": [
                    {
                        "dataType": "x500Name",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "x500Name",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "regexp_replace_anyURI": {
                "afwCamelCaseFunctionLabel": "afwRegexpReplaceAnyURI",
                "brief": "Replace strings matching a regular expression",
                "camelCaseFunctionLabel": "regexpReplaceAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 18,
                "deprecated": false,
                "description": "Replace matched values for a regular expression in a anyURI value.",
                "functionId": "regexp_replace<anyURI>",
                "functionLabel": "regexp_replace_anyURI",
                "functionSignature": "anyURI(anyURI value, string regexp, string replacement, integer limit?)",
                "functionDeclaration": "/* Replace strings matching a regular expression */\nanyURI (\n    anyURI value,\n    string regexp,\n    string replacement,\n    integer limit?)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "description": "The original anyURI value.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "A regular expression to use for search.",
                        "minArgs": -1,
                        "name": "regexp",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "The replacement string.",
                        "minArgs": -1,
                        "name": "replacement",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "This is the maximum times to replace.  The default is 1.  Specify -1 to replace all occurrences.",
                        "minArgs": -1,
                        "name": "limit",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "anyURI",
                    "description": "A anyURI value with the matched string(s) replaced.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "rule_ordered_deny_overrides_1_1": {
                "afwCamelCaseFunctionLabel": "afwRuleOrderedDenyOverrides11",
                "brief": "Rule combining algorithm - legacy_rule_deny_overrides",
                "camelCaseFunctionLabel": "ruleOrderedDenyOverrides11",
                "category": "rule_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Rule combining algorithm for legacy rule deny overrides.",
                "functionId": "rule_ordered_deny_overrides_1_1",
                "functionLabel": "rule_ordered_deny_overrides_1_1",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Rule combining algorithm - legacy_rule_deny_overrides */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "registry_key_check": {
                "afwCamelCaseFunctionLabel": "afwRegistryKeyCheck",
                "brief": "Check to see if a registry key exists",
                "camelCaseFunctionLabel": "registryKeyCheck",
                "category": "administrative",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This will check to see if a registry key exists for a specified registry type and optionally load it's associated extension if needed.",
                "functionId": "registry_key_check",
                "functionLabel": "registry_key_check",
                "functionSignature": "boolean(string registryType, string key, boolean loadExtension?)",
                "functionDeclaration": "/* Check to see if a registry key exists */\nboolean (\n    string registryType,\n    string key,\n    boolean loadExtension?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "This is the registry type, which is the object id of a /afw/_AdaptiveEnvironmentRegistryType_/ object.",
                        "minArgs": -1,
                        "name": "registryType",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "This is a key to check for existence in the specified registryType.",
                        "minArgs": -1,
                        "name": "key",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "boolean",
                        "description": "Specifying true for this optional parameter will cause the associated extension to be loaded if needed.",
                        "minArgs": -1,
                        "name": "loadExtension",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "boolean",
                    "description": "If false the extension was already loaded.  If true, the extension was successfully loaded which might have caused side effects such as environment registry changes.  An error is thrown if there is a problem.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0,
                "sideEffects": [
                    "The loading of the extension may add environment registry entries as well as make other changes."
                ]
            },
            "encode_as_base64Binary_string": {
                "afwCamelCaseFunctionLabel": "afwEncodeAsBase64BinaryString",
                "brief": "Encode to a base64Binary value",
                "camelCaseFunctionLabel": "encodeAsBase64BinaryString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 57,
                "deprecated": false,
                "description": "Encode a value as a base64Binary.  The effect is to create a base64Binary value with an internal value of the value passed.",
                "functionId": "encode_as_base64Binary<string>",
                "functionLabel": "encode_as_base64Binary_string",
                "functionSignature": "base64Binary(string value)",
                "functionDeclaration": "/* Encode to a base64Binary value */\nbase64Binary (\n    string value)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "The string value to encode.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "base64Binary",
                    "description": "A base64Binary value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "url_encode": {
                "afwCamelCaseFunctionLabel": "afwUrlEncode",
                "brief": "URI encode",
                "camelCaseFunctionLabel": "urlEncode",
                "category": "polymorphic",
                "dataTypeMethodNumber": 28,
                "deprecated": false,
                "description": "URL encode a value or bag of values.",
                "functionId": "url_encode",
                "functionLabel": "url_encode",
                "functionSignature": "<Type> string(Type unencoded)",
                "functionDeclaration": "/* URI encode */\n<Type> string (\n    Type unencoded)",
                "parameters": [
                    {
                        "description": "URL encode a single value.  See the url_encode method for the data type of more details.",
                        "minArgs": -1,
                        "name": "unencoded",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "string",
                    "anyURI"
                ],
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "URI encoded string.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "union_anyURI": {
                "afwCamelCaseFunctionLabel": "afwUnionAnyURI",
                "brief": "Returns union of two or more string lists",
                "camelCaseFunctionLabel": "unionAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 27,
                "deprecated": false,
                "description": "Returns a list of anyURI contains all of the unique values in two or more list of anyURI args.",
                "functionId": "union<anyURI>",
                "functionLabel": "union_anyURI",
                "functionSignature": "(list anyURI)(...(list anyURI) lists)",
                "functionDeclaration": "/* Returns union of two or more string lists */\n(list anyURI) (\n    ...(list anyURI) lists)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "anyURI",
                        "description": "Two or more lists.",
                        "minArgs": 2,
                        "name": "lists",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "anyURI",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "index_of_anyURI": {
                "afwCamelCaseFunctionLabel": "afwIndexOfAnyURI",
                "brief": "Returns index of first occurrence",
                "camelCaseFunctionLabel": "indexOfAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 8,
                "deprecated": false,
                "description": "Returns the zero-based index into anyURI value of subString.  If subString is not found, -1 is returned.",
                "functionId": "index_of<anyURI>",
                "functionLabel": "index_of_anyURI",
                "functionSignature": "integer(anyURI value, string subString, integer startIndex?)",
                "functionDeclaration": "/* Returns index of first occurrence */\ninteger (\n    anyURI value,\n    string subString,\n    integer startIndex?)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "description": "The anyURI value to search.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Substring to search for.",
                        "minArgs": -1,
                        "name": "subString",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "Optional start index for search if different than start of string.",
                        "minArgs": -1,
                        "name": "startIndex",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "description": "Zero-based index of subString or -1 if not found.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "objectId": {
                "afwCamelCaseFunctionLabel": "afwObjectId",
                "brief": "Convert to data type objectId",
                "camelCaseFunctionLabel": "objectId",
                "category": "objectId",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type objectId returning objectId result.",
                "functionId": "objectId",
                "functionLabel": "objectId",
                "functionSignature": "objectId(any arg)",
                "functionDeclaration": "/* Convert to data type objectId */\nobjectId (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "objectId",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_integer_string": {
                "afwCamelCaseFunctionLabel": "afwToIntegerString",
                "brief": "Converts to integer",
                "camelCaseFunctionLabel": "toIntegerString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 50,
                "deprecated": false,
                "description": "Truncate string arg to a whole number and returns integer result.",
                "functionId": "to_integer<string>",
                "functionLabel": "to_integer_string",
                "functionSignature": "integer(string arg)",
                "functionDeclaration": "/* Converts to integer */\ninteger (\n    string arg)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_date": {
                "afwCamelCaseFunctionLabel": "afwBagDate",
                "brief": "Makes a list from args",
                "camelCaseFunctionLabel": "bagDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 2,
                "deprecated": false,
                "description": "Takes any number of date args and returns a list of list.",
                "functionId": "bag<date>",
                "functionLabel": "bag_date",
                "functionSignature": "(list date)(...(list date) args)",
                "functionDeclaration": "/* Makes a list from args */\n(list date) (\n    ...(list date) args)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "date",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "date",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "modify_object_with_uri": {
                "afwCamelCaseFunctionLabel": "afwModifyObjectWithUri",
                "brief": "Modify adaptive object with URI",
                "camelCaseFunctionLabel": "modifyObjectWithUri",
                "category": "adaptor",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Modify an adaptive object with a given URI.",
                "functionId": "modify_object_with_uri",
                "functionLabel": "modify_object_with_uri",
                "functionSignature": "(object _AdaptiveJournalEntry_)(anyURI uri, list entries, object journal?, object adaptorTypeSpecific?)",
                "functionDeclaration": "/* Modify adaptive object with URI */\n(object _AdaptiveJournalEntry_) (\n    anyURI uri,\n    list entries,\n    object journal?,\n    object adaptorTypeSpecific?)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "description": "URI of object to modify.  If a URI begins with a single slash ('/'), it is the local object path.",
                        "minArgs": -1,
                        "name": "uri",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "description": "List of asserts and modifications.  Entries are of the form:\n\n    [\n        \"add_value\",\n        \"property name\" or [\"property name\", ... ],\n        value\n    ]\n\n    [\n        \"remove_property\",\n        \"property name\" or [\"property name\", ... ]\n    ]\n\n    [\n        \"remove_value\",\n        \"property name\" or [\"property name\", ... ],\n        value\n    ]\n\n    [\n        \"set_property\",\n        \"property name\" or [\"property name\", ... ],\n        value\n    ]",
                        "minArgs": -1,
                        "name": "entries",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "The properties of this object will be added to the associated journal entry.  Refer to /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names to avoid and for ones that have specific semantics.",
                        "minArgs": -1,
                        "name": "journal",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "This is an optional object parameter with an objectType determined by the adaptorType associated with the adaptorId parameter.  If the adaptorType supports this parameter, adaptor afw will have an adaptive object type with an id of:\n\n_AdaptiveAdaptorTypeSpecific_${adaptorType}_modify_object\n\nWhere ${adaptorType} is the adaptor type id.",
                        "minArgs": -1,
                        "name": "adaptorTypeSpecific",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveJournalEntry_",
                    "description": "Resulting journal entry.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_in_double": {
                "afwCamelCaseFunctionLabel": "afwIsInDouble",
                "brief": "Checks whether a value is in a list",
                "camelCaseFunctionLabel": "isInDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 10,
                "deprecated": false,
                "description": "Checks whether double value is in list of double list and returns the boolean result.",
                "functionId": "is_in<double>",
                "functionLabel": "is_in_double",
                "functionSignature": "boolean(double value, (list double) list)",
                "functionDeclaration": "/* Checks whether a value is in a list */\nboolean (\n    double value,\n    (list double) list)",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "double",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "dateTime": {
                "afwCamelCaseFunctionLabel": "afwDateTime",
                "brief": "Convert to data type dateTime",
                "camelCaseFunctionLabel": "dateTime",
                "category": "dateTime",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type dateTime returning dateTime result.",
                "functionId": "dateTime",
                "functionLabel": "dateTime",
                "functionSignature": "dateTime(any arg)",
                "functionDeclaration": "/* Convert to data type dateTime */\ndateTime (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "dateTime",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "model_default_modify_object_action": {
                "afwCamelCaseFunctionLabel": "afwModelDefaultModifyObjectAction",
                "brief": "Produce a default _AdaptiveAction_ object for an modify object request to a model adaptor.",
                "camelCaseFunctionLabel": "modelDefaultModifyObjectAction",
                "category": "model",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This function returns a _AdaptiveAction_ object for the default action performed if a onModifyObject parameter is not specified on the associated _AdaptiveModelObjectType_.  The action is not performed, but be aware that functions called while producing the _AdaptiveAction_ object may cause side effects.  This function can be called as part of a onModify expression or for testing.",
                "functionId": "model_default_modify_object_action",
                "functionLabel": "model_default_modify_object_action",
                "functionSignature": "(object _AdaptiveAction_)(string adaptorId, string objectType, string objectId, list entries, string modelId?, (object _AdaptiveContextType_) context?)",
                "functionDeclaration": "/* Produce a default _AdaptiveAction_ object for an modify object request to a model adaptor. */\n(object _AdaptiveAction_) (\n    string adaptorId,\n    string objectType,\n    string objectId,\n    list entries,\n    string modelId?,\n    (object _AdaptiveContextType_) context?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "This is the adaptorId of a model adaptor.  Variable custom::adaptorId can be used to access this value in model expressions.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "This is the adaptive object type of object being modified.  Variable custom::objectType can be used to access this value in model expressions.",
                        "minArgs": -1,
                        "name": "objectType",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "This is the objectId of object to modify.  Variable custom::objectId can be used to access this value in model expressions.",
                        "minArgs": -1,
                        "name": "objectId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "description": "This is a list of modifications.  Variable custom::actions can be used to access this value in model expressions.  Entries are of the form:\n\n    [\n        \"add_value\",\n        \"property name\" or [\"property name\", ... ],\n        value\n    ]\n\n    [\n        \"remove_property\",\n        \"property name\" or [\"property name\", ... ]\n    ]\n\n    [\n        \"remove_value\",\n        \"property name\" or [\"property name\", ... ],\n        value\n    ]\n\n    [\n        \"set_property\",\n        \"property name\" or [\"property name\", ... ],\n        value\n    ]",
                        "minArgs": -1,
                        "name": "entries",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "This specifics a modelId of model to use for producing results.  If not specified, the adaptor's current model will be used.",
                        "minArgs": -1,
                        "name": "modelId",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveContextType_",
                        "description": "This specifies additional context information available to model expressions.",
                        "minArgs": -1,
                        "name": "context",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveAction_",
                    "description": "The default action object.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "retrieve_objects": {
                "afwCamelCaseFunctionLabel": "afwRetrieveObjects",
                "brief": "Retrieve adaptive objects",
                "camelCaseFunctionLabel": "retrieveObjects",
                "category": "adaptor",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This function Retrieves adaptive objects from an adaptor, specified by adaptorId, which match the type specified by objectType.  The optional queryString is used to filter the adaptive object list, which match the filter expression.  Use the objectOptions parameter to influence how the objects are viewed.  Options, specific to the adaptorId, may be optionally supplied to this retrieve as well.",
                "functionId": "retrieve_objects",
                "functionLabel": "retrieve_objects",
                "functionSignature": "list(string adaptorId, string objectType, (object _AdaptiveQueryCriteria_) queryCriteria?, (object _AdaptiveObjectOptions_) options?, object adaptorTypeSpecific?)",
                "functionDeclaration": "/* Retrieve adaptive objects */\nlist /* Objects retrieved */ (\n    string adaptorId                                /* Id of adaptor */,\n    string objectType                               /* Id of object type */,\n    (object _AdaptiveQueryCriteria_) queryCriteria? /* Query criteria */,\n    (object _AdaptiveObjectOptions_) options?       /* Object options */,\n    object adaptorTypeSpecific?                     /* Adaptor specific */)",
                "parameters": [
                    {
                        "brief": "Id of adaptor",
                        "dataType": "string",
                        "description": "Id of adaptor containing objects to retrieve.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "brief": "Id of object type",
                        "dataType": "string",
                        "description": "Id of adaptive object type of objects to retrieve.",
                        "minArgs": -1,
                        "name": "objectType",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "brief": "Query criteria",
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveQueryCriteria_",
                        "description": "This is the query criteria for objects to be retrieved. If not specified, all objects will be retrieved.",
                        "minArgs": -1,
                        "name": "queryCriteria",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "brief": "Object options",
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveObjectOptions_",
                        "description": "Object view options.  See /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more information.",
                        "minArgs": -1,
                        "name": "options",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "brief": "Adaptor specific",
                        "dataType": "object",
                        "description": "This is an optional object parameter with an objectType determined by the adaptorType associated with the adaptorId parameter.  If the adaptorType supports this parameter, adaptor afw will have an adaptive object type with an id of:\n\n_AdaptiveAdaptorTypeSpecific_${adaptorType}_retrieve_objects\n\nWhere ${adaptorType} is the adaptor type id.",
                        "minArgs": -1,
                        "name": "adaptorTypeSpecific",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "brief": "Objects retrieved",
                    "dataType": "array",
                    "description": "List of objects retrieved.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "reader_check": {
                "afwCamelCaseFunctionLabel": "afwReaderCheck",
                "camelCaseFunctionLabel": "readerCheck",
                "category": "lmdb",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Check for stale entries in the reader lock table.",
                "functionId": "reader_check",
                "functionLabel": "reader_check",
                "functionSignature": "integer(string adaptorId)",
                "functionDeclaration": "integer (\n    string adaptorId)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Adaptor Id.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "integer",
                    "description": "Number of stale slots that were cleared.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "not": {
                "afwCamelCaseFunctionLabel": "afwNot",
                "brief": "Logical not",
                "camelCaseFunctionLabel": "not",
                "category": "logical",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Evaluates boolean arg1 returning boolean true if arg1 evaluates to false and false if arg1 evaluates to true.",
                "functionId": "not",
                "functionLabel": "not",
                "functionSignature": "boolean(boolean arg)",
                "functionDeclaration": "/* Logical not */\nboolean (\n    boolean arg)",
                "op": "!",
                "parameters": [
                    {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eq_yearMonthDuration": {
                "afwCamelCaseFunctionLabel": "afwEqYearMonthDuration",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "eqYearMonthDuration",
                "category": "yearMonthDuration",
                "dataType": "yearMonthDuration",
                "dataTypeMethodNumber": 6,
                "deprecated": false,
                "description": "Checks for yearMonthDuration arg1 is equal to yearMonthDuration arg2 and return the boolean result.",
                "functionId": "eq<yearMonthDuration>",
                "functionLabel": "eq_yearMonthDuration",
                "functionSignature": "boolean(yearMonthDuration arg1, yearMonthDuration arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    yearMonthDuration arg1,\n    yearMonthDuration arg2)",
                "op": "==",
                "parameters": [
                    {
                        "dataType": "yearMonthDuration",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "yearMonthDuration",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "evaluate_value": {
                "afwCamelCaseFunctionLabel": "afwEvaluateValue",
                "brief": "Evaluate value",
                "camelCaseFunctionLabel": "evaluateValue",
                "category": "compiler",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Evaluate an adaptive value.",
                "functionId": "evaluate_value",
                "functionLabel": "evaluate_value",
                "functionSignature": "any(any value, (object _AdaptiveTemplatePropertiesObjects_) additionalContext?)",
                "functionDeclaration": "/* Evaluate value */\nany (\n    any value,\n    (object _AdaptiveTemplatePropertiesObjects_) additionalContext?)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveTemplatePropertiesObjects_",
                        "description": "Additional context to use first during evaluation.",
                        "minArgs": -1,
                        "name": "additionalContext",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "description": "Evaluated adaptive value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "flag_get_active": {
                "afwCamelCaseFunctionLabel": "afwFlagGetActive",
                "brief": "Get a list of active flags",
                "camelCaseFunctionLabel": "flagGetActive",
                "category": "administrative",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Get a list of of the flagId of flags that are set in the current scope (request).",
                "functionId": "flag_get_active",
                "functionLabel": "flag_get_active",
                "functionSignature": "(list string)()",
                "functionDeclaration": "/* Get a list of active flags */\n(list string) (\n)",
                "parameters": [],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "string",
                    "description": "This is a list of the flagId of flags that are set in the current scope (request).",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },            
            "eqx_hexBinary": {
                "afwCamelCaseFunctionLabel": "afwEqxHexBinary",
                "brief": "Checks for equal and type",
                "camelCaseFunctionLabel": "eqxHexBinary",
                "category": "hexBinary",
                "dataType": "hexBinary",
                "dataTypeMethodNumber": 7,
                "deprecated": false,
                "description": "Checks for hexBinary arg1 is equal to value and type of arg2 and return the boolean result.",
                "functionId": "eqx<hexBinary>",
                "functionLabel": "eqx_hexBinary",
                "functionSignature": "boolean(hexBinary arg1, hexBinary arg2)",
                "functionDeclaration": "/* Checks for equal and type */\nboolean (\n    hexBinary arg1,\n    hexBinary arg2)",
                "op": "===",
                "parameters": [
                    {
                        "dataType": "hexBinary",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "hexBinary",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_date": {
                "afwCamelCaseFunctionLabel": "afwIsDate",
                "brief": "Checks whether value is dataType date",
                "camelCaseFunctionLabel": "isDate",
                "category": "date",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type date.  Use is_list_of_date() instead to test for a list of date.",
                "functionId": "is<date>",
                "functionLabel": "is_date",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType date */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is date.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "min_double": {
                "afwCamelCaseFunctionLabel": "afwMinDouble",
                "brief": "Minimum value",
                "camelCaseFunctionLabel": "minDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 37,
                "deprecated": false,
                "description": "Return the double arg that is less than or equal to the others.",
                "functionId": "min<double>",
                "functionLabel": "min_double",
                "functionSignature": "double(...double args)",
                "functionDeclaration": "/* Minimum value */\ndouble (\n    ...double args)",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": 1,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "double",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ne_x500Name": {
                "afwCamelCaseFunctionLabel": "afwNeX500Name",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "neX500Name",
                "category": "x500Name",
                "dataType": "x500Name",
                "dataTypeMethodNumber": 13,
                "deprecated": false,
                "description": "Checks for x500Name arg1 is not equal to x500Name arg2 and return the boolean result.",
                "functionId": "ne<x500Name>",
                "functionLabel": "ne_x500Name",
                "functionSignature": "boolean(x500Name arg1, x500Name arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    x500Name arg1,\n    x500Name arg2)",
                "op": "!=",
                "parameters": [
                    {
                        "dataType": "x500Name",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "x500Name",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "min_date": {
                "afwCamelCaseFunctionLabel": "afwMinDate",
                "brief": "Minimum value",
                "camelCaseFunctionLabel": "minDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 37,
                "deprecated": false,
                "description": "Return the date arg that is less than or equal to the others..\n\nIf a date value does not include a time-zone value, then the local time-zone value will be assigned.",
                "functionId": "min<date>",
                "functionLabel": "min_date",
                "functionSignature": "date(...date args)",
                "functionDeclaration": "/* Minimum value */\ndate (\n    ...date args)",
                "parameters": [
                    {
                        "dataType": "date",
                        "minArgs": 1,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "date",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "divide_integer": {
                "afwCamelCaseFunctionLabel": "afwDivideInteger",
                "brief": "Divide numbers",
                "camelCaseFunctionLabel": "divideInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 43,
                "deprecated": false,
                "description": "Divide integer dividend by integer divisor and return the integer quotient.",
                "functionId": "divide<integer>",
                "functionLabel": "divide_integer",
                "functionSignature": "integer(integer dividend, integer divisor)",
                "functionDeclaration": "/* Divide numbers */\ninteger (\n    integer dividend,\n    integer divisor)",
                "op": "/",
                "parameters": [
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "dividend",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "divisor",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "compile_json": {
                "afwCamelCaseFunctionLabel": "afwCompileJson",
                "brief": "Compile JSON",
                "camelCaseFunctionLabel": "compileJson",
                "category": "compiler",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Compile a string containing adaptive JSON syntax and return either an unevaluated JSON adaptive value or a string containing the compiler listing.",
                "functionId": "compile_json",
                "functionLabel": "compile_json",
                "functionSignature": "any(string json, any listing?)",
                "functionDeclaration": "/* Compile JSON */\nany (\n    string json,\n    any listing?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "JSON string to compile.",
                        "minArgs": -1,
                        "name": "json",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "If specified, a compiler listing is produced instead of an unevaluated JSON value.\n\nThis parameter can be an integer between 0 and 10 of a string that is used for indentation.  If 0 is specified, no whitespace is added to the resulting string.  If 1 through 10 is specified, that number of spaces is used.",
                        "minArgs": -1,
                        "name": "listing",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "description": "An unevaluated JSON value ready for use by function evaluate() or a string containing the compiler listing.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "intersection_dayTimeDuration": {
                "afwCamelCaseFunctionLabel": "afwIntersectionDayTimeDuration",
                "brief": "Returns intersection of two lists",
                "camelCaseFunctionLabel": "intersectionDayTimeDuration",
                "category": "dayTimeDuration",
                "dataType": "dayTimeDuration",
                "dataTypeMethodNumber": 9,
                "deprecated": false,
                "description": "Returns a list of dayTimeDuration with the values that are common to both list of dayTimeDuration list1 and list2.",
                "functionId": "intersection<dayTimeDuration>",
                "functionLabel": "intersection_dayTimeDuration",
                "functionSignature": "(list dayTimeDuration)((list dayTimeDuration) list1, (list dayTimeDuration) list2)",
                "functionDeclaration": "/* Returns intersection of two lists */\n(list dayTimeDuration) (\n    (list dayTimeDuration) list1,\n    (list dayTimeDuration) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dayTimeDuration",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dayTimeDuration",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "dayTimeDuration",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "index_list": {
                "afwCamelCaseFunctionLabel": "afwIndexList",
                "brief": "List property indexes",
                "camelCaseFunctionLabel": "indexList",
                "category": "indexes",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "List property indexes",
                "functionId": "index_list",
                "functionLabel": "index_list",
                "functionSignature": "object(string adaptorId, string objectType?)",
                "functionDeclaration": "/* List property indexes */\nobject (\n    string adaptorId,\n    string objectType?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Id of adaptor.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Id of adaptive object type indexes",
                        "minArgs": -1,
                        "name": "objectType",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Object response from the index repair process",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_hexBinary": {
                "afwCamelCaseFunctionLabel": "afwBagHexBinary",
                "brief": "Makes a list from args",
                "camelCaseFunctionLabel": "bagHexBinary",
                "category": "hexBinary",
                "dataType": "hexBinary",
                "dataTypeMethodNumber": 2,
                "deprecated": false,
                "description": "Takes any number of hexBinary args and returns a list of list.",
                "functionId": "bag<hexBinary>",
                "functionLabel": "bag_hexBinary",
                "functionSignature": "(list hexBinary)(...(list hexBinary) args)",
                "functionDeclaration": "/* Makes a list from args */\n(list hexBinary) (\n    ...(list hexBinary) args)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "hexBinary",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "hexBinary",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "contains_string": {
                "afwCamelCaseFunctionLabel": "afwContainsString",
                "brief": "Checks whether string value includes a string",
                "camelCaseFunctionLabel": "containsString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 4,
                "deprecated": false,
                "description": "Checks whether string value contains a string and return the boolean result.",
                "functionId": "contains<string>",
                "functionLabel": "contains_string",
                "functionSignature": "boolean(string value, string subString)",
                "functionDeclaration": "/* Checks whether string value includes a string */\nboolean /* Indicates if substring found */ (\n    string value     /* <Type> value to search */,\n    string subString /* Substring to find */)",
                "parameters": [
                    {
                        "brief": "<Type> value to search",
                        "dataType": "string",
                        "description": "string value to search.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "brief": "Substring to find",
                        "dataType": "string",
                        "description": "Substring to find.",
                        "minArgs": -1,
                        "name": "subString",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "brief": "Indicates if substring found",
                    "dataType": "boolean",
                    "description": "Indicates if substring is contained in value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "xpathExpression": {
                "afwCamelCaseFunctionLabel": "afwXpathExpression",
                "brief": "Convert to data type xpathExpression",
                "camelCaseFunctionLabel": "xpathExpression",
                "category": "xpathExpression",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type xpathExpression returning xpathExpression result.",
                "functionId": "xpathExpression",
                "functionLabel": "xpathExpression",
                "functionSignature": "xpathExpression(any arg)",
                "functionDeclaration": "/* Convert to data type xpathExpression */\nxpathExpression (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "xpathExpression",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "last_index_of_anyURI": {
                "afwCamelCaseFunctionLabel": "afwLastIndexOfAnyURI",
                "brief": "Returns index of last occurrence",
                "camelCaseFunctionLabel": "lastIndexOfAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 11,
                "deprecated": false,
                "description": "Returns the zero-based index into anyURI value of the last occurrence of a subString.  If subString is not found, -1 is returned.",
                "functionId": "last_index_of<anyURI>",
                "functionLabel": "last_index_of_anyURI",
                "functionSignature": "integer(anyURI value, string subString, integer startIndex?)",
                "functionDeclaration": "/* Returns index of last occurrence */\ninteger (\n    anyURI value,\n    string subString,\n    integer startIndex?)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "description": "The anyURI value to search.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Substring to search for.",
                        "minArgs": -1,
                        "name": "subString",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "Optional start index for search if different than start of string.",
                        "minArgs": -1,
                        "name": "startIndex",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "description": "Zero-based index of subString or -1 if not found.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "abs_integer": {
                "afwCamelCaseFunctionLabel": "afwAbsInteger",
                "brief": "Absolute value",
                "camelCaseFunctionLabel": "absInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 40,
                "deprecated": false,
                "description": "Compute the absolute value of the integer arg and return the integer result.",
                "functionId": "abs<integer>",
                "functionLabel": "abs_integer",
                "functionSignature": "integer(integer arg)",
                "functionDeclaration": "/* Absolute value */\ninteger (\n    integer arg)",
                "parameters": [
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eqx_anyURI": {
                "afwCamelCaseFunctionLabel": "afwEqxAnyURI",
                "brief": "Checks for equal and type",
                "camelCaseFunctionLabel": "eqxAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 7,
                "deprecated": false,
                "description": "Checks for anyURI arg1 is equal to value and type of arg2 and return the boolean result.",
                "functionId": "eqx<anyURI>",
                "functionLabel": "eqx_anyURI",
                "functionSignature": "boolean(anyURI arg1, anyURI arg2)",
                "functionDeclaration": "/* Checks for equal and type */\nboolean (\n    anyURI arg1,\n    anyURI arg2)",
                "op": "===",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "anyURI",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ne_dayTimeDuration": {
                "afwCamelCaseFunctionLabel": "afwNeDayTimeDuration",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "neDayTimeDuration",
                "category": "dayTimeDuration",
                "dataType": "dayTimeDuration",
                "dataTypeMethodNumber": 13,
                "deprecated": false,
                "description": "Checks for dayTimeDuration arg1 is not equal to dayTimeDuration arg2 and return the boolean result.",
                "functionId": "ne<dayTimeDuration>",
                "functionLabel": "ne_dayTimeDuration",
                "functionSignature": "boolean(dayTimeDuration arg1, dayTimeDuration arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    dayTimeDuration arg1,\n    dayTimeDuration arg2)",
                "op": "!=",
                "parameters": [
                    {
                        "dataType": "dayTimeDuration",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "dayTimeDuration",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "nex_date": {
                "afwCamelCaseFunctionLabel": "afwNexDate",
                "brief": "Checks for not equal value or type",
                "camelCaseFunctionLabel": "nexDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 14,
                "deprecated": false,
                "description": "Checks for date arg1 not equal to value or data type of arg2 and return the boolean result.",
                "functionId": "nex<date>",
                "functionLabel": "nex_date",
                "functionSignature": "boolean(date arg1, date arg2)",
                "functionDeclaration": "/* Checks for not equal value or type */\nboolean (\n    date arg1,\n    date arg2)",
                "op": "!==",
                "parameters": [
                    {
                        "dataType": "date",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "date",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subset_dayTimeDuration": {
                "afwCamelCaseFunctionLabel": "afwSubsetDayTimeDuration",
                "brief": "Determines if the first list is a subset of second list",
                "camelCaseFunctionLabel": "subsetDayTimeDuration",
                "category": "dayTimeDuration",
                "dataType": "dayTimeDuration",
                "dataTypeMethodNumber": 24,
                "deprecated": false,
                "description": "Returns boolean true if the unique values in dayTimeDuration list1 are all in dayTimeDuration list2.",
                "functionId": "subset<dayTimeDuration>",
                "functionLabel": "subset_dayTimeDuration",
                "functionSignature": "boolean((list dayTimeDuration) list1, (list dayTimeDuration) list2)",
                "functionDeclaration": "/* Determines if the first list is a subset of second list */\nboolean (\n    (list dayTimeDuration) list1,\n    (list dayTimeDuration) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dayTimeDuration",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dayTimeDuration",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "one_and_only_string": {
                "afwCamelCaseFunctionLabel": "afwOneAndOnlyString",
                "brief": "Converts a one value list to a string value",
                "camelCaseFunctionLabel": "oneAndOnlyString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 15,
                "deprecated": false,
                "description": "This converts a list list  that contains one value to a data type string value.",
                "functionId": "one_and_only<string>",
                "functionLabel": "one_and_only_string",
                "functionSignature": "string((list list) list)",
                "functionDeclaration": "/* Converts a one value list to a string value */\nstring (\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subset_string": {
                "afwCamelCaseFunctionLabel": "afwSubsetString",
                "brief": "Determines if the first list is a subset of second list",
                "camelCaseFunctionLabel": "subsetString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 24,
                "deprecated": false,
                "description": "Returns boolean true if the unique values in string list1 are all in string list2.",
                "functionId": "subset<string>",
                "functionLabel": "subset_string",
                "functionSignature": "boolean((list string) list1, (list string) list2)",
                "functionDeclaration": "/* Determines if the first list is a subset of second list */\nboolean (\n    (list string) list1,\n    (list string) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "string",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "string",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_size_base64Binary": {
                "afwCamelCaseFunctionLabel": "afwBagSizeBase64Binary",
                "brief": "Returns the number of values in a bag",
                "camelCaseFunctionLabel": "bagSizeBase64Binary",
                "category": "base64Binary",
                "dataType": "base64Binary",
                "dataTypeMethodNumber": 3,
                "deprecated": false,
                "description": "This returns the integer number of values in list bag arg.",
                "functionId": "bag_size<base64Binary>",
                "functionLabel": "bag_size_base64Binary",
                "functionSignature": "integer((list base64Binary) arg)",
                "functionDeclaration": "/* Returns the number of values in a bag */\ninteger (\n    (list base64Binary) arg)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "base64Binary",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_dateTime": {
                "afwCamelCaseFunctionLabel": "afwToDateTime",
                "brief": "Converts string to dateTime",
                "camelCaseFunctionLabel": "toDateTime",
                "category": "polymorphic",
                "dataTypeMethodNumber": 67,
                "deprecated": false,
                "description": "Converts <Type> arg to dateTime.",
                "functionId": "to_dateTime",
                "functionLabel": "to_dateTime",
                "functionSignature": "<Type> dateTime(Type arg)",
                "functionDeclaration": "/* Converts string to dateTime */\n<Type> dateTime (\n    Type arg)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "dateTime",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eq_double": {
                "afwCamelCaseFunctionLabel": "afwEqDouble",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "eqDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 6,
                "deprecated": false,
                "description": "Checks for double arg1 is equal to double arg2 and return the boolean result.",
                "functionId": "eq<double>",
                "functionLabel": "eq_double",
                "functionSignature": "boolean(double arg1, double arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    double arg1,\n    double arg2)",
                "op": "==",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "le": {
                "afwCamelCaseFunctionLabel": "afwLe",
                "brief": "Checks for less than or equal",
                "camelCaseFunctionLabel": "le",
                "category": "polymorphic",
                "dataTypeMethodNumber": 34,
                "deprecated": false,
                "description": "Checks for <Type> arg1 is less than or equal to <Type> arg2 and return the boolean result.",
                "functionId": "le",
                "functionLabel": "le",
                "functionSignature": "<Type> boolean(Type arg1, any arg2)",
                "functionDeclaration": "/* Checks for less than or equal */\n<Type> boolean (\n    Type arg1,\n    any arg2)",
                "op": "<=",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "date",
                    "dateTime",
                    "double",
                    "integer",
                    "string",
                    "time"
                ],
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "max_dateTime": {
                "afwCamelCaseFunctionLabel": "afwMaxDateTime",
                "brief": "Maximum value",
                "camelCaseFunctionLabel": "maxDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 36,
                "deprecated": false,
                "description": "Return the dateTime arg that is greater than or equal to the others.\n\nIf a dateTime value does not include a time-zone value, then the local time-zone value will be assigned.",
                "functionId": "max<dateTime>",
                "functionLabel": "max_dateTime",
                "functionSignature": "dateTime(...dateTime args)",
                "functionDeclaration": "/* Maximum value */\ndateTime (\n    ...dateTime args)",
                "parameters": [
                    {
                        "dataType": "dateTime",
                        "minArgs": 1,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "dateTime",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_rfc822Name": {
                "afwCamelCaseFunctionLabel": "afwIsRfc822Name",
                "brief": "Checks whether value is dataType rfc822Name",
                "camelCaseFunctionLabel": "isRfc822Name",
                "category": "rfc822Name",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type rfc822Name.  Use is_list_of_rfc822Name() instead to test for a list of rfc822Name.",
                "functionId": "is<rfc822Name>",
                "functionLabel": "is_rfc822Name",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType rfc822Name */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is rfc822Name.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_template": {
                "afwCamelCaseFunctionLabel": "afwToStringTemplate",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringTemplate",
                "category": "template",
                "dataType": "template",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts template arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<template>",
                "functionLabel": "to_string_template",
                "functionSignature": "string(template arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    template arg)",
                "parameters": [
                    {
                        "dataType": "template",
                        "description": "A template value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_date_string": {
                "afwCamelCaseFunctionLabel": "afwToDateString",
                "brief": "Converts string to date",
                "camelCaseFunctionLabel": "toDateString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 66,
                "deprecated": false,
                "description": "Converts string arg to date.",
                "functionId": "to_date<string>",
                "functionLabel": "to_date_string",
                "functionSignature": "date(string arg)",
                "functionDeclaration": "/* Converts string to date */\ndate (\n    string arg)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "date",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "substring_string": {
                "afwCamelCaseFunctionLabel": "afwSubstringString",
                "brief": "Extract a substring",
                "camelCaseFunctionLabel": "substringString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 25,
                "deprecated": false,
                "description": "Returns the string substring of value beginning at zero-based position integer startIndex and ending at the position before integer endIndex.  Specify -1 or omitting endIndex to return up to end of string.",
                "functionId": "substring<string>",
                "functionLabel": "substring_string",
                "functionSignature": "string(string string, integer startIndex, integer endIndex?)",
                "functionDeclaration": "/* Extract a substring */\nstring (\n    string string,\n    integer startIndex,\n    integer endIndex?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "string",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "startIndex",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "endIndex",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_integer": {
                "afwCamelCaseFunctionLabel": "afwBagInteger",
                "brief": "Makes a list from args",
                "camelCaseFunctionLabel": "bagInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 2,
                "deprecated": false,
                "description": "Takes any number of integer args and returns a list of list.",
                "functionId": "bag<integer>",
                "functionLabel": "bag_integer",
                "functionSignature": "(list integer)(...(list integer) args)",
                "functionDeclaration": "/* Makes a list from args */\n(list integer) (\n    ...(list integer) args)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "integer",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "model_default_delete_object_action": {
                "afwCamelCaseFunctionLabel": "afwModelDefaultDeleteObjectAction",
                "brief": "Produce a default _AdaptiveAction_ object for an delete object request to a model adaptor.",
                "camelCaseFunctionLabel": "modelDefaultDeleteObjectAction",
                "category": "model",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This function returns a _AdaptiveAction_ object for the default action performed if a onDeleteObject parameter is not specified on the associated _AdaptiveModelObjectType_.  The action is not performed, but be aware that functions called while producing the _AdaptiveAction_ object may cause side effects.  This function can be called as part of a onDelete expression or for testing.",
                "functionId": "model_default_delete_object_action",
                "functionLabel": "model_default_delete_object_action",
                "functionSignature": "(object _AdaptiveAction_)(string adaptorId, string objectType, string objectId, string modelId?, (object _AdaptiveContextType_) context?)",
                "functionDeclaration": "/* Produce a default _AdaptiveAction_ object for an delete object request to a model adaptor. */\n(object _AdaptiveAction_) (\n    string adaptorId,\n    string objectType,\n    string objectId,\n    string modelId?,\n    (object _AdaptiveContextType_) context?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "This is the adaptorId of a model adaptor.  Variable custom::adaptorId can be used to access this value in model expressions.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "This is the adaptive object type of object being deleted.  Variable custom::objectType can be used to access this value in model expressions.",
                        "minArgs": -1,
                        "name": "objectType",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "This is the objectId of object to delete.  Variable custom::object can be used to access this value in model expressions.",
                        "minArgs": -1,
                        "name": "objectId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "This specifics a modelId of model to use for producing results.  If not specified, the adaptor's current model will be used.",
                        "minArgs": -1,
                        "name": "modelId",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveContextType_",
                        "description": "This specifies additional context information available to model expressions.",
                        "minArgs": -1,
                        "name": "context",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveAction_",
                    "description": "The default action object.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "union_rfc822Name": {
                "afwCamelCaseFunctionLabel": "afwUnionRfc822Name",
                "brief": "Returns union of two or more string lists",
                "camelCaseFunctionLabel": "unionRfc822Name",
                "category": "rfc822Name",
                "dataType": "rfc822Name",
                "dataTypeMethodNumber": 27,
                "deprecated": false,
                "description": "Returns a list of rfc822Name contains all of the unique values in two or more list of rfc822Name args.",
                "functionId": "union<rfc822Name>",
                "functionLabel": "union_rfc822Name",
                "functionSignature": "(list rfc822Name)(...(list rfc822Name) lists)",
                "functionDeclaration": "/* Returns union of two or more string lists */\n(list rfc822Name) (\n    ...(list rfc822Name) lists)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "rfc822Name",
                        "description": "Two or more lists.",
                        "minArgs": 2,
                        "name": "lists",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "rfc822Name",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "lt": {
                "afwCamelCaseFunctionLabel": "afwLt",
                "brief": "Checks for less than",
                "camelCaseFunctionLabel": "lt",
                "category": "polymorphic",
                "dataTypeMethodNumber": 35,
                "deprecated": false,
                "description": "Checks for <Type> arg1 is less that <Type> arg2 and return the boolean result.",
                "functionId": "lt",
                "functionLabel": "lt",
                "functionSignature": "<Type> boolean(Type arg1, Type arg2)",
                "functionDeclaration": "/* Checks for less than */\n<Type> boolean (\n    Type arg1,\n    Type arg2)",
                "op": "<",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "date",
                    "dateTime",
                    "double",
                    "integer",
                    "string",
                    "time"
                ],
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_ipAddress": {
                "afwCamelCaseFunctionLabel": "afwToIpAddress",
                "brief": "Converts string to ipAddress",
                "camelCaseFunctionLabel": "toIpAddress",
                "category": "polymorphic",
                "dataTypeMethodNumber": 70,
                "deprecated": false,
                "description": "Converts <Type> arg to ipAddress.",
                "functionId": "to_ipAddress",
                "functionLabel": "to_ipAddress",
                "functionSignature": "<Type> ipAddress(Type arg)",
                "functionDeclaration": "/* Converts string to ipAddress */\n<Type> ipAddress (\n    Type arg)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "ipAddress",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_base64Binary": {
                "afwCamelCaseFunctionLabel": "afwToStringBase64Binary",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringBase64Binary",
                "category": "base64Binary",
                "dataType": "base64Binary",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts base64Binary arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<base64Binary>",
                "functionLabel": "to_string_base64Binary",
                "functionSignature": "string(base64Binary arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    base64Binary arg)",
                "parameters": [
                    {
                        "dataType": "base64Binary",
                        "description": "A base64Binary value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "add_yearMonthDuration_date": {
                "afwCamelCaseFunctionLabel": "afwAddYearMonthDurationDate",
                "brief": "Add duration",
                "camelCaseFunctionLabel": "addYearMonthDurationDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 31,
                "deprecated": false,
                "description": "Add date arg1 to yearMonthDuration arg2 and return the date result.",
                "functionId": "add_yearMonthDuration<date>",
                "functionLabel": "add_yearMonthDuration_date",
                "functionSignature": "date(date arg1, yearMonthDuration arg2)",
                "functionDeclaration": "/* Add duration */\ndate (\n    date arg1,\n    yearMonthDuration arg2)",
                "parameters": [
                    {
                        "dataType": "date",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "yearMonthDuration",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "date",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "max_date": {
                "afwCamelCaseFunctionLabel": "afwMaxDate",
                "brief": "Maximum value",
                "camelCaseFunctionLabel": "maxDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 36,
                "deprecated": false,
                "description": "Return the date arg that is greater than or equal to the others..\n\nIf a date value does not include a time-zone value, then the local time-zone value will be assigned.",
                "functionId": "max<date>",
                "functionLabel": "max_date",
                "functionSignature": "date(...date args)",
                "functionDeclaration": "/* Maximum value */\ndate (\n    ...date args)",
                "parameters": [
                    {
                        "dataType": "date",
                        "minArgs": 1,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "date",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_in_dayTimeDuration": {
                "afwCamelCaseFunctionLabel": "afwIsInDayTimeDuration",
                "brief": "Checks whether a value is in a list",
                "camelCaseFunctionLabel": "isInDayTimeDuration",
                "category": "dayTimeDuration",
                "dataType": "dayTimeDuration",
                "dataTypeMethodNumber": 10,
                "deprecated": false,
                "description": "Checks whether dayTimeDuration value is in list of dayTimeDuration list and returns the boolean result.",
                "functionId": "is_in<dayTimeDuration>",
                "functionLabel": "is_in_dayTimeDuration",
                "functionSignature": "boolean(dayTimeDuration value, (list dayTimeDuration) list)",
                "functionDeclaration": "/* Checks whether a value is in a list */\nboolean (\n    dayTimeDuration value,\n    (list dayTimeDuration) list)",
                "parameters": [
                    {
                        "dataType": "dayTimeDuration",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dayTimeDuration",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "filter": {
                "afwCamelCaseFunctionLabel": "afwFilter",
                "brief": "Filter a list",
                "camelCaseFunctionLabel": "filter",
                "category": "higher_order_array",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This produces a list containing only values from another list that pass a predicate test.",
                "functionId": "filter",
                "functionLabel": "filter",
                "functionSignature": "list((function (boolean)(...)) predicate, ...any args)",
                "functionDeclaration": "/* Filter a list */\nlist (\n    (function (boolean)(...)) predicate,\n    ...any args)",
                "parameters": [
                    {
                        "dataType": "function",
                        "dataTypeParameter": "(boolean)(...)",
                        "description": "This is a boolean function that is called to determine if a list entry should be included in the returned list.",
                        "minArgs": -1,
                        "name": "predicate",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "These are the args passed to the predicate with the exception that the first list is passed as the single current value from the list.  At least one list is required.",
                        "minArgs": 1,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "description": "This is the resulting filtered list.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_in_anyURI": {
                "afwCamelCaseFunctionLabel": "afwIsInAnyURI",
                "brief": "Checks whether a value is in a list",
                "camelCaseFunctionLabel": "isInAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 10,
                "deprecated": false,
                "description": "Checks whether anyURI value is in list of anyURI list and returns the boolean result.",
                "functionId": "is_in<anyURI>",
                "functionLabel": "is_in_anyURI",
                "functionSignature": "boolean(anyURI value, (list anyURI) list)",
                "functionDeclaration": "/* Checks whether a value is in a list */\nboolean (\n    anyURI value,\n    (list anyURI) list)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "anyURI",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_ia5String": {
                "afwCamelCaseFunctionLabel": "afwToStringIa5String",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringIa5String",
                "category": "ia5String",
                "dataType": "ia5String",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts ia5String arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<ia5String>",
                "functionLabel": "to_string_ia5String",
                "functionSignature": "string(ia5String arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    ia5String arg)",
                "parameters": [
                    {
                        "dataType": "ia5String",
                        "description": "A ia5String value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_in_ipAddress": {
                "afwCamelCaseFunctionLabel": "afwIsInIpAddress",
                "brief": "Checks whether a value is in a list",
                "camelCaseFunctionLabel": "isInIpAddress",
                "category": "ipAddress",
                "dataType": "ipAddress",
                "dataTypeMethodNumber": 10,
                "deprecated": false,
                "description": "Checks whether ipAddress value is in list of ipAddress list and returns the boolean result.",
                "functionId": "is_in<ipAddress>",
                "functionLabel": "is_in_ipAddress",
                "functionSignature": "boolean(ipAddress value, (list ipAddress) list)",
                "functionDeclaration": "/* Checks whether a value is in a list */\nboolean (\n    ipAddress value,\n    (list ipAddress) list)",
                "parameters": [
                    {
                        "dataType": "ipAddress",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "ipAddress",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "journal_get_by_cursor": {
                "afwCamelCaseFunctionLabel": "afwJournalGetByCursor",
                "brief": "Get journal entry at cursor",
                "camelCaseFunctionLabel": "journalGetByCursor",
                "category": "journal",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Get journal entry specified by entry_cursor parameter.\n\nThis option will set response properties \"entry\" and \"cursor\" if there is an entry to retrieve.  If an entry with the supplied cursor does not exist, a not_found error is thrown.",
                "functionId": "journal_get_by_cursor",
                "functionLabel": "journal_get_by_cursor",
                "functionSignature": "object(string adaptorId, string cursor)",
                "functionDeclaration": "/* Get journal entry at cursor */\nobject (\n    string adaptorId,\n    string cursor)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Id of adaptor.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Journal entry cursor.",
                        "minArgs": -1,
                        "name": "cursor",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Response object.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "password": {
                "afwCamelCaseFunctionLabel": "afwPassword",
                "brief": "Convert to data type password",
                "camelCaseFunctionLabel": "password",
                "category": "password",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type password returning password result.",
                "functionId": "password",
                "functionLabel": "password",
                "functionSignature": "password(any arg)",
                "functionDeclaration": "/* Convert to data type password */\npassword (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "password",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "intersection": {
                "afwCamelCaseFunctionLabel": "afwIntersection",
                "brief": "Returns intersection of two lists",
                "camelCaseFunctionLabel": "intersection",
                "category": "polymorphic",
                "dataTypeMethodNumber": 9,
                "deprecated": false,
                "description": "Returns a list of <Type> with the values that are common to both list of <Type> list1 and list2.",
                "functionId": "intersection",
                "functionLabel": "intersection",
                "functionSignature": "<Type> list(list list1, list list2)",
                "functionDeclaration": "/* Returns intersection of two lists */\n<Type> list (\n    list list1,\n    list list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": true
                    },
                    {
                        "dataType": "array",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": true
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "base64Binary",
                    "boolean",
                    "date",
                    "dateTime",
                    "dayTimeDuration",
                    "double",
                    "hexBinary",
                    "integer",
                    "rfc822Name",
                    "string",
                    "time",
                    "x500Name",
                    "yearMonthDuration"
                ],
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": true
                },
                "scriptSupportNumber": 0
            },
            "while": {
                "afwCamelCaseFunctionLabel": "afwWhile",
                "brief": "Evaluate a list of values while a condition is true",
                "camelCaseFunctionLabel": "while",
                "category": "script",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This creates a new structured block with a new nested variable scope.\n\nThis function will evaluate a list of values while a condition is true.  The condition is tested at the beginning of the loop.  If the condition is false for the first iteration, the loop returns a null value.  See the related functions \"break\", \"continue\", \"return\" and \"throw\".",
                "functionId": "while",
                "functionLabel": "while",
                "functionSignature": "any(boolean condition, list body)",
                "functionDeclaration": "/* Evaluate a list of values while a condition is true */\nany (\n    boolean condition,\n    list body)",
                "parameters": [
                    {
                        "dataType": "boolean",
                        "description": "While this condition is true, the loop will continue.  This is evaluated in the loop's scope.",
                        "minArgs": -1,
                        "name": "condition",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "description": "This is a list of values that are evaluated for each iteration of the loop.  Each value in body is evaluated in order until the end of the list or until a \"break\", \"continue\", \"return\" or \"throw\" function is encountered.",
                        "minArgs": -1,
                        "name": "body",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "description": "The last value evaluated in body or null if condition evaluates to false the first time.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 11
            },
            "rule_permit_overrides": {
                "afwCamelCaseFunctionLabel": "afwRulePermitOverrides",
                "brief": "Rule combining algorithm - permit_overrides",
                "camelCaseFunctionLabel": "rulePermitOverrides",
                "category": "rule_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Rule combining algorithm for permit overrides.",
                "functionId": "rule_permit_overrides",
                "functionLabel": "rule_permit_overrides",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Rule combining algorithm - permit_overrides */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "regexp_replace_string": {
                "afwCamelCaseFunctionLabel": "afwRegexpReplaceString",
                "brief": "Replace strings matching a regular expression",
                "camelCaseFunctionLabel": "regexpReplaceString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 18,
                "deprecated": false,
                "description": "Replace matched values for a regular expression in a string value.",
                "functionId": "regexp_replace<string>",
                "functionLabel": "regexp_replace_string",
                "functionSignature": "string(string value, string regexp, string replacement, integer limit?)",
                "functionDeclaration": "/* Replace strings matching a regular expression */\nstring (\n    string value,\n    string regexp,\n    string replacement,\n    integer limit?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "The original string value.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "A regular expression to use for search.",
                        "minArgs": -1,
                        "name": "regexp",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "The replacement string.",
                        "minArgs": -1,
                        "name": "replacement",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "This is the maximum times to replace.  The default is 1.  Specify -1 to replace all occurrences.",
                        "minArgs": -1,
                        "name": "limit",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "A string value with the matched string(s) replaced.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "le_integer": {
                "afwCamelCaseFunctionLabel": "afwLeInteger",
                "brief": "Checks for less than or equal",
                "camelCaseFunctionLabel": "leInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 34,
                "deprecated": false,
                "description": "Checks for integer arg1 is less than or equal to integer arg2 and return the boolean result.",
                "functionId": "le<integer>",
                "functionLabel": "le_integer",
                "functionSignature": "boolean(integer arg1, any arg2)",
                "functionDeclaration": "/* Checks for less than or equal */\nboolean (\n    integer arg1,\n    any arg2)",
                "op": "<=",
                "parameters": [
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eq_base64Binary": {
                "afwCamelCaseFunctionLabel": "afwEqBase64Binary",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "eqBase64Binary",
                "category": "base64Binary",
                "dataType": "base64Binary",
                "dataTypeMethodNumber": 6,
                "deprecated": false,
                "description": "Checks for base64Binary arg1 is equal to base64Binary arg2 and return the boolean result.",
                "functionId": "eq<base64Binary>",
                "functionLabel": "eq_base64Binary",
                "functionSignature": "boolean(base64Binary arg1, base64Binary arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    base64Binary arg1,\n    base64Binary arg2)",
                "op": "==",
                "parameters": [
                    {
                        "dataType": "base64Binary",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "base64Binary",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "union_string": {
                "afwCamelCaseFunctionLabel": "afwUnionString",
                "brief": "Returns union of two or more string lists",
                "camelCaseFunctionLabel": "unionString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 27,
                "deprecated": false,
                "description": "Returns a list of string contains all of the unique values in two or more list of string args.",
                "functionId": "union<string>",
                "functionLabel": "union_string",
                "functionSignature": "(list string)(...(list string) lists)",
                "functionDeclaration": "/* Returns union of two or more string lists */\n(list string) (\n    ...(list string) lists)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "string",
                        "description": "Two or more lists.",
                        "minArgs": 2,
                        "name": "lists",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "string",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "index_of_string": {
                "afwCamelCaseFunctionLabel": "afwIndexOfString",
                "brief": "Returns index of first occurrence",
                "camelCaseFunctionLabel": "indexOfString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 8,
                "deprecated": false,
                "description": "Returns the zero-based index into string value of subString.  If subString is not found, -1 is returned.",
                "functionId": "index_of<string>",
                "functionLabel": "index_of_string",
                "functionSignature": "integer(string value, string subString, integer startIndex?)",
                "functionDeclaration": "/* Returns index of first occurrence */\ninteger (\n    string value,\n    string subString,\n    integer startIndex?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "The string value to search.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Substring to search for.",
                        "minArgs": -1,
                        "name": "subString",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "Optional start index for search if different than start of string.",
                        "minArgs": -1,
                        "name": "startIndex",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "description": "Zero-based index of subString or -1 if not found.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "round_double": {
                "afwCamelCaseFunctionLabel": "afwRoundDouble",
                "brief": "Round to nearest integer",
                "camelCaseFunctionLabel": "roundDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 48,
                "deprecated": false,
                "description": "Determine the integer closest to double arg and return the double result.",
                "functionId": "round<double>",
                "functionLabel": "round_double",
                "functionSignature": "double(double arg)",
                "functionDeclaration": "/* Round to nearest integer */\ndouble (\n    double arg)",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "double",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "set_equals_x500Name": {
                "afwCamelCaseFunctionLabel": "afwSetEqualsX500Name",
                "brief": "Checks whether two lists are subsets of each other",
                "camelCaseFunctionLabel": "setEqualsX500Name",
                "category": "x500Name",
                "dataType": "x500Name",
                "dataTypeMethodNumber": 21,
                "deprecated": false,
                "description": "Returns boolean true if x500Name list1 and x500Name list2 are subsets of each other and return the boolean result.",
                "functionId": "set_equals<x500Name>",
                "functionLabel": "set_equals_x500Name",
                "functionSignature": "boolean((list x500Name) list1, (list x500Name) list2)",
                "functionDeclaration": "/* Checks whether two lists are subsets of each other */\nboolean (\n    (list x500Name) list1,\n    (list x500Name) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "x500Name",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "x500Name",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_size": {
                "afwCamelCaseFunctionLabel": "afwBagSize",
                "brief": "Returns the number of values in a bag",
                "camelCaseFunctionLabel": "bagSize",
                "category": "polymorphic",
                "dataTypeMethodNumber": 3,
                "deprecated": false,
                "description": "This returns the integer number of values in list bag arg.",
                "functionId": "bag_size",
                "functionLabel": "bag_size",
                "functionSignature": "<Type> integer(list arg)",
                "functionDeclaration": "/* Returns the number of values in a bag */\n<Type> integer (\n    list arg)",
                "parameters": [
                    {
                        "dataType": "array",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": true
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "base64Binary",
                    "boolean",
                    "date",
                    "dateTime",
                    "dayTimeDuration",
                    "dnsName",
                    "double",
                    "hexBinary",
                    "integer",
                    "ipAddress",
                    "rfc822Name",
                    "string",
                    "time",
                    "x500Name",
                    "yearMonthDuration"
                ],
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "intersection_x500Name": {
                "afwCamelCaseFunctionLabel": "afwIntersectionX500Name",
                "brief": "Returns intersection of two lists",
                "camelCaseFunctionLabel": "intersectionX500Name",
                "category": "x500Name",
                "dataType": "x500Name",
                "dataTypeMethodNumber": 9,
                "deprecated": false,
                "description": "Returns a list of x500Name with the values that are common to both list of x500Name list1 and list2.",
                "functionId": "intersection<x500Name>",
                "functionLabel": "intersection_x500Name",
                "functionSignature": "(list x500Name)((list x500Name) list1, (list x500Name) list2)",
                "functionDeclaration": "/* Returns intersection of two lists */\n(list x500Name) (\n    (list x500Name) list1,\n    (list x500Name) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "x500Name",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "x500Name",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "x500Name",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "variable_exists": {
                "afwCamelCaseFunctionLabel": "afwVariableExists",
                "brief": "Determine if a variable exists",
                "camelCaseFunctionLabel": "variableExists",
                "category": "miscellaneous",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Return the true if the named variable exists.",
                "functionId": "variable_exists",
                "functionLabel": "variable_exists",
                "functionSignature": "boolean(string name)",
                "functionDeclaration": "/* Determine if a variable exists */\nboolean (\n    string name)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Name of variable to check.  The name can optionally be preceded with a qualifier followed by \"::\".",
                        "minArgs": -1,
                        "name": "name",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if variable exists.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "scope_create_time_utc": {
                "afwCamelCaseFunctionLabel": "afwScopeCreateTimeUtc",
                "brief": "Scope local dataTime",
                "camelCaseFunctionLabel": "scopeCreateTimeUtc",
                "category": "miscellaneous",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Return UTC dateTime when scope was created.  This will usually be the start of request time.",
                "functionId": "scope_create_time_utc",
                "functionLabel": "scope_create_time_utc",
                "functionSignature": "dateTime()",
                "functionDeclaration": "/* Scope local dataTime */\ndateTime (\n)",
                "parameters": [],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "dateTime",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "function": {
                "afwCamelCaseFunctionLabel": "afwFunction",
                "camelCaseFunctionLabel": "function",
                "category": "function",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type function returning function result.",
                "functionId": "function",
                "functionLabel": "function",
                "functionSignature": "function(any arg)",
                "functionDeclaration": "function (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "function",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ne_rfc822Name": {
                "afwCamelCaseFunctionLabel": "afwNeRfc822Name",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "neRfc822Name",
                "category": "rfc822Name",
                "dataType": "rfc822Name",
                "dataTypeMethodNumber": 13,
                "deprecated": false,
                "description": "Checks for rfc822Name arg1 is not equal to rfc822Name arg2 and return the boolean result.",
                "functionId": "ne<rfc822Name>",
                "functionLabel": "ne_rfc822Name",
                "functionSignature": "boolean(rfc822Name arg1, rfc822Name arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    rfc822Name arg1,\n    rfc822Name arg2)",
                "op": "!=",
                "parameters": [
                    {
                        "dataType": "rfc822Name",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "rfc822Name",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "flag_get_active_defaults": {
                "afwCamelCaseFunctionLabel": "afwFlagGetActiveDefaults",
                "brief": "Get a list of default active flags",
                "camelCaseFunctionLabel": "flagGetActiveDefaults",
                "category": "administrative",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Get a list of the flagId of flags that are set by default when a scope (request) is created.",
                "functionId": "flag_get_active_defaults",
                "functionLabel": "flag_get_active_defaults",
                "functionSignature": "(list string)()",
                "functionDeclaration": "/* Get a list of default active flags */\n(list string) (\n)",
                "parameters": [],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "string",
                    "description": "This is a list of the flagId of flags that are set by default when a scope (request) is created.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "evaluate_xpathExpression": {
                "afwCamelCaseFunctionLabel": "afwEvaluateXpathExpression",
                "brief": "Evaluate xpathExpression value",
                "camelCaseFunctionLabel": "evaluateXpathExpression",
                "category": "xpathExpression",
                "dataType": "xpathExpression",
                "dataTypeMethodNumber": 52,
                "deprecated": false,
                "description": "Compile and evaluate xpathExpression value.",
                "functionId": "evaluate<xpathExpression>",
                "functionLabel": "evaluate_xpathExpression",
                "functionSignature": "unevaluated(xpathExpression source, (object _AdaptiveTemplatePropertiesObjects_) additionalContext?)",
                "functionDeclaration": "/* Evaluate xpathExpression value */\nunevaluated (\n    xpathExpression source                                        /* Source to evaluate */,\n    (object _AdaptiveTemplatePropertiesObjects_) additionalContext? /* Additional context */)",
                "parameters": [
                    {
                        "brief": "Source to evaluate",
                        "dataType": "xpathExpression",
                        "description": "xpathExpression string to compile and evaluate",
                        "minArgs": -1,
                        "name": "source",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "brief": "Additional context",
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveTemplatePropertiesObjects_",
                        "description": "Additional context to use first during evaluation.",
                        "minArgs": -1,
                        "name": "additionalContext",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "unevaluated",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_in_date": {
                "afwCamelCaseFunctionLabel": "afwIsInDate",
                "brief": "Checks whether a value is in a list",
                "camelCaseFunctionLabel": "isInDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 10,
                "deprecated": false,
                "description": "Checks whether date value is in list of date list and returns the boolean result.",
                "functionId": "is_in<date>",
                "functionLabel": "is_in_date",
                "functionSignature": "boolean(date value, (list date) list)",
                "functionDeclaration": "/* Checks whether a value is in a list */\nboolean (\n    date value,\n    (list date) list)",
                "parameters": [
                    {
                        "dataType": "date",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "date",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_size_dateTime": {
                "afwCamelCaseFunctionLabel": "afwBagSizeDateTime",
                "brief": "Returns the number of values in a bag",
                "camelCaseFunctionLabel": "bagSizeDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 3,
                "deprecated": false,
                "description": "This returns the integer number of values in list bag arg.",
                "functionId": "bag_size<dateTime>",
                "functionLabel": "bag_size_dateTime",
                "functionSignature": "integer((list dateTime) arg)",
                "functionDeclaration": "/* Returns the number of values in a bag */\ninteger (\n    (list dateTime) arg)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dateTime",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_rfc822Name_string": {
                "afwCamelCaseFunctionLabel": "afwToRfc822NameString",
                "brief": "Converts string to rfc822Name",
                "camelCaseFunctionLabel": "toRfc822NameString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 71,
                "deprecated": false,
                "description": "Converts string arg to rfc822Name.",
                "functionId": "to_rfc822Name<string>",
                "functionLabel": "to_rfc822Name_string",
                "functionSignature": "rfc822Name(string arg)",
                "functionDeclaration": "/* Converts string to rfc822Name */\nrfc822Name (\n    string arg)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "rfc822Name",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ne": {
                "afwCamelCaseFunctionLabel": "afwNe",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "ne",
                "category": "polymorphic",
                "dataTypeMethodNumber": 13,
                "deprecated": false,
                "description": "Checks for <Type> arg1 is not equal to <Type> arg2 and return the boolean result.",
                "functionId": "ne",
                "functionLabel": "ne",
                "functionSignature": "<Type> boolean(Type arg1, Type arg2)",
                "functionDeclaration": "/* Checks for equal */\n<Type> boolean (\n    Type arg1,\n    Type arg2)",
                "op": "!=",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "base64Binary",
                    "boolean",
                    "date",
                    "dateTime",
                    "dayTimeDuration",
                    "double",
                    "hexBinary",
                    "integer",
                    "rfc822Name",
                    "string",
                    "time",
                    "x500Name",
                    "yearMonthDuration"
                ],
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_null": {
                "afwCamelCaseFunctionLabel": "afwToStringNull",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringNull",
                "category": "null",
                "dataType": "null",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts null arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<null>",
                "functionLabel": "to_string_null",
                "functionSignature": "string(null arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    null arg)",
                "parameters": [
                    {
                        "dataType": "null",
                        "description": "A null value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "and": {
                "afwCamelCaseFunctionLabel": "afwAnd",
                "brief": "Logical and",
                "camelCaseFunctionLabel": "and",
                "category": "logical",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Evaluates 0 or more boolean args returning boolean true if there are no args and boolean false if any args evaluate to false.  All args after the first false remain unevaluated.",
                "functionId": "and",
                "functionLabel": "and",
                "functionSignature": "boolean(...boolean args)",
                "functionDeclaration": "/* Logical and */\nboolean (\n    ...boolean args)",
                "op": "&&",
                "parameters": [
                    {
                        "dataType": "boolean",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "safe_evaluate": {
                "afwCamelCaseFunctionLabel": "afwSafeEvaluate",
                "brief": "Safe evaluate",
                "camelCaseFunctionLabel": "safeEvaluate",
                "category": "compiler",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Return the evaluated adaptive value.  If an exception occurs, return evaluated error instead.",
                "functionId": "safe_evaluate",
                "functionLabel": "safe_evaluate",
                "functionSignature": "any(any value, any error)",
                "functionDeclaration": "/* Safe evaluate */\nany (\n    any value,\n    any error)",
                "parameters": [
                    {
                        "description": "Value to evaluated",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "Value to evaluate and return if exception occurs.  If an error occurs evaluating this value, the exception will continue.",
                        "minArgs": -1,
                        "name": "error",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "description": "Evaluated adaptive value or error value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "pow": {
                "afwCamelCaseFunctionLabel": "afwPow",
                "brief": "Base raised to a power",
                "camelCaseFunctionLabel": "pow",
                "category": "polymorphic",
                "dataTypeMethodNumber": 47,
                "deprecated": false,
                "description": "This returns the value of base raised to a power.",
                "functionId": "pow",
                "functionLabel": "pow",
                "functionSignature": "<Type> Type(Type base, Type exponent)",
                "functionDeclaration": "/* Base raised to a power */\n<Type> Type (\n    Type base,\n    Type exponent)",
                "parameters": [
                    {
                        "description": "Base value.",
                        "minArgs": -1,
                        "name": "base",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "Exponent value.",
                        "minArgs": -1,
                        "name": "exponent",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "double"
                ],
                "pure": true,
                "returns": {
                    "description": "Base raised to the power exponent.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_x500Name": {
                "afwCamelCaseFunctionLabel": "afwBagX500Name",
                "brief": "Makes a list from args",
                "camelCaseFunctionLabel": "bagX500Name",
                "category": "x500Name",
                "dataType": "x500Name",
                "dataTypeMethodNumber": 2,
                "deprecated": false,
                "description": "Takes any number of x500Name args and returns a list of list.",
                "functionId": "bag<x500Name>",
                "functionLabel": "bag_x500Name",
                "functionSignature": "(list x500Name)(...(list x500Name) args)",
                "functionDeclaration": "/* Makes a list from args */\n(list x500Name) (\n    ...(list x500Name) args)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "x500Name",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "x500Name",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "retrieve_objects_with_uri": {
                "afwCamelCaseFunctionLabel": "afwRetrieveObjectsWithUri",
                "brief": "Retrieve adaptive object with URI",
                "camelCaseFunctionLabel": "retrieveObjectsWithUri",
                "category": "adaptor",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Retrieve adaptive objects with a given URI.",
                "functionId": "retrieve_objects_with_uri",
                "functionLabel": "retrieve_objects_with_uri",
                "functionSignature": "list(anyURI uri, (object _AdaptiveObjectOptions_) options?, object adaptorTypeSpecific?)",
                "functionDeclaration": "/* Retrieve adaptive object with URI */\nlist (\n    anyURI uri,\n    (object _AdaptiveObjectOptions_) options?,\n    object adaptorTypeSpecific?)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "description": "URI of objects to retrieve.  If a URI begins with a single slash ('/'), it is the local object path.  A query string can be specified.",
                        "minArgs": -1,
                        "name": "uri",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveObjectOptions_",
                        "description": "Object view options.  See /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more information.",
                        "minArgs": -1,
                        "name": "options",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "This is an optional object parameter with an objectType determined by the adaptorType associated with the adaptorId parameter.  If the adaptorType supports this parameter, adaptor afw will have an adaptive object type with an id of:\n\n_AdaptiveAdaptorTypeSpecific_${adaptorType}_retrieve_objects\n\nWhere ${adaptorType} is the adaptor type id.",
                        "minArgs": -1,
                        "name": "adaptorTypeSpecific",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "array",
                    "description": "Bag of objects retrieved.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "any_of": {
                "afwCamelCaseFunctionLabel": "afwAnyOf",
                "brief": "Any values pass a test",
                "camelCaseFunctionLabel": "anyOf",
                "category": "higher_order_array",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Returns true if any value in a list pass the predicate test.",
                "functionId": "any_of",
                "functionLabel": "any_of",
                "functionSignature": "boolean((function (boolean)(...)) predicate, ...any args)",
                "functionDeclaration": "/* Any values pass a test */\nboolean (\n    (function (boolean)(...)) predicate,\n    ...any args)",
                "parameters": [
                    {
                        "dataType": "function",
                        "dataTypeParameter": "(boolean)(...)",
                        "description": "This function is called for each value in the first list in args or until true is returned.  If no calls return true, the result is false.",
                        "minArgs": -1,
                        "name": "predicate",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "These are the parameters passed to predicate with the exception that the first list is passed one value at a time.  At least one list is required.",
                        "minArgs": 1,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eqx_time": {
                "afwCamelCaseFunctionLabel": "afwEqxTime",
                "brief": "Checks for equal and type",
                "camelCaseFunctionLabel": "eqxTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 7,
                "deprecated": false,
                "description": "Checks for time arg1 is equal to value and type of arg2 and return the boolean result.",
                "functionId": "eqx<time>",
                "functionLabel": "eqx_time",
                "functionSignature": "boolean(time arg1, time arg2)",
                "functionDeclaration": "/* Checks for equal and type */\nboolean (\n    time arg1,\n    time arg2)",
                "op": "===",
                "parameters": [
                    {
                        "dataType": "time",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "time",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "now_utc": {
                "afwCamelCaseFunctionLabel": "afwNowUtc",
                "brief": "UTC dataTime",
                "camelCaseFunctionLabel": "nowUtc",
                "category": "miscellaneous",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Return current UTC dateTime.",
                "functionId": "now_utc",
                "functionLabel": "now_utc",
                "functionSignature": "dateTime()",
                "functionDeclaration": "/* UTC dataTime */\ndateTime (\n)",
                "parameters": [],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "dateTime",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "add_object": {
                "afwCamelCaseFunctionLabel": "afwAddObject",
                "brief": "Add adaptive object",
                "camelCaseFunctionLabel": "addObject",
                "category": "adaptor",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Add an adaptive object to an adaptor, specified by the adaptorId, with a specified objectType.  You may supply an optional objectId, if the underlying adaptorId allows it.",
                "functionId": "add_object",
                "functionLabel": "add_object",
                "functionSignature": "(object _AdaptiveJournalEntry_)(string adaptorId, string objectType, object object, string objectId?, object journal?, object adaptorTypeSpecific?)",
                "functionDeclaration": "/* Add adaptive object */\n(object _AdaptiveJournalEntry_) (\n    string adaptorId,\n    string objectType,\n    object object,\n    string objectId?,\n    object journal?,\n    object adaptorTypeSpecific?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Id of adaptor.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Id of adaptive object type of object being added.",
                        "minArgs": -1,
                        "name": "objectType",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "Object to add.",
                        "minArgs": -1,
                        "name": "object",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Optional preferred objectId of object to add.  The adaptor may ignore this.",
                        "minArgs": -1,
                        "name": "objectId",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "The properties of this object will be added to the associated journal entry.  Refer to /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names to avoid and for ones that have specific semantics.",
                        "minArgs": -1,
                        "name": "journal",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "This is an optional object parameter with an objectType determined by the adaptorType associated with the adaptorId parameter.  If the adaptorType supports this parameter, adaptor afw will have an adaptive object type with an id of:\n\n_AdaptiveAdaptorTypeSpecific_${adaptorType}_add_object\n\nwhere ${adaptorType} is the adaptor type id.",
                        "minArgs": -1,
                        "name": "adaptorTypeSpecific",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveJournalEntry_",
                    "description": "Resulting journal entry.  Property \"objectId\" is the objectId assigned by the adaptor.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_size_yearMonthDuration": {
                "afwCamelCaseFunctionLabel": "afwBagSizeYearMonthDuration",
                "brief": "Returns the number of values in a bag",
                "camelCaseFunctionLabel": "bagSizeYearMonthDuration",
                "category": "yearMonthDuration",
                "dataType": "yearMonthDuration",
                "dataTypeMethodNumber": 3,
                "deprecated": false,
                "description": "This returns the integer number of values in list bag arg.",
                "functionId": "bag_size<yearMonthDuration>",
                "functionLabel": "bag_size_yearMonthDuration",
                "functionSignature": "integer((list yearMonthDuration) arg)",
                "functionDeclaration": "/* Returns the number of values in a bag */\ninteger (\n    (list yearMonthDuration) arg)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "yearMonthDuration",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "find": {
                "afwCamelCaseFunctionLabel": "afwFind",
                "brief": "Returns the first value in a list that passes a test",
                "camelCaseFunctionLabel": "find",
                "category": "higher_order_array",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "The predicate is called for each value in the first list in args until true is returned, then that value is returned.",
                "functionId": "find",
                "functionLabel": "find",
                "functionSignature": "any((function (boolean)(...)) predicate, ...any args)",
                "functionDeclaration": "/* Returns the first value in a list that passes a test */\nany (\n    (function (boolean)(...)) predicate,\n    ...any args)",
                "parameters": [
                    {
                        "dataType": "function",
                        "dataTypeParameter": "(boolean)(...)",
                        "description": "This is a boolean function that is called to determine if a list entry passes the test.",
                        "minArgs": -1,
                        "name": "predicate",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "These are the args passed to the predicate with the exception that the first list is passed as the single current value from the list.  At least one list is required.",
                        "minArgs": 1,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "description": "The first value that passes the test is returned.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "add_yearMonthDuration_1_0_date": {
                "afwCamelCaseFunctionLabel": "afwAddYearMonthDuration10Date",
                "brief": "Add duration",
                "camelCaseFunctionLabel": "addYearMonthDuration10Date",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Add date arg1 to yearMonthDuration_1_0 arg2 and return the date result.",
                "functionId": "add_yearMonthDuration_1_0<date>",
                "functionLabel": "add_yearMonthDuration_1_0_date",
                "functionSignature": "date(date arg1, yearMonthDuration_1_0 arg2)",
                "functionDeclaration": "/* Add duration */\ndate (\n    date arg1,\n    yearMonthDuration_1_0 arg2)",
                "parameters": [
                    {
                        "dataType": "date",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "yearMonthDuration_1_0",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "date",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ge_string": {
                "afwCamelCaseFunctionLabel": "afwGeString",
                "brief": "Checks for greater than or equal",
                "camelCaseFunctionLabel": "geString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 32,
                "deprecated": false,
                "description": "Checks for string arg1 is greater than or equal to string arg2 and return the boolean result.",
                "functionId": "ge<string>",
                "functionLabel": "ge_string",
                "functionSignature": "boolean(string arg1, string arg2)",
                "functionDeclaration": "/* Checks for greater than or equal */\nboolean (\n    string arg1,\n    string arg2)",
                "op": ">=",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eq_integer": {
                "afwCamelCaseFunctionLabel": "afwEqInteger",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "eqInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 6,
                "deprecated": false,
                "description": "Checks for integer arg1 is equal to integer arg2 and return the boolean result.",
                "functionId": "eq<integer>",
                "functionLabel": "eq_integer",
                "functionSignature": "boolean(integer arg1, integer arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    integer arg1,\n    integer arg2)",
                "op": "==",
                "parameters": [
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "intersection_time": {
                "afwCamelCaseFunctionLabel": "afwIntersectionTime",
                "brief": "Returns intersection of two lists",
                "camelCaseFunctionLabel": "intersectionTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 9,
                "deprecated": false,
                "description": "Returns a list of time with the values that are common to both list of time list1 and list2.",
                "functionId": "intersection<time>",
                "functionLabel": "intersection_time",
                "functionSignature": "(list time)((list time) list1, (list time) list2)",
                "functionDeclaration": "/* Returns intersection of two lists */\n(list time) (\n    (list time) list1,\n    (list time) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "time",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "time",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "time",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subtract": {
                "afwCamelCaseFunctionLabel": "afwSubtract",
                "brief": "Subtract numbers",
                "camelCaseFunctionLabel": "subtract",
                "category": "polymorphic",
                "dataTypeMethodNumber": 49,
                "deprecated": false,
                "description": "Subtract <Type> arg2 from <Type> arg1 and return the <Type> result.",
                "functionId": "subtract",
                "functionLabel": "subtract",
                "functionSignature": "<Type> Type(Type arg1, Type arg2)",
                "functionDeclaration": "/* Subtract numbers */\n<Type> Type (\n    Type arg1,\n    Type arg2)",
                "op": "-",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "double",
                    "integer"
                ],
                "pure": true,
                "returns": {
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eqx_yearMonthDuration": {
                "afwCamelCaseFunctionLabel": "afwEqxYearMonthDuration",
                "brief": "Checks for equal and type",
                "camelCaseFunctionLabel": "eqxYearMonthDuration",
                "category": "yearMonthDuration",
                "dataType": "yearMonthDuration",
                "dataTypeMethodNumber": 7,
                "deprecated": false,
                "description": "Checks for yearMonthDuration arg1 is equal to value and type of arg2 and return the boolean result.",
                "functionId": "eqx<yearMonthDuration>",
                "functionLabel": "eqx_yearMonthDuration",
                "functionSignature": "boolean(yearMonthDuration arg1, yearMonthDuration arg2)",
                "functionDeclaration": "/* Checks for equal and type */\nboolean (\n    yearMonthDuration arg1,\n    yearMonthDuration arg2)",
                "op": "===",
                "parameters": [
                    {
                        "dataType": "yearMonthDuration",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "yearMonthDuration",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "uri_string_concatenate": {
                "afwCamelCaseFunctionLabel": "afwUriStringConcatenate",
                "brief": "Concatenate URI",
                "camelCaseFunctionLabel": "uriStringConcatenate",
                "category": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Concatenate an anyURI arg1 with a string arg2 and return the anyURI result.",
                "functionId": "uri_string_concatenate",
                "functionLabel": "uri_string_concatenate",
                "functionSignature": "anyURI(anyURI arg1, string arg2)",
                "functionDeclaration": "/* Concatenate URI */\nanyURI (\n    anyURI arg1,\n    string arg2)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "anyURI",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eq_anyURI": {
                "afwCamelCaseFunctionLabel": "afwEqAnyURI",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "eqAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 6,
                "deprecated": false,
                "description": "Checks for anyURI arg1 is equal to anyURI arg2 and return the boolean result.",
                "functionId": "eq<anyURI>",
                "functionLabel": "eq_anyURI",
                "functionSignature": "boolean(anyURI arg1, anyURI arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    anyURI arg1,\n    anyURI arg2)",
                "op": "==",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "anyURI",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "service_get": {
                "afwCamelCaseFunctionLabel": "afwServiceGet",
                "brief": "Get service object",
                "camelCaseFunctionLabel": "serviceGet",
                "category": "administrative",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Get a service object.",
                "functionId": "service_get",
                "functionLabel": "service_get",
                "functionSignature": "(object _AdaptiveService_)(string serviceId)",
                "functionDeclaration": "/* Get service object */\n(object _AdaptiveService_) (\n    string serviceId)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "The serviceId of the service.",
                        "minArgs": -1,
                        "name": "serviceId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveService_",
                    "description": "_AdaptiveService_ object for the service which will contain the current status of the service.  If there is an error, the status property value will be \"error\" and \"statusMessage\" contain an error message.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "one_and_only_yearMonthDuration_1_0": {
                "afwCamelCaseFunctionLabel": "afwOneAndOnlyYearMonthDuration10",
                "brief": "Converts a one value list to a <Type> value",
                "camelCaseFunctionLabel": "oneAndOnlyYearMonthDuration10",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "This converts a list list  that contains one value to a data type yearMonthDuration_1_0 value.",
                "functionId": "one_and_only<yearMonthDuration_1_0>",
                "functionLabel": "one_and_only_yearMonthDuration_1_0",
                "functionSignature": "yearMonthDuration_1_0((list list) list)",
                "functionDeclaration": "/* Converts a one value list to a <Type> value */\nyearMonthDuration_1_0 (\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "yearMonthDuration_1_0",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "in_range_time": {
                "afwCamelCaseFunctionLabel": "afwInRangeTime",
                "brief": "Checks if time in range",
                "camelCaseFunctionLabel": "inRangeTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 60,
                "deprecated": false,
                "description": "Checks if time is between startTime and endTime, inclusive.  Regardless of endTime value, it is always considered to be equal to, but less than 24 hours greater than startTime.  If no time zone is specified for time, the default time zone is used.  If no time zone is specified for startTime or endTime, the time zone of time is used.",
                "functionId": "in_range<time>",
                "functionLabel": "in_range_time",
                "functionSignature": "boolean(time time, time startTime, time endTime)",
                "functionDeclaration": "/* Checks if time in range */\nboolean (\n    time time,\n    time startTime,\n    time endTime)",
                "parameters": [
                    {
                        "dataType": "time",
                        "minArgs": -1,
                        "name": "time",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "time",
                        "minArgs": -1,
                        "name": "startTime",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "time",
                        "minArgs": -1,
                        "name": "endTime",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_base64Binary": {
                "afwCamelCaseFunctionLabel": "afwBagBase64Binary",
                "brief": "Makes a list from args",
                "camelCaseFunctionLabel": "bagBase64Binary",
                "category": "base64Binary",
                "dataType": "base64Binary",
                "dataTypeMethodNumber": 2,
                "deprecated": false,
                "description": "Takes any number of base64Binary args and returns a list of list.",
                "functionId": "bag<base64Binary>",
                "functionLabel": "bag_base64Binary",
                "functionSignature": "(list base64Binary)(...(list base64Binary) args)",
                "functionDeclaration": "/* Makes a list from args */\n(list base64Binary) (\n    ...(list base64Binary) args)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "base64Binary",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "base64Binary",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "last_index_of_string": {
                "afwCamelCaseFunctionLabel": "afwLastIndexOfString",
                "brief": "Returns index of last occurrence",
                "camelCaseFunctionLabel": "lastIndexOfString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 11,
                "deprecated": false,
                "description": "Returns the zero-based index into string value of the last occurrence of a subString.  If subString is not found, -1 is returned.",
                "functionId": "last_index_of<string>",
                "functionLabel": "last_index_of_string",
                "functionSignature": "integer(string value, string subString, integer startIndex?)",
                "functionDeclaration": "/* Returns index of last occurrence */\ninteger (\n    string value,\n    string subString,\n    integer startIndex?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "The string value to search.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Substring to search for.",
                        "minArgs": -1,
                        "name": "subString",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "Optional start index for search if different than start of string.",
                        "minArgs": -1,
                        "name": "startIndex",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "description": "Zero-based index of subString or -1 if not found.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_date": {
                "afwCamelCaseFunctionLabel": "afwToStringDate",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts date arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<date>",
                "functionLabel": "to_string_date",
                "functionSignature": "string(date arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    date arg)",
                "parameters": [
                    {
                        "dataType": "date",
                        "description": "A date value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ge_dateTime": {
                "afwCamelCaseFunctionLabel": "afwGeDateTime",
                "brief": "Checks for greater than or equal",
                "camelCaseFunctionLabel": "geDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 32,
                "deprecated": false,
                "description": "Checks for dateTime arg1 is greater than or equal to dateTime arg2 and return the boolean result.\n\nIf a dateTime value does not include a time-zone value, then the local time-zone value will be assigned.",
                "functionId": "ge<dateTime>",
                "functionLabel": "ge_dateTime",
                "functionSignature": "boolean(dateTime arg1, dateTime arg2)",
                "functionDeclaration": "/* Checks for greater than or equal */\nboolean (\n    dateTime arg1,\n    dateTime arg2)",
                "op": ">=",
                "parameters": [
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "test_value": {
                "afwCamelCaseFunctionLabel": "afwTestValue",
                "brief": "Test value",
                "camelCaseFunctionLabel": "testValue",
                "category": "compiler",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Evaluate an adaptive value and compare it to an expected value.  Return object with the test's results.",
                "functionId": "test_value",
                "functionLabel": "test_value",
                "functionSignature": "object(string id, string description, string value, any expected, (object _AdaptiveContextType_) additionalContext?)",
                "functionDeclaration": "/* Test value */\nobject (\n    string id,\n    string description,\n    string value,\n    any expected,\n    (object _AdaptiveContextType_) additionalContext?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Id of test",
                        "minArgs": -1,
                        "name": "id",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Description of test",
                        "minArgs": -1,
                        "name": "description",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Value to evaluate",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "Expected result.",
                        "minArgs": -1,
                        "name": "expected",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveContextType_",
                        "description": "Additional context to use first during evaluation.",
                        "minArgs": -1,
                        "name": "additionalContext",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Test results.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ne_base64Binary": {
                "afwCamelCaseFunctionLabel": "afwNeBase64Binary",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "neBase64Binary",
                "category": "base64Binary",
                "dataType": "base64Binary",
                "dataTypeMethodNumber": 13,
                "deprecated": false,
                "description": "Checks for base64Binary arg1 is not equal to base64Binary arg2 and return the boolean result.",
                "functionId": "ne<base64Binary>",
                "functionLabel": "ne_base64Binary",
                "functionSignature": "boolean(base64Binary arg1, base64Binary arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    base64Binary arg1,\n    base64Binary arg2)",
                "op": "!=",
                "parameters": [
                    {
                        "dataType": "base64Binary",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "base64Binary",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "extension_load": {
                "afwCamelCaseFunctionLabel": "afwExtensionLoad",
                "brief": "Load extension",
                "camelCaseFunctionLabel": "extensionLoad",
                "category": "administrative",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Load an extension if it is not already loaded.",
                "functionId": "extension_load",
                "functionLabel": "extension_load",
                "functionSignature": "boolean(string extension_id)",
                "functionDeclaration": "/* Load extension */\nboolean (\n    string extension_id)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "This is the object id of a /afw/_AdaptiveManifest_/ object.",
                        "minArgs": -1,
                        "name": "extension_id",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "boolean",
                    "description": "If false the extension was already loaded.  If true, the extension was successfully loaded which might have caused side effects such as environment registry changes.  An error is thrown if there is a problem.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0,
                "sideEffects": [
                    "The loading of the extension may add environment registry entries as well as make other changes."
                ]
            },
            "ends_with_anyURI": {
                "afwCamelCaseFunctionLabel": "afwEndsWithAnyURI",
                "brief": "Checks whether value ends with a string",
                "camelCaseFunctionLabel": "endsWithAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 5,
                "deprecated": false,
                "description": "Checks whether anyURI value ends with a anyURI and return the boolean result.",
                "functionId": "ends_with<anyURI>",
                "functionLabel": "ends_with_anyURI",
                "functionSignature": "boolean(anyURI value, string subString)",
                "functionDeclaration": "/* Checks whether value ends with a string */\nboolean (\n    anyURI value,\n    string subString)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "subString",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "yearMonthDuration": {
                "afwCamelCaseFunctionLabel": "afwYearMonthDuration",
                "brief": "Convert to data type yearMonthDuration",
                "camelCaseFunctionLabel": "yearMonthDuration",
                "category": "yearMonthDuration",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type yearMonthDuration returning yearMonthDuration result.",
                "functionId": "yearMonthDuration",
                "functionLabel": "yearMonthDuration",
                "functionSignature": "yearMonthDuration(any arg)",
                "functionDeclaration": "/* Convert to data type yearMonthDuration */\nyearMonthDuration (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "yearMonthDuration",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "le_time": {
                "afwCamelCaseFunctionLabel": "afwLeTime",
                "brief": "Checks for less than or equal",
                "camelCaseFunctionLabel": "leTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 34,
                "deprecated": false,
                "description": "Checks for time arg1 is less than or equal to time arg2 and return the boolean result.\n\nIt is illegal to compare a time that includes a time-zone value with one that does not.  In such cases, the in_range<time> function should be used.",
                "functionId": "le<time>",
                "functionLabel": "le_time",
                "functionSignature": "boolean(time arg1, any arg2)",
                "functionDeclaration": "/* Checks for less than or equal */\nboolean (\n    time arg1,\n    any arg2)",
                "op": "<=",
                "parameters": [
                    {
                        "dataType": "time",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "or": {
                "afwCamelCaseFunctionLabel": "afwOr",
                "brief": "Logical or",
                "camelCaseFunctionLabel": "or",
                "category": "logical",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Evaluates 0 or more boolean args returning boolean false if there are no args and boolean true if any args evaluate to true.  All args after the first true remain unevaluated.",
                "functionId": "or",
                "functionLabel": "or",
                "functionSignature": "boolean(...boolean args)",
                "functionDeclaration": "/* Logical or */\nboolean (\n    ...boolean args)",
                "op": "||",
                "parameters": [
                    {
                        "dataType": "boolean",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_size_ipAddress": {
                "afwCamelCaseFunctionLabel": "afwBagSizeIpAddress",
                "brief": "Returns the number of values in a bag",
                "camelCaseFunctionLabel": "bagSizeIpAddress",
                "category": "ipAddress",
                "dataType": "ipAddress",
                "dataTypeMethodNumber": 3,
                "deprecated": false,
                "description": "This returns the integer number of values in list bag arg.",
                "functionId": "bag_size<ipAddress>",
                "functionLabel": "bag_size_ipAddress",
                "functionSignature": "integer((list ipAddress) arg)",
                "functionDeclaration": "/* Returns the number of values in a bag */\ninteger (\n    (list ipAddress) arg)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "ipAddress",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "add_double": {
                "afwCamelCaseFunctionLabel": "afwAddDouble",
                "brief": "Add numbers",
                "camelCaseFunctionLabel": "addDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 41,
                "deprecated": false,
                "description": "Add 2 or more double args and return the double result.",
                "functionId": "add<double>",
                "functionLabel": "add_double",
                "functionSignature": "double(...double args)",
                "functionDeclaration": "/* Add numbers */\ndouble (\n    ...double args)",
                "op": "+",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": 2,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "double",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_in_dayTimeDuration_1_0": {
                "afwCamelCaseFunctionLabel": "afwIsInDayTimeDuration10",
                "brief": "Checks whether a value is in a list",
                "camelCaseFunctionLabel": "isInDayTimeDuration10",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Checks whether dayTimeDuration_1_0 value is in list list and returns the boolean result.",
                "functionId": "is_in<dayTimeDuration_1_0>",
                "functionLabel": "is_in_dayTimeDuration_1_0",
                "functionSignature": "boolean(dayTimeDuration_1_0 value, (list list) list)",
                "functionDeclaration": "/* Checks whether a value is in a list */\nboolean (\n    dayTimeDuration_1_0 value,\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "dayTimeDuration_1_0",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eqx_string": {
                "afwCamelCaseFunctionLabel": "afwEqxString",
                "brief": "Checks for equal and type",
                "camelCaseFunctionLabel": "eqxString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 7,
                "deprecated": false,
                "description": "Checks for string arg1 is equal to value and type of arg2 and return the boolean result.",
                "functionId": "eqx<string>",
                "functionLabel": "eqx_string",
                "functionSignature": "boolean(string arg1, string arg2)",
                "functionDeclaration": "/* Checks for equal and type */\nboolean (\n    string arg1,\n    string arg2)",
                "op": "===",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "regexp_replace": {
                "afwCamelCaseFunctionLabel": "afwRegexpReplace",
                "brief": "Replace strings matching a regular expression",
                "camelCaseFunctionLabel": "regexpReplace",
                "category": "polymorphic",
                "dataTypeMethodNumber": 18,
                "deprecated": false,
                "description": "Replace matched values for a regular expression in a <Type> value.",
                "functionId": "regexp_replace",
                "functionLabel": "regexp_replace",
                "functionSignature": "<Type> Type(Type value, string regexp, string replacement, integer limit?)",
                "functionDeclaration": "/* Replace strings matching a regular expression */\n<Type> Type (\n    Type value,\n    string regexp,\n    string replacement,\n    integer limit?)",
                "parameters": [
                    {
                        "description": "The original <Type> value.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "A regular expression to use for search.",
                        "minArgs": -1,
                        "name": "regexp",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "The replacement string.",
                        "minArgs": -1,
                        "name": "replacement",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "This is the maximum times to replace.  The default is 1.  Specify -1 to replace all occurrences.",
                        "minArgs": -1,
                        "name": "limit",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "string"
                ],
                "pure": true,
                "returns": {
                    "description": "A <Type> value with the matched string(s) replaced.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_x500Name": {
                "afwCamelCaseFunctionLabel": "afwToStringX500Name",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringX500Name",
                "category": "x500Name",
                "dataType": "x500Name",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts x500Name arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<x500Name>",
                "functionLabel": "to_string_x500Name",
                "functionSignature": "string(x500Name arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    x500Name arg)",
                "parameters": [
                    {
                        "dataType": "x500Name",
                        "description": "A x500Name value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_yearMonthDuration": {
                "afwCamelCaseFunctionLabel": "afwBagYearMonthDuration",
                "brief": "Makes a list from args",
                "camelCaseFunctionLabel": "bagYearMonthDuration",
                "category": "yearMonthDuration",
                "dataType": "yearMonthDuration",
                "dataTypeMethodNumber": 2,
                "deprecated": false,
                "description": "Takes any number of yearMonthDuration args and returns a list of list.",
                "functionId": "bag<yearMonthDuration>",
                "functionLabel": "bag_yearMonthDuration",
                "functionSignature": "(list yearMonthDuration)(...(list yearMonthDuration) args)",
                "functionDeclaration": "/* Makes a list from args */\n(list yearMonthDuration) (\n    ...(list yearMonthDuration) args)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "yearMonthDuration",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "yearMonthDuration",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "union_boolean": {
                "afwCamelCaseFunctionLabel": "afwUnionBoolean",
                "brief": "Returns union of two or more string lists",
                "camelCaseFunctionLabel": "unionBoolean",
                "category": "boolean",
                "dataType": "boolean",
                "dataTypeMethodNumber": 27,
                "deprecated": false,
                "description": "Returns a list of boolean contains all of the unique values in two or more list of boolean args.",
                "functionId": "union<boolean>",
                "functionLabel": "union_boolean",
                "functionSignature": "(list boolean)(...(list boolean) lists)",
                "functionDeclaration": "/* Returns union of two or more string lists */\n(list boolean) (\n    ...(list boolean) lists)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "boolean",
                        "description": "Two or more lists.",
                        "minArgs": 2,
                        "name": "lists",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "random_base64Binary": {
                "afwCamelCaseFunctionLabel": "afwRandomBase64Binary",
                "brief": "Generate random octets (base64Binary)",
                "camelCaseFunctionLabel": "randomBase64Binary",
                "category": "random",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This returns a specified number of random octets as dataType base64Binary.",
                "functionId": "random_base64Binary",
                "functionLabel": "random_base64Binary",
                "functionSignature": "base64Binary(integer numberOfOctets)",
                "functionDeclaration": "/* Generate random octets (base64Binary) */\nbase64Binary (\n    integer numberOfOctets)",
                "parameters": [
                    {
                        "dataType": "integer",
                        "description": "The number of random octets to generate.",
                        "minArgs": -1,
                        "name": "numberOfOctets",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "base64Binary",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "encode_as_base64Binary": {
                "afwCamelCaseFunctionLabel": "afwEncodeAsBase64Binary",
                "brief": "Encode to a base64Binary value",
                "camelCaseFunctionLabel": "encodeAsBase64Binary",
                "category": "polymorphic",
                "dataTypeMethodNumber": 57,
                "deprecated": false,
                "description": "Encode a value as a base64Binary.  The effect is to create a base64Binary value with an internal value of the value passed.",
                "functionId": "encode_as_base64Binary",
                "functionLabel": "encode_as_base64Binary",
                "functionSignature": "<Type> base64Binary(Type value)",
                "functionDeclaration": "/* Encode to a base64Binary value */\n<Type> base64Binary (\n    Type value)",
                "parameters": [
                    {
                        "description": "The <Type> value to encode.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "base64Binary",
                    "description": "A base64Binary value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "le_double": {
                "afwCamelCaseFunctionLabel": "afwLeDouble",
                "brief": "Checks for less than or equal",
                "camelCaseFunctionLabel": "leDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 34,
                "deprecated": false,
                "description": "Checks for double arg1 is less than or equal to double arg2 and return the boolean result.",
                "functionId": "le<double>",
                "functionLabel": "le_double",
                "functionSignature": "boolean(double arg1, any arg2)",
                "functionDeclaration": "/* Checks for less than or equal */\nboolean (\n    double arg1,\n    any arg2)",
                "op": "<=",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_size_time": {
                "afwCamelCaseFunctionLabel": "afwBagSizeTime",
                "brief": "Returns the number of values in a bag",
                "camelCaseFunctionLabel": "bagSizeTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 3,
                "deprecated": false,
                "description": "This returns the integer number of values in list bag arg.",
                "functionId": "bag_size<time>",
                "functionLabel": "bag_size_time",
                "functionSignature": "integer((list time) arg)",
                "functionDeclaration": "/* Returns the number of values in a bag */\ninteger (\n    (list time) arg)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "time",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_yearMonthDuration_string": {
                "afwCamelCaseFunctionLabel": "afwToYearMonthDurationString",
                "brief": "Converts string to yearMonthDuration",
                "camelCaseFunctionLabel": "toYearMonthDurationString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 74,
                "deprecated": false,
                "description": "Converts string arg to yearMonthDuration.",
                "functionId": "to_yearMonthDuration<string>",
                "functionLabel": "to_yearMonthDuration_string",
                "functionSignature": "yearMonthDuration(string arg)",
                "functionDeclaration": "/* Converts string to yearMonthDuration */\nyearMonthDuration (\n    string arg)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "yearMonthDuration",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ceil_double": {
                "afwCamelCaseFunctionLabel": "afwCeilDouble",
                "brief": "Round upward to nearest integer",
                "camelCaseFunctionLabel": "ceilDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 42,
                "deprecated": false,
                "description": "Determine the smallest integer that is greater then or equal to the double arg and return the double result.",
                "functionId": "ceil<double>",
                "functionLabel": "ceil_double",
                "functionSignature": "double(double arg)",
                "functionDeclaration": "/* Round upward to nearest integer */\ndouble (\n    double arg)",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "double",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "multiply_double": {
                "afwCamelCaseFunctionLabel": "afwMultiplyDouble",
                "brief": "Multiply numbers",
                "camelCaseFunctionLabel": "multiplyDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 45,
                "deprecated": false,
                "description": "Multiply 2 or more double args and return the double result.",
                "functionId": "multiply<double>",
                "functionLabel": "multiply_double",
                "functionSignature": "double(...double args)",
                "functionDeclaration": "/* Multiply numbers */\ndouble (\n    ...double args)",
                "op": "*",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": 2,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "double",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_dayTimeDuration": {
                "afwCamelCaseFunctionLabel": "afwBagDayTimeDuration",
                "brief": "Makes a list from args",
                "camelCaseFunctionLabel": "bagDayTimeDuration",
                "category": "dayTimeDuration",
                "dataType": "dayTimeDuration",
                "dataTypeMethodNumber": 2,
                "deprecated": false,
                "description": "Takes any number of dayTimeDuration args and returns a list of list.",
                "functionId": "bag<dayTimeDuration>",
                "functionLabel": "bag_dayTimeDuration",
                "functionSignature": "(list dayTimeDuration)(...(list dayTimeDuration) args)",
                "functionDeclaration": "/* Makes a list from args */\n(list dayTimeDuration) (\n    ...(list dayTimeDuration) args)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dayTimeDuration",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "dayTimeDuration",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ne_hexBinary": {
                "afwCamelCaseFunctionLabel": "afwNeHexBinary",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "neHexBinary",
                "category": "hexBinary",
                "dataType": "hexBinary",
                "dataTypeMethodNumber": 13,
                "deprecated": false,
                "description": "Checks for hexBinary arg1 is not equal to hexBinary arg2 and return the boolean result.",
                "functionId": "ne<hexBinary>",
                "functionLabel": "ne_hexBinary",
                "functionSignature": "boolean(hexBinary arg1, hexBinary arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    hexBinary arg1,\n    hexBinary arg2)",
                "op": "!=",
                "parameters": [
                    {
                        "dataType": "hexBinary",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "hexBinary",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "max_double": {
                "afwCamelCaseFunctionLabel": "afwMaxDouble",
                "brief": "Maximum value",
                "camelCaseFunctionLabel": "maxDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 36,
                "deprecated": false,
                "description": "Return the double arg that is greater than or equal to the others.",
                "functionId": "max<double>",
                "functionLabel": "max_double",
                "functionSignature": "double(...double args)",
                "functionDeclaration": "/* Maximum value */\ndouble (\n    ...double args)",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": 1,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "double",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "journal_mark_consumed": {
                "afwCamelCaseFunctionLabel": "afwJournalMarkConsumed",
                "brief": "Mark journal entry consumed",
                "camelCaseFunctionLabel": "journalMarkConsumed",
                "category": "journal",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Mark a journal entry returned by get_next_for_consumer() as consumed.",
                "functionId": "journal_mark_consumed",
                "functionLabel": "journal_mark_consumed",
                "functionSignature": "null(string adaptorId, string consumerId, string cursor)",
                "functionDeclaration": "/* Mark journal entry consumed */\nnull (\n    string adaptorId,\n    string consumerId,\n    string cursor)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Id of adaptor.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "The consumerId property value of the associated _AdaptiveProvisioningPeer_ object.",
                        "minArgs": -1,
                        "name": "consumerId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Journal entry cursor.",
                        "minArgs": -1,
                        "name": "cursor",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "null",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "flag_set": {
                "afwCamelCaseFunctionLabel": "afwFlagSet",
                "brief": "Set or unset active scope flags",
                "camelCaseFunctionLabel": "flagSet",
                "category": "administrative",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Set or unset one or more active scope (request) flags.",
                "functionId": "flag_set",
                "functionLabel": "flag_set",
                "functionSignature": "null((list string) flagId, boolean setTo?)",
                "functionDeclaration": "/* Set or unset active scope flags */\nnull (\n    (list string) flagId,\n    boolean setTo?)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "string",
                        "description": "List of flagId of flags to set or unset.",
                        "minArgs": -1,
                        "name": "flagId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "boolean",
                        "description": "Specify true to set and false to unset.  If not specified, flags are set.",
                        "minArgs": -1,
                        "name": "setTo",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "null",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "add_dayTimeDuration_dateTime": {
                "afwCamelCaseFunctionLabel": "afwAddDayTimeDurationDateTime",
                "brief": "Add duration",
                "camelCaseFunctionLabel": "addDayTimeDurationDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 30,
                "deprecated": false,
                "description": "Add dateTime arg1 to dayTimeDuration arg2 and return the dateTime result.",
                "functionId": "add_dayTimeDuration<dateTime>",
                "functionLabel": "add_dayTimeDuration_dateTime",
                "functionSignature": "dateTime(dateTime arg1, dayTimeDuration arg2)",
                "functionDeclaration": "/* Add duration */\ndateTime (\n    dateTime arg1,\n    dayTimeDuration arg2)",
                "parameters": [
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "dayTimeDuration",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "dateTime",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "at_least_one_member_of_time": {
                "afwCamelCaseFunctionLabel": "afwAtLeastOneMemberOfTime",
                "brief": "Checks for at least one value in common",
                "camelCaseFunctionLabel": "atLeastOneMemberOfTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 1,
                "deprecated": false,
                "description": "Returns boolean true if at least one value in time list1 is in time list2.",
                "functionId": "at_least_one_member_of<time>",
                "functionLabel": "at_least_one_member_of_time",
                "functionSignature": "boolean((list time) list1, (list time) list2)",
                "functionDeclaration": "/* Checks for at least one value in common */\nboolean (\n    (list time) list1,\n    (list time) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "time",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "time",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_in_string": {
                "afwCamelCaseFunctionLabel": "afwIsInString",
                "brief": "Checks whether a value is in a list",
                "camelCaseFunctionLabel": "isInString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 10,
                "deprecated": false,
                "description": "Checks whether string value is in list of string list and returns the boolean result.",
                "functionId": "is_in<string>",
                "functionLabel": "is_in_string",
                "functionSignature": "boolean(string value, (list string) list)",
                "functionDeclaration": "/* Checks whether a value is in a list */\nboolean (\n    string value,\n    (list string) list)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "string",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "one_and_only_ipAddress": {
                "afwCamelCaseFunctionLabel": "afwOneAndOnlyIpAddress",
                "brief": "Converts a one value list to a ipAddress value",
                "camelCaseFunctionLabel": "oneAndOnlyIpAddress",
                "category": "ipAddress",
                "dataType": "ipAddress",
                "dataTypeMethodNumber": 15,
                "deprecated": false,
                "description": "This converts a list list  that contains one value to a data type ipAddress value.",
                "functionId": "one_and_only<ipAddress>",
                "functionLabel": "one_and_only_ipAddress",
                "functionSignature": "ipAddress((list list) list)",
                "functionDeclaration": "/* Converts a one value list to a ipAddress value */\nipAddress (\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "ipAddress",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "gt_double": {
                "afwCamelCaseFunctionLabel": "afwGtDouble",
                "brief": "Checks for greater than",
                "camelCaseFunctionLabel": "gtDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 33,
                "deprecated": false,
                "description": "Checks for double arg1 is greater than double arg2 and return the boolean result.",
                "functionId": "gt<double>",
                "functionLabel": "gt_double",
                "functionSignature": "boolean(double arg1, double arg2)",
                "functionDeclaration": "/* Checks for greater than */\nboolean (\n    double arg1,\n    double arg2)",
                "op": ">",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "policy_ordered_permit_overrides_1_1": {
                "afwCamelCaseFunctionLabel": "afwPolicyOrderedPermitOverrides11",
                "brief": "Policy combining algorithm - legacy_policy_permit_overrides",
                "camelCaseFunctionLabel": "policyOrderedPermitOverrides11",
                "category": "policy_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Policy combining algorithm for legacy policy permit overrides.",
                "functionId": "policy_ordered_permit_overrides_1_1",
                "functionLabel": "policy_ordered_permit_overrides_1_1",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Policy combining algorithm - legacy_policy_permit_overrides */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_ipAddress": {
                "afwCamelCaseFunctionLabel": "afwToStringIpAddress",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringIpAddress",
                "category": "ipAddress",
                "dataType": "ipAddress",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts ipAddress arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<ipAddress>",
                "functionLabel": "to_string_ipAddress",
                "functionSignature": "string(ipAddress arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    ipAddress arg)",
                "parameters": [
                    {
                        "dataType": "ipAddress",
                        "description": "A ipAddress value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "nex_integer": {
                "afwCamelCaseFunctionLabel": "afwNexInteger",
                "brief": "Checks for not equal value or type",
                "camelCaseFunctionLabel": "nexInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 14,
                "deprecated": false,
                "description": "Checks for integer arg1 not equal to value or data type of arg2 and return the boolean result.",
                "functionId": "nex<integer>",
                "functionLabel": "nex_integer",
                "functionSignature": "boolean(integer arg1, integer arg2)",
                "functionDeclaration": "/* Checks for not equal value or type */\nboolean (\n    integer arg1,\n    integer arg2)",
                "op": "!==",
                "parameters": [
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "min_string": {
                "afwCamelCaseFunctionLabel": "afwMinString",
                "brief": "Minimum value",
                "camelCaseFunctionLabel": "minString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 37,
                "deprecated": false,
                "description": "Return the string arg that is less than or equal to the others.",
                "functionId": "min<string>",
                "functionLabel": "min_string",
                "functionSignature": "string(...string args)",
                "functionDeclaration": "/* Minimum value */\nstring (\n    ...string args)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": 1,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ge_time": {
                "afwCamelCaseFunctionLabel": "afwGeTime",
                "brief": "Checks for greater than or equal",
                "camelCaseFunctionLabel": "geTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 32,
                "deprecated": false,
                "description": "Checks for time arg1 is greater than or equal to time arg2 and return the boolean result.\n\nIt is illegal to compare a time that includes a time-zone value with one that does not.  In such cases, the in_range<time> function should be used.",
                "functionId": "ge<time>",
                "functionLabel": "ge_time",
                "functionSignature": "boolean(time arg1, time arg2)",
                "functionDeclaration": "/* Checks for greater than or equal */\nboolean (\n    time arg1,\n    time arg2)",
                "op": ">=",
                "parameters": [
                    {
                        "dataType": "time",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "time",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "substring": {
                "afwCamelCaseFunctionLabel": "afwSubstring",
                "brief": "Extract a substring",
                "camelCaseFunctionLabel": "substring",
                "category": "polymorphic",
                "dataTypeMethodNumber": 25,
                "deprecated": false,
                "description": "Returns the <Type> substring of value beginning at zero-based position integer startIndex and ending at the position before integer endIndex.  Specify -1 or omitting endIndex to return up to end of <Type>.",
                "functionId": "substring",
                "functionLabel": "substring",
                "functionSignature": "<Type> Type(Type string, integer startIndex, integer endIndex?)",
                "functionDeclaration": "/* Extract a substring */\n<Type> Type (\n    Type string,\n    integer startIndex,\n    integer endIndex?)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "string",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "startIndex",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "endIndex",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "string"
                ],
                "pure": true,
                "returns": {
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "in_range": {
                "afwCamelCaseFunctionLabel": "afwInRange",
                "brief": "Checks if time in range",
                "camelCaseFunctionLabel": "inRange",
                "category": "polymorphic",
                "dataTypeMethodNumber": 60,
                "deprecated": false,
                "description": "Checks if <Type> is between startTime and endTime, inclusive.  Regardless of endTime value, it is always considered to be equal to, but less than 24 hours greater than startTime.  If no <Type> zone is specified for <Type>, the default <Type> zone is used.  If no <Type> zone is specified for startTime or endTime, the <Type> zone of <Type> is used.",
                "functionId": "in_range",
                "functionLabel": "in_range",
                "functionSignature": "<Type> boolean(Type time, Type startTime, Type endTime)",
                "functionDeclaration": "/* Checks if time in range */\n<Type> boolean (\n    Type time,\n    Type startTime,\n    Type endTime)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "time",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "startTime",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "endTime",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "time"
                ],
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "objectPath": {
                "afwCamelCaseFunctionLabel": "afwObjectPath",
                "brief": "Convert to data type objectPath",
                "camelCaseFunctionLabel": "objectPath",
                "category": "objectPath",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type objectPath returning objectPath result.",
                "functionId": "objectPath",
                "functionLabel": "objectPath",
                "functionSignature": "objectPath(any arg)",
                "functionDeclaration": "/* Convert to data type objectPath */\nobjectPath (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "objectPath",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "one_and_only_dayTimeDuration_1_0": {
                "afwCamelCaseFunctionLabel": "afwOneAndOnlyDayTimeDuration10",
                "brief": "Converts a one value list to a <Type> value",
                "camelCaseFunctionLabel": "oneAndOnlyDayTimeDuration10",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "This converts a list list  that contains one value to a data type dayTimeDuration_1_0 value.",
                "functionId": "one_and_only<dayTimeDuration_1_0>",
                "functionLabel": "one_and_only_dayTimeDuration_1_0",
                "functionSignature": "dayTimeDuration_1_0((list list) list)",
                "functionDeclaration": "/* Converts a one value list to a <Type> value */\ndayTimeDuration_1_0 (\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "dayTimeDuration_1_0",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "print": {
                "afwCamelCaseFunctionLabel": "afwPrint",
                "brief": "Print value",
                "camelCaseFunctionLabel": "print",
                "category": "miscellaneous",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Evaluate and convert arg to String and print it.  An arg with an undefined value is represented by 'undefined'.",
                "functionId": "print",
                "functionLabel": "print",
                "functionSignature": "null(any arg)",
                "functionDeclaration": "/* Print value */\nnull (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to print.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "null",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0,
                "sideEffects": [
                    "Value written"
                ]
            },
            "subtract_yearMonthDuration_1_0_dateTime": {
                "afwCamelCaseFunctionLabel": "afwSubtractYearMonthDuration10DateTime",
                "brief": "Subtract numbers",
                "camelCaseFunctionLabel": "subtractYearMonthDuration10DateTime",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Subtract yearMonthDuration_1_0 arg2 from dateTime arg1 and return the dateTime result.",
                "functionId": "subtract_yearMonthDuration_1_0<dateTime>",
                "functionLabel": "subtract_yearMonthDuration_1_0_dateTime",
                "functionSignature": "dateTime(dateTime arg1, yearMonthDuration_1_0 arg2)",
                "functionDeclaration": "/* Subtract numbers */\ndateTime (\n    dateTime arg1,\n    yearMonthDuration_1_0 arg2)",
                "parameters": [
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "yearMonthDuration_1_0",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "dateTime",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_time": {
                "afwCamelCaseFunctionLabel": "afwToTime",
                "brief": "Converts string to time",
                "camelCaseFunctionLabel": "toTime",
                "category": "polymorphic",
                "dataTypeMethodNumber": 72,
                "deprecated": false,
                "description": "Converts <Type> arg to time.",
                "functionId": "to_time",
                "functionLabel": "to_time",
                "functionSignature": "<Type> time(Type arg)",
                "functionDeclaration": "/* Converts string to time */\n<Type> time (\n    Type arg)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "time",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "nex_hexBinary": {
                "afwCamelCaseFunctionLabel": "afwNexHexBinary",
                "brief": "Checks for not equal value or type",
                "camelCaseFunctionLabel": "nexHexBinary",
                "category": "hexBinary",
                "dataType": "hexBinary",
                "dataTypeMethodNumber": 14,
                "deprecated": false,
                "description": "Checks for hexBinary arg1 not equal to value or data type of arg2 and return the boolean result.",
                "functionId": "nex<hexBinary>",
                "functionLabel": "nex_hexBinary",
                "functionSignature": "boolean(hexBinary arg1, hexBinary arg2)",
                "functionDeclaration": "/* Checks for not equal value or type */\nboolean (\n    hexBinary arg1,\n    hexBinary arg2)",
                "op": "!==",
                "parameters": [
                    {
                        "dataType": "hexBinary",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "hexBinary",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_dayTimeDuration": {
                "afwCamelCaseFunctionLabel": "afwToDayTimeDuration",
                "brief": "Converts string to dayTimeDuration",
                "camelCaseFunctionLabel": "toDayTimeDuration",
                "category": "polymorphic",
                "dataTypeMethodNumber": 68,
                "deprecated": false,
                "description": "Converts <Type> arg to dayTimeDuration.",
                "functionId": "to_dayTimeDuration",
                "functionLabel": "to_dayTimeDuration",
                "functionSignature": "<Type> dayTimeDuration(Type arg)",
                "functionDeclaration": "/* Converts string to dayTimeDuration */\n<Type> dayTimeDuration (\n    Type arg)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "dayTimeDuration",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "intersection_boolean": {
                "afwCamelCaseFunctionLabel": "afwIntersectionBoolean",
                "brief": "Returns intersection of two lists",
                "camelCaseFunctionLabel": "intersectionBoolean",
                "category": "boolean",
                "dataType": "boolean",
                "dataTypeMethodNumber": 9,
                "deprecated": false,
                "description": "Returns a list of boolean with the values that are common to both list of boolean list1 and list2.",
                "functionId": "intersection<boolean>",
                "functionLabel": "intersection_boolean",
                "functionSignature": "(list boolean)((list boolean) list1, (list boolean) list2)",
                "functionDeclaration": "/* Returns intersection of two lists */\n(list boolean) (\n    (list boolean) list1,\n    (list boolean) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "boolean",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "boolean",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_list": {
                "afwCamelCaseFunctionLabel": "afwIsList",
                "brief": "Checks whether value is dataType list",
                "camelCaseFunctionLabel": "isList",
                "category": "array",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type list.  Use is_list_of_list() instead to test for a list of list.",
                "functionId": "is<list>",
                "functionLabel": "is_list",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType list */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is list.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_boolean": {
                "afwCamelCaseFunctionLabel": "afwToStringBoolean",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringBoolean",
                "category": "boolean",
                "dataType": "boolean",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts boolean arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<boolean>",
                "functionLabel": "to_string_boolean",
                "functionSignature": "string(boolean arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    boolean arg)",
                "parameters": [
                    {
                        "dataType": "boolean",
                        "description": "A boolean value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "journal_advance_cursor_for_consumer": {
                "afwCamelCaseFunctionLabel": "afwJournalAdvanceCursorForConsumer",
                "brief": "Advance journal cursor for consumer",
                "camelCaseFunctionLabel": "journalAdvanceCursorForConsumer",
                "category": "journal",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Update the advance cursor for a consumer referenced by the consumerId parameter.  The limit parameter specifies the maximum number of entries to scan for an applicable entry for consumer before returning.  NULL is always returned.\n\nThere are no response properties set by this function.\n\nThe properties of the _AdaptiveProvisioningPeer_ object associated with the consumer_id are used in the following way:\n\nThe consumerFilter expression is used to determine if an entry is applicable.\n\nJournal entries are scanned beginning at the entry at the cursor in the advanceCursor property.  If the advanceCursor property is not present, the scan begins after the cursor in currentCursor.  If neither are present, the scan begins at the start of the journal.\n\nIf an new applicable entry is found or if the limit is met, the advanceCursor property is set to the currently scanned entry's cursor.",
                "functionId": "journal_advance_cursor_for_consumer",
                "functionLabel": "journal_advance_cursor_for_consumer",
                "functionSignature": "object(string adaptorId, string consumerId, integer limit?)",
                "functionDeclaration": "/* Advance journal cursor for consumer */\nobject (\n    string adaptorId,\n    string consumerId,\n    integer limit?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Id of adaptor.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "The consumerId property value of the associated _AdaptiveProvisioningPeer_ object.",
                        "minArgs": -1,
                        "name": "consumerId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "The maximum number of entries that will be scanned for an entry where the consumerFilter expression in the associated _AdaptiveProvisioningPeer_ object evaluates to true.",
                        "minArgs": -1,
                        "name": "limit",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Response object.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_objectPath": {
                "afwCamelCaseFunctionLabel": "afwToStringObjectPath",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringObjectPath",
                "category": "objectPath",
                "dataType": "objectPath",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts objectPath arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<objectPath>",
                "functionLabel": "to_string_objectPath",
                "functionSignature": "string(objectPath arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    objectPath arg)",
                "parameters": [
                    {
                        "dataType": "objectPath",
                        "description": "A objectPath value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_dnsName": {
                "afwCamelCaseFunctionLabel": "afwToStringDnsName",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringDnsName",
                "category": "dnsName",
                "dataType": "dnsName",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts dnsName arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<dnsName>",
                "functionLabel": "to_string_dnsName",
                "functionSignature": "string(dnsName arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    dnsName arg)",
                "parameters": [
                    {
                        "dataType": "dnsName",
                        "description": "A dnsName value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_in_x500Name": {
                "afwCamelCaseFunctionLabel": "afwIsInX500Name",
                "brief": "Checks whether a value is in a list",
                "camelCaseFunctionLabel": "isInX500Name",
                "category": "x500Name",
                "dataType": "x500Name",
                "dataTypeMethodNumber": 10,
                "deprecated": false,
                "description": "Checks whether x500Name value is in list of x500Name list and returns the boolean result.",
                "functionId": "is_in<x500Name>",
                "functionLabel": "is_in_x500Name",
                "functionSignature": "boolean(x500Name value, (list x500Name) list)",
                "functionDeclaration": "/* Checks whether a value is in a list */\nboolean (\n    x500Name value,\n    (list x500Name) list)",
                "parameters": [
                    {
                        "dataType": "x500Name",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "x500Name",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "negative_integer": {
                "afwCamelCaseFunctionLabel": "afwNegativeInteger",
                "brief": "Negative of a number",
                "camelCaseFunctionLabel": "negativeInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 46,
                "deprecated": false,
                "description": "Return negative of integer arg.",
                "functionId": "negative<integer>",
                "functionLabel": "negative_integer",
                "functionSignature": "integer(integer arg)",
                "functionDeclaration": "/* Negative of a number */\ninteger (\n    integer arg)",
                "op": "-",
                "parameters": [
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "journal_get_first": {
                "afwCamelCaseFunctionLabel": "afwJournalGetFirst",
                "brief": "Get first journal entry",
                "camelCaseFunctionLabel": "journalGetFirst",
                "category": "journal",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Get first journal entry.\n\nThis option will set response properties \"entry\" and \"cursor\" if there is a first entry to return.",
                "functionId": "journal_get_first",
                "functionLabel": "journal_get_first",
                "functionSignature": "object(string adaptorId)",
                "functionDeclaration": "/* Get first journal entry */\nobject (\n    string adaptorId)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Id of adaptor.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Response object.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "set_equals_time": {
                "afwCamelCaseFunctionLabel": "afwSetEqualsTime",
                "brief": "Checks whether two lists are subsets of each other",
                "camelCaseFunctionLabel": "setEqualsTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 21,
                "deprecated": false,
                "description": "Returns boolean true if time list1 and time list2 are subsets of each other and return the boolean result.",
                "functionId": "set_equals<time>",
                "functionLabel": "set_equals_time",
                "functionSignature": "boolean((list time) list1, (list time) list2)",
                "functionDeclaration": "/* Checks whether two lists are subsets of each other */\nboolean (\n    (list time) list1,\n    (list time) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "time",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "time",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "debug": {
                "afwCamelCaseFunctionLabel": "afwDebug",
                "brief": "Conditionally write a debug value",
                "camelCaseFunctionLabel": "debug",
                "category": "miscellaneous",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Conditionally, based on the detail parameter, write a value as a string to the debug file descriptor (usually stderr).",
                "functionId": "debug",
                "functionLabel": "debug",
                "functionSignature": "null(any value, boolean detail?)",
                "functionDeclaration": "/* Conditionally write a debug value */\nnull (\n    any value,\n    boolean detail?)",
                "parameters": [
                    {
                        "description": "This is the value that will be converted to its string representation and written.  An undefined value is represented by 'undefined'.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "boolean",
                        "description": "If true, the string will only written if the debug:function_active:detail flag is on.  If false or not specified, the string will only written if the debug:function_active flag is on.",
                        "minArgs": -1,
                        "name": "detail",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "null",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0,
                "sideEffects": [
                    "Value written"
                ]
            },
            "eq_dayTimeDuration": {
                "afwCamelCaseFunctionLabel": "afwEqDayTimeDuration",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "eqDayTimeDuration",
                "category": "dayTimeDuration",
                "dataType": "dayTimeDuration",
                "dataTypeMethodNumber": 6,
                "deprecated": false,
                "description": "Checks for dayTimeDuration arg1 is equal to dayTimeDuration arg2 and return the boolean result.",
                "functionId": "eq<dayTimeDuration>",
                "functionLabel": "eq_dayTimeDuration",
                "functionSignature": "boolean(dayTimeDuration arg1, dayTimeDuration arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    dayTimeDuration arg1,\n    dayTimeDuration arg2)",
                "op": "==",
                "parameters": [
                    {
                        "dataType": "dayTimeDuration",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "dayTimeDuration",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "hexBinary": {
                "afwCamelCaseFunctionLabel": "afwHexBinary",
                "brief": "Convert to data type hexBinary",
                "camelCaseFunctionLabel": "hexBinary",
                "category": "hexBinary",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type hexBinary returning hexBinary result.",
                "functionId": "hexBinary",
                "functionLabel": "hexBinary",
                "functionSignature": "hexBinary(any arg)",
                "functionDeclaration": "/* Convert to data type hexBinary */\nhexBinary (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "hexBinary",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eq_string": {
                "afwCamelCaseFunctionLabel": "afwEqString",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "eqString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 6,
                "deprecated": false,
                "description": "Checks for string arg1 is equal to string arg2 and return the boolean result.",
                "functionId": "eq<string>",
                "functionLabel": "eq_string",
                "functionSignature": "boolean(string arg1, string arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    string arg1,\n    string arg2)",
                "op": "==",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "negative_double": {
                "afwCamelCaseFunctionLabel": "afwNegativeDouble",
                "brief": "Negative of a number",
                "camelCaseFunctionLabel": "negativeDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 46,
                "deprecated": false,
                "description": "Return negative of double arg.",
                "functionId": "negative<double>",
                "functionLabel": "negative_double",
                "functionSignature": "double(double arg)",
                "functionDeclaration": "/* Negative of a number */\ndouble (\n    double arg)",
                "op": "-",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "double",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "reader_list": {
                "afwCamelCaseFunctionLabel": "afwReaderList",
                "camelCaseFunctionLabel": "readerList",
                "category": "lmdb",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Dump the entries in the reader lock table.",
                "functionId": "reader_list",
                "functionLabel": "reader_list",
                "functionSignature": "string(string adaptorId)",
                "functionDeclaration": "string (\n    string adaptorId)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Adaptor Id.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "string",
                    "description": "Reader entries.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "xpath_node_count_1_0": {
                "afwCamelCaseFunctionLabel": "afwXpathNodeCount10",
                "brief": "Number of nodes in node-set",
                "camelCaseFunctionLabel": "xpathNodeCount10",
                "category": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "The number of nodes in a node-set.",
                "functionId": "xpath_node_count_1_0",
                "functionLabel": "xpath_node_count_1_0",
                "functionSignature": "integer(string nodeset)",
                "functionDeclaration": "/* Number of nodes in node-set */\ninteger (\n    string nodeset)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "nodeset",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ne_boolean": {
                "afwCamelCaseFunctionLabel": "afwNeBoolean",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "neBoolean",
                "category": "boolean",
                "dataType": "boolean",
                "dataTypeMethodNumber": 13,
                "deprecated": false,
                "description": "Checks for boolean arg1 is not equal to boolean arg2 and return the boolean result.",
                "functionId": "ne<boolean>",
                "functionLabel": "ne_boolean",
                "functionSignature": "boolean(boolean arg1, boolean arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    boolean arg1,\n    boolean arg2)",
                "op": "!=",
                "parameters": [
                    {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "regexp_match_ipAddress": {
                "afwCamelCaseFunctionLabel": "afwRegexpMatchIpAddress",
                "brief": "Search for a match using a regular expression",
                "camelCaseFunctionLabel": "regexpMatchIpAddress",
                "category": "ipAddress",
                "dataType": "ipAddress",
                "dataTypeMethodNumber": 17,
                "deprecated": false,
                "description": "Checks whether ipAddress value matches the regular expression regexp and return the boolean result.",
                "functionId": "regexp_match<ipAddress>",
                "functionLabel": "regexp_match_ipAddress",
                "functionSignature": "boolean(ipAddress value, string regexp)",
                "functionDeclaration": "/* Search for a match using a regular expression */\nboolean (\n    ipAddress value,\n    string regexp)",
                "parameters": [
                    {
                        "dataType": "ipAddress",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "regexp",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "set_equals_boolean": {
                "afwCamelCaseFunctionLabel": "afwSetEqualsBoolean",
                "brief": "Checks whether two lists are subsets of each other",
                "camelCaseFunctionLabel": "setEqualsBoolean",
                "category": "boolean",
                "dataType": "boolean",
                "dataTypeMethodNumber": 21,
                "deprecated": false,
                "description": "Returns boolean true if boolean list1 and boolean list2 are subsets of each other and return the boolean result.",
                "functionId": "set_equals<boolean>",
                "functionLabel": "set_equals_boolean",
                "functionSignature": "boolean((list boolean) list1, (list boolean) list2)",
                "functionDeclaration": "/* Checks whether two lists are subsets of each other */\nboolean (\n    (list boolean) list1,\n    (list boolean) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "boolean",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "boolean",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "xpath_node_match_1_0": {
                "afwCamelCaseFunctionLabel": "afwXpathNodeMatch10",
                "brief": "Checks whether two node-sets or their children have an equal node",
                "camelCaseFunctionLabel": "xpathNodeMatch10",
                "category": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Returns true if any of the nodes matched by nodeset1 are equal to any of the nodes matched by nodeset2 or their corresponding children.",
                "functionId": "xpath_node_match_1_0",
                "functionLabel": "xpath_node_match_1_0",
                "functionSignature": "boolean(string nodeset2, string arg2)",
                "functionDeclaration": "/* Checks whether two node-sets or their children have an equal node */\nboolean (\n    string nodeset2,\n    string arg2)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "nodeset2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "regexp_match": {
                "afwCamelCaseFunctionLabel": "afwRegexpMatch",
                "brief": "Search for a match using a regular expression",
                "camelCaseFunctionLabel": "regexpMatch",
                "category": "polymorphic",
                "dataTypeMethodNumber": 17,
                "deprecated": false,
                "description": "Checks whether <Type> value matches the regular expression regexp and return the boolean result.",
                "functionId": "regexp_match",
                "functionLabel": "regexp_match",
                "functionSignature": "<Type> boolean(Type value, string regexp)",
                "functionDeclaration": "/* Search for a match using a regular expression */\n<Type> boolean (\n    Type value,\n    string regexp)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "regexp",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "dnsName",
                    "ipAddress",
                    "rfc822Name",
                    "string",
                    "x500Name"
                ],
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_template": {
                "afwCamelCaseFunctionLabel": "afwIsTemplate",
                "brief": "Checks whether value is dataType template",
                "camelCaseFunctionLabel": "isTemplate",
                "category": "template",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type template.  Use is_list_of_template() instead to test for a list of template.",
                "functionId": "is<template>",
                "functionLabel": "is_template",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType template */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is template.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "length_anyURI": {
                "afwCamelCaseFunctionLabel": "afwLengthAnyURI",
                "brief": "Returns number of codepoints in value",
                "camelCaseFunctionLabel": "lengthAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 12,
                "deprecated": false,
                "description": "This is a polymorphic function where anyURI can be any of the supported data types.  Return the integer number of codepoints in arg.",
                "functionId": "length<anyURI>",
                "functionLabel": "length_anyURI",
                "functionSignature": "integer(anyURI value)",
                "functionDeclaration": "/* Returns number of codepoints in value */\ninteger (\n    anyURI value)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "description": "Returns number of code points in single anyURI value.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ends_with_string": {
                "afwCamelCaseFunctionLabel": "afwEndsWithString",
                "brief": "Checks whether value ends with a string",
                "camelCaseFunctionLabel": "endsWithString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 5,
                "deprecated": false,
                "description": "Checks whether string value ends with a string and return the boolean result.",
                "functionId": "ends_with<string>",
                "functionLabel": "ends_with_string",
                "functionSignature": "boolean(string value, string subString)",
                "functionDeclaration": "/* Checks whether value ends with a string */\nboolean (\n    string value,\n    string subString)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "subString",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_in_base64Binary": {
                "afwCamelCaseFunctionLabel": "afwIsInBase64Binary",
                "brief": "Checks whether a value is in a list",
                "camelCaseFunctionLabel": "isInBase64Binary",
                "category": "base64Binary",
                "dataType": "base64Binary",
                "dataTypeMethodNumber": 10,
                "deprecated": false,
                "description": "Checks whether base64Binary value is in list of base64Binary list and returns the boolean result.",
                "functionId": "is_in<base64Binary>",
                "functionLabel": "is_in_base64Binary",
                "functionSignature": "boolean(base64Binary value, (list base64Binary) list)",
                "functionDeclaration": "/* Checks whether a value is in a list */\nboolean (\n    base64Binary value,\n    (list base64Binary) list)",
                "parameters": [
                    {
                        "dataType": "base64Binary",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "base64Binary",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_dayTimeDuration_1_0": {
                "afwCamelCaseFunctionLabel": "afwBagDayTimeDuration10",
                "brief": "Makes a list from args",
                "camelCaseFunctionLabel": "bagDayTimeDuration10",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Takes any number of dayTimeDuration_1_0 args and returns a list of list.",
                "functionId": "bag<dayTimeDuration_1_0>",
                "functionLabel": "bag_dayTimeDuration_1_0",
                "functionSignature": "(list list)(...(list dayTimeDuration_1_0) args)",
                "functionDeclaration": "/* Makes a list from args */\n(list list) (\n    ...(list dayTimeDuration_1_0) args)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dayTimeDuration_1_0",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "array",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "policy_only_one_applicable": {
                "afwCamelCaseFunctionLabel": "afwPolicyOnlyOneApplicable",
                "brief": "Policy combining algorithm - only_one_applicable",
                "camelCaseFunctionLabel": "policyOnlyOneApplicable",
                "category": "policy_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Policy combining algorithm for only one applicable.",
                "functionId": "policy_only_one_applicable",
                "functionLabel": "policy_only_one_applicable",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Policy combining algorithm - only_one_applicable */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "n_of": {
                "afwCamelCaseFunctionLabel": "afwNOf",
                "brief": "Check for n true values",
                "camelCaseFunctionLabel": "nOf",
                "category": "logical",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "integer arg1 specifies the number of boolean args that follow that must evaluate to true for boolean true to be returned.  If arg1 is 0, true is returned.  Once arg1 args evaluate to true, true is returned and the remaining args remain unevaluated.",
                "functionId": "n_of",
                "functionLabel": "n_of",
                "functionSignature": "boolean(integer arg1, ...boolean args)",
                "functionDeclaration": "/* Check for n true values */\nboolean (\n    integer arg1,\n    ...boolean args)",
                "parameters": [
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "boolean",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subtract_double": {
                "afwCamelCaseFunctionLabel": "afwSubtractDouble",
                "brief": "Subtract numbers",
                "camelCaseFunctionLabel": "subtractDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 49,
                "deprecated": false,
                "description": "Subtract double arg2 from double arg1 and return the double result.",
                "functionId": "subtract<double>",
                "functionLabel": "subtract_double",
                "functionSignature": "double(double arg1, double arg2)",
                "functionDeclaration": "/* Subtract numbers */\ndouble (\n    double arg1,\n    double arg2)",
                "op": "-",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "double",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "one_and_only_x500Name": {
                "afwCamelCaseFunctionLabel": "afwOneAndOnlyX500Name",
                "brief": "Converts a one value list to a x500Name value",
                "camelCaseFunctionLabel": "oneAndOnlyX500Name",
                "category": "x500Name",
                "dataType": "x500Name",
                "dataTypeMethodNumber": 15,
                "deprecated": false,
                "description": "This converts a list list  that contains one value to a data type x500Name value.",
                "functionId": "one_and_only<x500Name>",
                "functionLabel": "one_and_only_x500Name",
                "functionSignature": "x500Name((list list) list)",
                "functionDeclaration": "/* Converts a one value list to a x500Name value */\nx500Name (\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "x500Name",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "regexp_match_x500Name": {
                "afwCamelCaseFunctionLabel": "afwRegexpMatchX500Name",
                "brief": "Search for a match using a regular expression",
                "camelCaseFunctionLabel": "regexpMatchX500Name",
                "category": "x500Name",
                "dataType": "x500Name",
                "dataTypeMethodNumber": 17,
                "deprecated": false,
                "description": "Checks whether x500Name value matches the regular expression regexp and return the boolean result.",
                "functionId": "regexp_match<x500Name>",
                "functionLabel": "regexp_match_x500Name",
                "functionSignature": "boolean(x500Name value, string regexp)",
                "functionDeclaration": "/* Search for a match using a regular expression */\nboolean (\n    x500Name value,\n    string regexp)",
                "parameters": [
                    {
                        "dataType": "x500Name",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "regexp",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_in_rfc822Name": {
                "afwCamelCaseFunctionLabel": "afwIsInRfc822Name",
                "brief": "Checks whether a value is in a list",
                "camelCaseFunctionLabel": "isInRfc822Name",
                "category": "rfc822Name",
                "dataType": "rfc822Name",
                "dataTypeMethodNumber": 10,
                "deprecated": false,
                "description": "Checks whether rfc822Name value is in list of rfc822Name list and returns the boolean result.",
                "functionId": "is_in<rfc822Name>",
                "functionLabel": "is_in_rfc822Name",
                "functionSignature": "boolean(rfc822Name value, (list rfc822Name) list)",
                "functionDeclaration": "/* Checks whether a value is in a list */\nboolean (\n    rfc822Name value,\n    (list rfc822Name) list)",
                "parameters": [
                    {
                        "dataType": "rfc822Name",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "rfc822Name",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "delete_object": {
                "afwCamelCaseFunctionLabel": "afwDeleteObject",
                "brief": "Delete adaptive object",
                "camelCaseFunctionLabel": "deleteObject",
                "category": "adaptor",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Delete an adaptive object.",
                "functionId": "delete_object",
                "functionLabel": "delete_object",
                "functionSignature": "(object _AdaptiveJournalEntry_)(string adaptorId, string objectType, string objectId, object journal?, object adaptorTypeSpecific?)",
                "functionDeclaration": "/* Delete adaptive object */\n(object _AdaptiveJournalEntry_) (\n    string adaptorId,\n    string objectType,\n    string objectId,\n    object journal?,\n    object adaptorTypeSpecific?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Id of adaptor containing object to delete.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Id of adaptive object type of object to delete.",
                        "minArgs": -1,
                        "name": "objectType",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Id of object to delete.",
                        "minArgs": -1,
                        "name": "objectId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "The properties of this object will be added to the associated journal entry.  Refer to /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names to avoid and for ones that have specific semantics.",
                        "minArgs": -1,
                        "name": "journal",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "This is an optional object parameter with an objectType determined by the adaptorType associated with the adaptorId parameter.  If the adaptorType supports this parameter, adaptor afw will have an adaptive object type with an id of:\n\n_AdaptiveAdaptorTypeSpecific_${adaptorType}_delete_object\n\nwhere ${adaptorType} is the adaptor type id.",
                        "minArgs": -1,
                        "name": "adaptorTypeSpecific",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveJournalEntry_",
                    "description": "Resulting journal entry.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "parse_uri": {
                "afwCamelCaseFunctionLabel": "afwParseUri",
                "brief": "Parse URI",
                "camelCaseFunctionLabel": "parseUri",
                "category": "miscellaneous",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Parse a URI.",
                "functionId": "parse_uri",
                "functionLabel": "parse_uri",
                "functionSignature": "(object _AdaptiveParsedURI_)(string uri, boolean isValuePath?, string currentPath?)",
                "functionDeclaration": "/* Parse URI */\n(object _AdaptiveParsedURI_) (\n    string uri,\n    boolean isValuePath?,\n    string currentPath?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "URI to parse",
                        "minArgs": -1,
                        "name": "uri",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "boolean",
                        "description": "The URI is an adaptive value path.  If the path begins with a single slash \"/\", the URI will be parsed as an adaptive value path (example: /adaptorId/objectType/objectId.propertyNames)",
                        "minArgs": -1,
                        "name": "isValuePath",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "If isValuePath is true, this is the current path that is used to resolve relative paths.  If isValuePath is not true, this parameter is ignored.",
                        "minArgs": -1,
                        "name": "currentPath",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveParsedURI_",
                    "description": "Object with results of parse.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "policy_deny_overrides_1_0": {
                "afwCamelCaseFunctionLabel": "afwPolicyDenyOverrides10",
                "brief": "Policy combining algorithm - legacy_policy_deny_overrides",
                "camelCaseFunctionLabel": "policyDenyOverrides10",
                "category": "policy_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Policy combining algorithm for legacy policy deny overrides.",
                "functionId": "policy_deny_overrides_1_0",
                "functionLabel": "policy_deny_overrides_1_0",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Policy combining algorithm - legacy_policy_deny_overrides */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "nex_x500Name": {
                "afwCamelCaseFunctionLabel": "afwNexX500Name",
                "brief": "Checks for not equal value or type",
                "camelCaseFunctionLabel": "nexX500Name",
                "category": "x500Name",
                "dataType": "x500Name",
                "dataTypeMethodNumber": 14,
                "deprecated": false,
                "description": "Checks for x500Name arg1 not equal to value or data type of arg2 and return the boolean result.",
                "functionId": "nex<x500Name>",
                "functionLabel": "nex_x500Name",
                "functionSignature": "boolean(x500Name arg1, x500Name arg2)",
                "functionDeclaration": "/* Checks for not equal value or type */\nboolean (\n    x500Name arg1,\n    x500Name arg2)",
                "op": "!==",
                "parameters": [
                    {
                        "dataType": "x500Name",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "x500Name",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eqx_dateTime": {
                "afwCamelCaseFunctionLabel": "afwEqxDateTime",
                "brief": "Checks for equal and type",
                "camelCaseFunctionLabel": "eqxDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 7,
                "deprecated": false,
                "description": "Checks for dateTime arg1 is equal to value and type of arg2 and return the boolean result.",
                "functionId": "eqx<dateTime>",
                "functionLabel": "eqx_dateTime",
                "functionSignature": "boolean(dateTime arg1, dateTime arg2)",
                "functionDeclaration": "/* Checks for equal and type */\nboolean (\n    dateTime arg1,\n    dateTime arg2)",
                "op": "===",
                "parameters": [
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "replace_object_with_uri": {
                "afwCamelCaseFunctionLabel": "afwReplaceObjectWithUri",
                "brief": "Replace adaptive object with URI",
                "camelCaseFunctionLabel": "replaceObjectWithUri",
                "category": "adaptor",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Replace an adaptive object with a given URI.",
                "functionId": "replace_object_with_uri",
                "functionLabel": "replace_object_with_uri",
                "functionSignature": "(object _AdaptiveJournalEntry_)(anyURI uri, object object, object journal?, object adaptorTypeSpecific?)",
                "functionDeclaration": "/* Replace adaptive object with URI */\n(object _AdaptiveJournalEntry_) (\n    anyURI uri,\n    object object,\n    object journal?,\n    object adaptorTypeSpecific?)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "description": "URI of object to replace.  If a URI begins with a single slash ('/'), it is the local object path.",
                        "minArgs": -1,
                        "name": "uri",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "Replacement object.",
                        "minArgs": -1,
                        "name": "object",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "The properties of this object will be added to the associated journal entry.  Refer to /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names to avoid and for ones that have specific semantics.",
                        "minArgs": -1,
                        "name": "journal",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "This is an optional object parameter with an objectType determined by the adaptorType associated with the adaptorId parameter.  If the adaptorType supports this parameter, adaptor afw will have an adaptive object type with an id of:\n\n_AdaptiveAdaptorTypeSpecific_${adaptorType}_replace_object\n\nWhere ${adaptorType} is the adaptor type id.",
                        "minArgs": -1,
                        "name": "adaptorTypeSpecific",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveJournalEntry_",
                    "description": "Resulting journal entry.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "at_least_one_member_of_base64Binary": {
                "afwCamelCaseFunctionLabel": "afwAtLeastOneMemberOfBase64Binary",
                "brief": "Checks for at least one value in common",
                "camelCaseFunctionLabel": "atLeastOneMemberOfBase64Binary",
                "category": "base64Binary",
                "dataType": "base64Binary",
                "dataTypeMethodNumber": 1,
                "deprecated": false,
                "description": "Returns boolean true if at least one value in base64Binary list1 is in base64Binary list2.",
                "functionId": "at_least_one_member_of<base64Binary>",
                "functionLabel": "at_least_one_member_of_base64Binary",
                "functionSignature": "boolean((list base64Binary) list1, (list base64Binary) list2)",
                "functionDeclaration": "/* Checks for at least one value in common */\nboolean (\n    (list base64Binary) list1,\n    (list base64Binary) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "base64Binary",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "base64Binary",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subtract_dayTimeDuration_1_0_dateTime": {
                "afwCamelCaseFunctionLabel": "afwSubtractDayTimeDuration10DateTime",
                "brief": "Subtract numbers",
                "camelCaseFunctionLabel": "subtractDayTimeDuration10DateTime",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Subtract dayTimeDuration_1_0 arg2 from dateTime arg1 and return the dateTime result.",
                "functionId": "subtract_dayTimeDuration_1_0<dateTime>",
                "functionLabel": "subtract_dayTimeDuration_1_0_dateTime",
                "functionSignature": "dateTime(dateTime arg1, dayTimeDuration_1_0 arg2)",
                "functionDeclaration": "/* Subtract numbers */\ndateTime (\n    dateTime arg1,\n    dayTimeDuration_1_0 arg2)",
                "parameters": [
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "dayTimeDuration_1_0",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "dateTime",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eqx_date": {
                "afwCamelCaseFunctionLabel": "afwEqxDate",
                "brief": "Checks for equal and type",
                "camelCaseFunctionLabel": "eqxDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 7,
                "deprecated": false,
                "description": "Checks for date arg1 is equal to value and type of arg2 and return the boolean result.",
                "functionId": "eqx<date>",
                "functionLabel": "eqx_date",
                "functionSignature": "boolean(date arg1, date arg2)",
                "functionDeclaration": "/* Checks for equal and type */\nboolean (\n    date arg1,\n    date arg2)",
                "op": "===",
                "parameters": [
                    {
                        "dataType": "date",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "date",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "pow_double": {
                "afwCamelCaseFunctionLabel": "afwPowDouble",
                "brief": "Base raised to a power",
                "camelCaseFunctionLabel": "powDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 47,
                "deprecated": false,
                "description": "This returns the value of base raised to a power.",
                "functionId": "pow<double>",
                "functionLabel": "pow_double",
                "functionSignature": "double(double base, double exponent)",
                "functionDeclaration": "/* Base raised to a power */\ndouble (\n    double base,\n    double exponent)",
                "parameters": [
                    {
                        "dataType": "double",
                        "description": "Base value.",
                        "minArgs": -1,
                        "name": "base",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "double",
                        "description": "Exponent value.",
                        "minArgs": -1,
                        "name": "exponent",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "double",
                    "description": "Base raised to the power exponent.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "replace_object": {
                "afwCamelCaseFunctionLabel": "afwReplaceObject",
                "brief": "Replace adaptive object",
                "camelCaseFunctionLabel": "replaceObject",
                "category": "adaptor",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Replace an adaptive object.",
                "functionId": "replace_object",
                "functionLabel": "replace_object",
                "functionSignature": "(object _AdaptiveJournalEntry_)(string adaptorId, string objectType, string objectId, object object, object journal?, object adaptorTypeSpecific?)",
                "functionDeclaration": "/* Replace adaptive object */\n(object _AdaptiveJournalEntry_) (\n    string adaptorId,\n    string objectType,\n    string objectId,\n    object object,\n    object journal?,\n    object adaptorTypeSpecific?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Id of adaptor containing object to replace.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Id of adaptive object type of object to replace.",
                        "minArgs": -1,
                        "name": "objectType",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Id of object to replace.",
                        "minArgs": -1,
                        "name": "objectId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "Replacement object.",
                        "minArgs": -1,
                        "name": "object",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "The properties of this object will be added to the associated journal entry.  Refer to /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names to avoid and for ones that have specific semantics.",
                        "minArgs": -1,
                        "name": "journal",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "This is an optional object parameter with an objectType determined by the adaptorType associated with the adaptorId parameter.  If the adaptorType supports this parameter, adaptor afw will have an adaptive object type with an id of:\n\n_AdaptiveAdaptorTypeSpecific_${adaptorType}_replace_object\n\nWhere ${adaptorType} is the adaptor type id.",
                        "minArgs": -1,
                        "name": "adaptorTypeSpecific",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveJournalEntry_",
                    "description": "Resulting journal entry.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_double_string": {
                "afwCamelCaseFunctionLabel": "afwToDoubleString",
                "brief": "Converts to double",
                "camelCaseFunctionLabel": "toDoubleString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 54,
                "deprecated": false,
                "description": "Converts string arg to double and returns double result.",
                "functionId": "to_double<string>",
                "functionLabel": "to_double_string",
                "functionSignature": "double(string arg)",
                "functionDeclaration": "/* Converts to double */\ndouble (\n    string arg)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "double",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "intersection_date": {
                "afwCamelCaseFunctionLabel": "afwIntersectionDate",
                "brief": "Returns intersection of two lists",
                "camelCaseFunctionLabel": "intersectionDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 9,
                "deprecated": false,
                "description": "Returns a list of date with the values that are common to both list of date list1 and list2.",
                "functionId": "intersection<date>",
                "functionLabel": "intersection_date",
                "functionSignature": "(list date)((list date) list1, (list date) list2)",
                "functionDeclaration": "/* Returns intersection of two lists */\n(list date) (\n    (list date) list1,\n    (list date) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "date",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "date",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "date",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "concat": {
                "afwCamelCaseFunctionLabel": "afwConcat",
                "brief": "Concatenate string values",
                "camelCaseFunctionLabel": "concat",
                "category": "string",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Concatenate the string value of two or more args of any dataType and return the string result.  An arg with an undefined value is represented by 'undefined'.",
                "functionId": "concat",
                "functionLabel": "concat",
                "functionSignature": "string(...any args)",
                "functionDeclaration": "/* Concatenate string values */\nstring (\n    ...any args)",
                "op": "..",
                "parameters": [
                    {
                        "minArgs": 2,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "service_start": {
                "afwCamelCaseFunctionLabel": "afwServiceStart",
                "brief": "Start service",
                "camelCaseFunctionLabel": "serviceStart",
                "category": "administrative",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Start a service.",
                "functionId": "service_start",
                "functionLabel": "service_start",
                "functionSignature": "(object _AdaptiveService_)(string serviceId)",
                "functionDeclaration": "/* Start service */\n(object _AdaptiveService_) (\n    string serviceId)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "The serviceId of the service to start",
                        "minArgs": -1,
                        "name": "serviceId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveService_",
                    "description": "_AdaptiveService_ object for the service which will contain the current status of the service.  If there is an error, the status property value will be \"error\" and \"statusMessage\" contain an error message.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ne_dateTime": {
                "afwCamelCaseFunctionLabel": "afwNeDateTime",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "neDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 13,
                "deprecated": false,
                "description": "Checks for dateTime arg1 is not equal to dateTime arg2 and return the boolean result.",
                "functionId": "ne<dateTime>",
                "functionLabel": "ne_dateTime",
                "functionSignature": "boolean(dateTime arg1, dateTime arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    dateTime arg1,\n    dateTime arg2)",
                "op": "!=",
                "parameters": [
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "xpath_node_eq": {
                "afwCamelCaseFunctionLabel": "afwXpathNodeEq",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "xpathNodeEq",
                "category": "xpathExpression",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Checks for xpathExpression arg1 is equal to xpathExpression arg2 and return the boolean result.",
                "functionId": "xpath_node_eq",
                "functionLabel": "xpath_node_eq",
                "functionSignature": "boolean(xpathExpression arg1, xpathExpression arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    xpathExpression arg1,\n    xpathExpression arg2)",
                "op": "==",
                "parameters": [
                    {
                        "dataType": "xpathExpression",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "xpathExpression",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "length": {
                "afwCamelCaseFunctionLabel": "afwLength",
                "brief": "Returns number of codepoints in value",
                "camelCaseFunctionLabel": "length",
                "category": "polymorphic",
                "dataTypeMethodNumber": 12,
                "deprecated": false,
                "description": "This is a polymorphic function where <Type> can be any of the supported data types.  Return the integer number of codepoints in arg.",
                "functionId": "length",
                "functionLabel": "length",
                "functionSignature": "<Type> integer(Type value)",
                "functionDeclaration": "/* Returns number of codepoints in value */\n<Type> integer (\n    Type value)",
                "parameters": [
                    {
                        "description": "Returns number of code points in single <Type> value.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subset_x500Name": {
                "afwCamelCaseFunctionLabel": "afwSubsetX500Name",
                "brief": "Determines if the first list is a subset of second list",
                "camelCaseFunctionLabel": "subsetX500Name",
                "category": "x500Name",
                "dataType": "x500Name",
                "dataTypeMethodNumber": 24,
                "deprecated": false,
                "description": "Returns boolean true if the unique values in x500Name list1 are all in x500Name list2.",
                "functionId": "subset<x500Name>",
                "functionLabel": "subset_x500Name",
                "functionSignature": "boolean((list x500Name) list1, (list x500Name) list2)",
                "functionDeclaration": "/* Determines if the first list is a subset of second list */\nboolean (\n    (list x500Name) list1,\n    (list x500Name) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "x500Name",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "x500Name",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_double": {
                "afwCamelCaseFunctionLabel": "afwBagDouble",
                "brief": "Makes a list from args",
                "camelCaseFunctionLabel": "bagDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 2,
                "deprecated": false,
                "description": "Takes any number of double args and returns a list of list.",
                "functionId": "bag<double>",
                "functionLabel": "bag_double",
                "functionSignature": "(list double)(...(list double) args)",
                "functionDeclaration": "/* Makes a list from args */\n(list double) (\n    ...(list double) args)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "double",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "double",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "compile_template": {
                "afwCamelCaseFunctionLabel": "afwCompileTemplate",
                "brief": "Compile template value",
                "camelCaseFunctionLabel": "compileTemplate",
                "category": "template",
                "dataType": "template",
                "dataTypeMethodNumber": 51,
                "deprecated": false,
                "description": "Compile template value and return either an unevaluated adaptive value or a string containing the compiler listing.",
                "functionId": "compile<template>",
                "functionLabel": "compile_template",
                "functionSignature": "unevaluated(template source, any listing?)",
                "functionDeclaration": "/* Compile template value */\nunevaluated (\n    template source /* Source to compile */,\n    any listing?    /* Listing option */)",
                "parameters": [
                    {
                        "brief": "Source to compile",
                        "dataType": "template",
                        "description": "template string to compile",
                        "minArgs": -1,
                        "name": "source",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "brief": "Listing option",
                        "description": "If specified, a compiler listing is produced instead of an unevaluated expression value.\n\nThis parameter can be an integer between 0 and 10 of a string that is used for indentation.  If 0 is specified, no whitespace is added to the resulting string.  If 1 through 10 is specified, that number of spaces is used.",
                        "minArgs": -1,
                        "name": "listing",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "unevaluated",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "index_remove": {
                "afwCamelCaseFunctionLabel": "afwIndexRemove",
                "brief": "Remove index definition",
                "camelCaseFunctionLabel": "indexRemove",
                "category": "indexes",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Remove an index definition.",
                "functionId": "index_remove",
                "functionLabel": "index_remove",
                "functionSignature": "object(string adaptorId, string key)",
                "functionDeclaration": "/* Remove index definition */\nobject (\n    string adaptorId,\n    string key)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Id of adaptor.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "The index key to be removed.",
                        "minArgs": -1,
                        "name": "key",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Object response from the indexing process",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "union_yearMonthDuration": {
                "afwCamelCaseFunctionLabel": "afwUnionYearMonthDuration",
                "brief": "Returns union of two or more string lists",
                "camelCaseFunctionLabel": "unionYearMonthDuration",
                "category": "yearMonthDuration",
                "dataType": "yearMonthDuration",
                "dataTypeMethodNumber": 27,
                "deprecated": false,
                "description": "Returns a list of yearMonthDuration contains all of the unique values in two or more list of yearMonthDuration args.",
                "functionId": "union<yearMonthDuration>",
                "functionLabel": "union_yearMonthDuration",
                "functionSignature": "(list yearMonthDuration)(...(list yearMonthDuration) lists)",
                "functionDeclaration": "/* Returns union of two or more string lists */\n(list yearMonthDuration) (\n    ...(list yearMonthDuration) lists)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "yearMonthDuration",
                        "description": "Two or more lists.",
                        "minArgs": 2,
                        "name": "lists",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "yearMonthDuration",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "le_date": {
                "afwCamelCaseFunctionLabel": "afwLeDate",
                "brief": "Checks for less than or equal",
                "camelCaseFunctionLabel": "leDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 34,
                "deprecated": false,
                "description": "Checks for date arg1 is less than or equal to date arg2 and return the boolean result.\n\nIf a date value does not include a time-zone value, then the local time-zone value will be assigned.",
                "functionId": "le<date>",
                "functionLabel": "le_date",
                "functionSignature": "boolean(date arg1, any arg2)",
                "functionDeclaration": "/* Checks for less than or equal */\nboolean (\n    date arg1,\n    any arg2)",
                "op": "<=",
                "parameters": [
                    {
                        "dataType": "date",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "set_equals_yearMonthDuration_1_0": {
                "afwCamelCaseFunctionLabel": "afwSetEqualsYearMonthDuration10",
                "brief": "Checks whether two lists are subsets of each other",
                "camelCaseFunctionLabel": "setEqualsYearMonthDuration10",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Returns boolean true if yearMonthDuration_1_0 list1 and yearMonthDuration_1_0 list2 are subsets of each other and return the boolean result.",
                "functionId": "set_equals<yearMonthDuration_1_0>",
                "functionLabel": "set_equals_yearMonthDuration_1_0",
                "functionSignature": "boolean((list list) list1, (list list) list1)",
                "functionDeclaration": "/* Checks whether two lists are subsets of each other */\nboolean (\n    (list list) list1,\n    (list list) list1)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "policy_permit_overrides_1_0": {
                "afwCamelCaseFunctionLabel": "afwPolicyPermitOverrides10",
                "brief": "Policy combining algorithm - legacy_policy_permit_overrides",
                "camelCaseFunctionLabel": "policyPermitOverrides10",
                "category": "policy_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Policy combining algorithm for legacy policy permit overrides.",
                "functionId": "policy_permit_overrides_1_0",
                "functionLabel": "policy_permit_overrides_1_0",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Policy combining algorithm - legacy_policy_permit_overrides */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "decompile": {
                "afwCamelCaseFunctionLabel": "afwDecompile",
                "brief": "Decompile value",
                "camelCaseFunctionLabel": "decompile",
                "category": "compiler",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Decompile an adaptive value to string.",
                "functionId": "decompile",
                "functionLabel": "decompile",
                "functionSignature": "string(any value, any whitespace?)",
                "functionDeclaration": "/* Decompile value */\nstring (\n    any value,\n    any whitespace?)",
                "parameters": [
                    {
                        "description": "Value to decompile.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "Add whitespace for readability if present and not 0.  This parameter can be an integer between 0 and 10 or a string that is used for indentation.  If 0 is specified, no whitespace is added to the resulting string.  If 1 through 10 is specified, that number of spaces is used.",
                        "minArgs": -1,
                        "name": "whitespace",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "Decompiled value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "set_equals": {
                "afwCamelCaseFunctionLabel": "afwSetEquals",
                "brief": "Checks whether two lists are subsets of each other",
                "camelCaseFunctionLabel": "setEquals",
                "category": "polymorphic",
                "dataTypeMethodNumber": 21,
                "deprecated": false,
                "description": "Returns boolean true if <Type> list1 and <Type> list2 are subsets of each other and return the boolean result.",
                "functionId": "set_equals",
                "functionLabel": "set_equals",
                "functionSignature": "<Type> boolean(list list1, list list2)",
                "functionDeclaration": "/* Checks whether two lists are subsets of each other */\n<Type> boolean (\n    list list1,\n    list list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": true
                    },
                    {
                        "dataType": "array",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": true
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "base64Binary",
                    "boolean",
                    "date",
                    "dateTime",
                    "dayTimeDuration",
                    "double",
                    "hexBinary",
                    "integer",
                    "rfc822Name",
                    "string",
                    "time",
                    "x500Name",
                    "yearMonthDuration"
                ],
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "union_time": {
                "afwCamelCaseFunctionLabel": "afwUnionTime",
                "brief": "Returns union of two or more string lists",
                "camelCaseFunctionLabel": "unionTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 27,
                "deprecated": false,
                "description": "Returns a list of time contains all of the unique values in two or more list of time args.",
                "functionId": "union<time>",
                "functionLabel": "union_time",
                "functionSignature": "(list time)(...(list time) lists)",
                "functionDeclaration": "/* Returns union of two or more string lists */\n(list time) (\n    ...(list time) lists)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "time",
                        "description": "Two or more lists.",
                        "minArgs": 2,
                        "name": "lists",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "time",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "rule_deny_overrides_1_0": {
                "afwCamelCaseFunctionLabel": "afwRuleDenyOverrides10",
                "brief": "Rule combining algorithm - legacy_rule_deny_overrides",
                "camelCaseFunctionLabel": "ruleDenyOverrides10",
                "category": "rule_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Rule combining algorithm for legacy rule deny overrides.",
                "functionId": "rule_deny_overrides_1_0",
                "functionLabel": "rule_deny_overrides_1_0",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Rule combining algorithm - legacy_rule_deny_overrides */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_boolean": {
                "afwCamelCaseFunctionLabel": "afwIsBoolean",
                "brief": "Checks whether value is dataType boolean",
                "camelCaseFunctionLabel": "isBoolean",
                "category": "boolean",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type boolean.  Use is_list_of_boolean() instead to test for a list of boolean.",
                "functionId": "is<boolean>",
                "functionLabel": "is_boolean",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType boolean */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is boolean.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_double": {
                "afwCamelCaseFunctionLabel": "afwToDouble",
                "brief": "Converts to double",
                "camelCaseFunctionLabel": "toDouble",
                "category": "polymorphic",
                "dataTypeMethodNumber": 54,
                "deprecated": false,
                "description": "Converts <Type> arg to double and returns double result.",
                "functionId": "to_double",
                "functionLabel": "to_double",
                "functionSignature": "<Type> double(Type arg)",
                "functionDeclaration": "/* Converts to double */\n<Type> double (\n    Type arg)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "integer",
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "double",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "now_local": {
                "afwCamelCaseFunctionLabel": "afwNowLocal",
                "brief": "Local dataTime",
                "camelCaseFunctionLabel": "nowLocal",
                "category": "miscellaneous",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Return current local dateTime.",
                "functionId": "now_local",
                "functionLabel": "now_local",
                "functionSignature": "dateTime()",
                "functionDeclaration": "/* Local dataTime */\ndateTime (\n)",
                "parameters": [],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "dateTime",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_size_double": {
                "afwCamelCaseFunctionLabel": "afwBagSizeDouble",
                "brief": "Returns the number of values in a bag",
                "camelCaseFunctionLabel": "bagSizeDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 3,
                "deprecated": false,
                "description": "This returns the integer number of values in list bag arg.",
                "functionId": "bag_size<double>",
                "functionLabel": "bag_size_double",
                "functionSignature": "integer((list double) arg)",
                "functionDeclaration": "/* Returns the number of values in a bag */\ninteger (\n    (list double) arg)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "double",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "set_equals_hexBinary": {
                "afwCamelCaseFunctionLabel": "afwSetEqualsHexBinary",
                "brief": "Checks whether two lists are subsets of each other",
                "camelCaseFunctionLabel": "setEqualsHexBinary",
                "category": "hexBinary",
                "dataType": "hexBinary",
                "dataTypeMethodNumber": 21,
                "deprecated": false,
                "description": "Returns boolean true if hexBinary list1 and hexBinary list2 are subsets of each other and return the boolean result.",
                "functionId": "set_equals<hexBinary>",
                "functionLabel": "set_equals_hexBinary",
                "functionSignature": "boolean((list hexBinary) list1, (list hexBinary) list2)",
                "functionDeclaration": "/* Checks whether two lists are subsets of each other */\nboolean (\n    (list hexBinary) list1,\n    (list hexBinary) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "hexBinary",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "hexBinary",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_size_date": {
                "afwCamelCaseFunctionLabel": "afwBagSizeDate",
                "brief": "Returns the number of values in a bag",
                "camelCaseFunctionLabel": "bagSizeDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 3,
                "deprecated": false,
                "description": "This returns the integer number of values in list bag arg.",
                "functionId": "bag_size<date>",
                "functionLabel": "bag_size_date",
                "functionSignature": "integer((list date) arg)",
                "functionDeclaration": "/* Returns the number of values in a bag */\ninteger (\n    (list date) arg)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "date",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_dnsName": {
                "afwCamelCaseFunctionLabel": "afwIsDnsName",
                "brief": "Checks whether value is dataType dnsName",
                "camelCaseFunctionLabel": "isDnsName",
                "category": "dnsName",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type dnsName.  Use is_list_of_dnsName() instead to test for a list of dnsName.",
                "functionId": "is<dnsName>",
                "functionLabel": "is_dnsName",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType dnsName */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is dnsName.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "all_of_all": {
                "afwCamelCaseFunctionLabel": "afwAllOfAll",
                "brief": "All combinations true",
                "camelCaseFunctionLabel": "allOfAll",
                "category": "higher_order_array",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Returns true if the result of calling predicate with all of the combination of values from list1 and list2 returns true.",
                "functionId": "all_of_all",
                "functionLabel": "all_of_all",
                "functionSignature": "boolean((function (boolean)(value1, value2)) predicate, list list1, list list2)",
                "functionDeclaration": "/* All combinations true */\nboolean (\n    (function (boolean)(value1, value2)) predicate,\n    list list1,\n    list list2)",
                "parameters": [
                    {
                        "dataType": "function",
                        "dataTypeParameter": "(boolean)(value1, value2)",
                        "description": "The predicate is passed two parameters, the first is a value from list1 and the second is a value from list2.",
                        "minArgs": -1,
                        "name": "predicate",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "le_string": {
                "afwCamelCaseFunctionLabel": "afwLeString",
                "brief": "Checks for less than or equal",
                "camelCaseFunctionLabel": "leString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 34,
                "deprecated": false,
                "description": "Checks for string arg1 is less than or equal to string arg2 and return the boolean result.",
                "functionId": "le<string>",
                "functionLabel": "le_string",
                "functionSignature": "boolean(string arg1, any arg2)",
                "functionDeclaration": "/* Checks for less than or equal */\nboolean (\n    string arg1,\n    any arg2)",
                "op": "<=",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "gt_dateTime": {
                "afwCamelCaseFunctionLabel": "afwGtDateTime",
                "brief": "Checks for greater than",
                "camelCaseFunctionLabel": "gtDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 33,
                "deprecated": false,
                "description": "Checks for dateTime arg1 is greater than dateTime arg2 and return the boolean result.\n\nIf a dateTime value does not include a time-zone value, then the local time-zone value will be assigned.",
                "functionId": "gt<dateTime>",
                "functionLabel": "gt_dateTime",
                "functionSignature": "boolean(dateTime arg1, dateTime arg2)",
                "functionDeclaration": "/* Checks for greater than */\nboolean (\n    dateTime arg1,\n    dateTime arg2)",
                "op": ">",
                "parameters": [
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "set_equals_dayTimeDuration_1_0": {
                "afwCamelCaseFunctionLabel": "afwSetEqualsDayTimeDuration10",
                "brief": "Checks whether two lists are subsets of each other",
                "camelCaseFunctionLabel": "setEqualsDayTimeDuration10",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Returns boolean true if dayTimeDuration_1_0 list1 and dayTimeDuration_1_0 list2 are subsets of each other and return the boolean result.",
                "functionId": "set_equals<dayTimeDuration_1_0>",
                "functionLabel": "set_equals_dayTimeDuration_1_0",
                "functionSignature": "boolean((list list) list1, (list list) list1)",
                "functionDeclaration": "/* Checks whether two lists are subsets of each other */\nboolean (\n    (list list) list1,\n    (list list) list1)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "compile": {
                "afwCamelCaseFunctionLabel": "afwCompile",
                "brief": "Compile <Type> value",
                "camelCaseFunctionLabel": "compile",
                "category": "polymorphic",
                "dataTypeMethodNumber": 51,
                "deprecated": false,
                "description": "Compile <Type> value and return either an unevaluated adaptive value or a string containing the compiler listing.",
                "functionId": "compile",
                "functionLabel": "compile",
                "functionSignature": "<Type> unevaluated(Type source, any listing?)",
                "functionDeclaration": "/* Compile <Type> value */\n<Type> unevaluated (\n    Type source  /* Source to compile */,\n    any listing? /* Listing option */)",
                "parameters": [
                    {
                        "brief": "Source to compile",
                        "description": "<Type> string to compile",
                        "minArgs": -1,
                        "name": "source",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "brief": "Listing option",
                        "description": "If specified, a compiler listing is produced instead of an unevaluated expression value.\n\nThis parameter can be an integer between 0 and 10 of a string that is used for indentation.  If 0 is specified, no whitespace is added to the resulting string.  If 1 through 10 is specified, that number of spaces is used.",
                        "minArgs": -1,
                        "name": "listing",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "script",
                    "template",
                    "xpathExpression"
                ],
                "pure": true,
                "returns": {
                    "dataType": "unevaluated",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_x500Name": {
                "afwCamelCaseFunctionLabel": "afwIsX500Name",
                "brief": "Checks whether value is dataType x500Name",
                "camelCaseFunctionLabel": "isX500Name",
                "category": "x500Name",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type x500Name.  Use is_list_of_x500Name() instead to test for a list of x500Name.",
                "functionId": "is<x500Name>",
                "functionLabel": "is_x500Name",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType x500Name */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is x500Name.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "set_equals_rfc822Name": {
                "afwCamelCaseFunctionLabel": "afwSetEqualsRfc822Name",
                "brief": "Checks whether two lists are subsets of each other",
                "camelCaseFunctionLabel": "setEqualsRfc822Name",
                "category": "rfc822Name",
                "dataType": "rfc822Name",
                "dataTypeMethodNumber": 21,
                "deprecated": false,
                "description": "Returns boolean true if rfc822Name list1 and rfc822Name list2 are subsets of each other and return the boolean result.",
                "functionId": "set_equals<rfc822Name>",
                "functionLabel": "set_equals_rfc822Name",
                "functionSignature": "boolean((list rfc822Name) list1, (list rfc822Name) list2)",
                "functionDeclaration": "/* Checks whether two lists are subsets of each other */\nboolean (\n    (list rfc822Name) list1,\n    (list rfc822Name) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "rfc822Name",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "rfc822Name",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eqx_boolean": {
                "afwCamelCaseFunctionLabel": "afwEqxBoolean",
                "brief": "Checks for equal and type",
                "camelCaseFunctionLabel": "eqxBoolean",
                "category": "boolean",
                "dataType": "boolean",
                "dataTypeMethodNumber": 7,
                "deprecated": false,
                "description": "Checks for boolean arg1 is equal to value and type of arg2 and return the boolean result.",
                "functionId": "eqx<boolean>",
                "functionLabel": "eqx_boolean",
                "functionSignature": "boolean(boolean arg1, boolean arg2)",
                "functionDeclaration": "/* Checks for equal and type */\nboolean (\n    boolean arg1,\n    boolean arg2)",
                "op": "===",
                "parameters": [
                    {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_dayTimeDuration": {
                "afwCamelCaseFunctionLabel": "afwIsDayTimeDuration",
                "brief": "Checks whether value is dataType dayTimeDuration",
                "camelCaseFunctionLabel": "isDayTimeDuration",
                "category": "dayTimeDuration",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type dayTimeDuration.  Use is_list_of_dayTimeDuration() instead to test for a list of dayTimeDuration.",
                "functionId": "is<dayTimeDuration>",
                "functionLabel": "is_dayTimeDuration",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType dayTimeDuration */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is dayTimeDuration.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_ia5String": {
                "afwCamelCaseFunctionLabel": "afwIsIa5String",
                "brief": "Checks whether value is dataType ia5String",
                "camelCaseFunctionLabel": "isIa5String",
                "category": "ia5String",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type ia5String.  Use is_list_of_ia5String() instead to test for a list of ia5String.",
                "functionId": "is<ia5String>",
                "functionLabel": "is_ia5String",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType ia5String */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is ia5String.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_list": {
                "afwCamelCaseFunctionLabel": "afwToStringList",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringList",
                "category": "array",
                "dataType": "array",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts list arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<list>",
                "functionLabel": "to_string_list",
                "functionSignature": "string(list arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    list arg)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "A list value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "service_restart": {
                "afwCamelCaseFunctionLabel": "afwServiceRestart",
                "brief": "Restart service",
                "camelCaseFunctionLabel": "serviceRestart",
                "category": "administrative",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Restart a service.",
                "functionId": "service_restart",
                "functionLabel": "service_restart",
                "functionSignature": "(object _AdaptiveService_)(string serviceId)",
                "functionDeclaration": "/* Restart service */\n(object _AdaptiveService_) (\n    string serviceId)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "The serviceId of the service to restart.",
                        "minArgs": -1,
                        "name": "serviceId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveService_",
                    "description": "_AdaptiveService_ object for the service which will contain the current status of the service.  If there is an error, the status property value will be \"error\" and \"statusMessage\" contain an error message.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "at_least_one_member_of_date": {
                "afwCamelCaseFunctionLabel": "afwAtLeastOneMemberOfDate",
                "brief": "Checks for at least one value in common",
                "camelCaseFunctionLabel": "atLeastOneMemberOfDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 1,
                "deprecated": false,
                "description": "Returns boolean true if at least one value in date list1 is in date list2.",
                "functionId": "at_least_one_member_of<date>",
                "functionLabel": "at_least_one_member_of_date",
                "functionSignature": "boolean((list date) list1, (list date) list2)",
                "functionDeclaration": "/* Checks for at least one value in common */\nboolean (\n    (list date) list1,\n    (list date) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "date",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "date",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "object": {
                "afwCamelCaseFunctionLabel": "afwObject",
                "brief": "Convert to data type object",
                "camelCaseFunctionLabel": "object",
                "category": "object",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type object returning object result.",
                "functionId": "object",
                "functionLabel": "object",
                "functionSignature": "object(any arg)",
                "functionDeclaration": "/* Convert to data type object */\nobject (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "object",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "length_string": {
                "afwCamelCaseFunctionLabel": "afwLengthString",
                "brief": "Returns number of codepoints in value",
                "camelCaseFunctionLabel": "lengthString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 12,
                "deprecated": false,
                "description": "This is a polymorphic function where string can be any of the supported data types.  Return the integer number of codepoints in arg.",
                "functionId": "length<string>",
                "functionLabel": "length_string",
                "functionSignature": "integer(string value)",
                "functionDeclaration": "/* Returns number of codepoints in value */\ninteger (\n    string value)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Returns number of code points in single string value.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "union_dayTimeDuration_1_0": {
                "afwCamelCaseFunctionLabel": "afwUnionDayTimeDuration10",
                "brief": "Returns union of two or more dayTimeDuration_1_0 lists",
                "camelCaseFunctionLabel": "unionDayTimeDuration10",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Returns dayTimeDuration_1_0 list contains all of the unique values in two or more dayTimeDuration_1_0 list args.",
                "functionId": "union<dayTimeDuration_1_0>",
                "functionLabel": "union_dayTimeDuration_1_0",
                "functionSignature": "(list dayTimeDuration_1_0)(...(list dayTimeDuration_1_0) lists)",
                "functionDeclaration": "/* Returns union of two or more dayTimeDuration_1_0 lists */\n(list dayTimeDuration_1_0) (\n    ...(list dayTimeDuration_1_0) lists)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dayTimeDuration_1_0",
                        "description": "Two or more lists.",
                        "minArgs": 2,
                        "name": "lists",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "dayTimeDuration_1_0",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_in_hexBinary": {
                "afwCamelCaseFunctionLabel": "afwIsInHexBinary",
                "brief": "Checks whether a value is in a list",
                "camelCaseFunctionLabel": "isInHexBinary",
                "category": "hexBinary",
                "dataType": "hexBinary",
                "dataTypeMethodNumber": 10,
                "deprecated": false,
                "description": "Checks whether hexBinary value is in list of hexBinary list and returns the boolean result.",
                "functionId": "is_in<hexBinary>",
                "functionLabel": "is_in_hexBinary",
                "functionSignature": "boolean(hexBinary value, (list hexBinary) list)",
                "functionDeclaration": "/* Checks whether a value is in a list */\nboolean (\n    hexBinary value,\n    (list hexBinary) list)",
                "parameters": [
                    {
                        "dataType": "hexBinary",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "hexBinary",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "max_string": {
                "afwCamelCaseFunctionLabel": "afwMaxString",
                "brief": "Maximum value",
                "camelCaseFunctionLabel": "maxString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 36,
                "deprecated": false,
                "description": "Return the string arg that is greater than or equal to the others.",
                "functionId": "max<string>",
                "functionLabel": "max_string",
                "functionSignature": "string(...string args)",
                "functionDeclaration": "/* Maximum value */\nstring (\n    ...string args)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": 1,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "stringify": {
                "afwCamelCaseFunctionLabel": "afwStringify",
                "brief": "Evaluate and decompile a value",
                "camelCaseFunctionLabel": "stringify",
                "category": "compiler",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Evaluate and decompile an adaptive value to string.  For most values this has the effect of producing a string containing json.",
                "functionId": "stringify",
                "functionLabel": "stringify",
                "functionSignature": "string(any value, any replacer?, boolean whitespace?)",
                "functionDeclaration": "/* Evaluate and decompile a value */\nstring (\n    any value,\n    any replacer?,\n    boolean whitespace?)",
                "parameters": [
                    {
                        "description": "Value to stringify.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "Optional replacer function.",
                        "minArgs": -1,
                        "name": "replacer",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "boolean",
                        "description": "Add whitespace for readability if present and not 0.  This parameter can be an integer between 0 and 10 or a string that is used for indentation.  If 0 is specified, no whitespace is added to the resulting string.  If 1 through 10 is specified, that number of spaces is used.",
                        "minArgs": -1,
                        "name": "whitespace",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "Evaluated and decompiled value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "intersection_hexBinary": {
                "afwCamelCaseFunctionLabel": "afwIntersectionHexBinary",
                "brief": "Returns intersection of two lists",
                "camelCaseFunctionLabel": "intersectionHexBinary",
                "category": "hexBinary",
                "dataType": "hexBinary",
                "dataTypeMethodNumber": 9,
                "deprecated": false,
                "description": "Returns a list of hexBinary with the values that are common to both list of hexBinary list1 and list2.",
                "functionId": "intersection<hexBinary>",
                "functionLabel": "intersection_hexBinary",
                "functionSignature": "(list hexBinary)((list hexBinary) list1, (list hexBinary) list2)",
                "functionDeclaration": "/* Returns intersection of two lists */\n(list hexBinary) (\n    (list hexBinary) list1,\n    (list hexBinary) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "hexBinary",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "hexBinary",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "hexBinary",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subtract_yearMonthDuration": {
                "afwCamelCaseFunctionLabel": "afwSubtractYearMonthDuration",
                "brief": "Subtract numbers",
                "camelCaseFunctionLabel": "subtractYearMonthDuration",
                "category": "polymorphic",
                "dataTypeMethodNumber": 39,
                "deprecated": false,
                "description": "Subtract yearMonthDuration arg2 from <Type> arg1 and return the <Type> result.",
                "functionId": "subtract_yearMonthDuration",
                "functionLabel": "subtract_yearMonthDuration",
                "functionSignature": "<Type> Type(Type arg1, yearMonthDuration arg2)",
                "functionDeclaration": "/* Subtract numbers */\n<Type> Type (\n    Type arg1,\n    yearMonthDuration arg2)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "yearMonthDuration",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "date",
                    "dateTime"
                ],
                "pure": true,
                "returns": {
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "at_least_one_member_of_x500Name": {
                "afwCamelCaseFunctionLabel": "afwAtLeastOneMemberOfX500Name",
                "brief": "Checks for at least one value in common",
                "camelCaseFunctionLabel": "atLeastOneMemberOfX500Name",
                "category": "x500Name",
                "dataType": "x500Name",
                "dataTypeMethodNumber": 1,
                "deprecated": false,
                "description": "Returns boolean true if at least one value in x500Name list1 is in x500Name list2.",
                "functionId": "at_least_one_member_of<x500Name>",
                "functionLabel": "at_least_one_member_of_x500Name",
                "functionSignature": "boolean((list x500Name) list1, (list x500Name) list2)",
                "functionDeclaration": "/* Checks for at least one value in common */\nboolean (\n    (list x500Name) list1,\n    (list x500Name) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "x500Name",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "x500Name",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "random_number": {
                "afwCamelCaseFunctionLabel": "afwRandomNumber",
                "brief": "Generate a random number between specified values",
                "camelCaseFunctionLabel": "randomNumber",
                "category": "random",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This returns a random double between specified values",
                "functionId": "random_number",
                "functionLabel": "random_number",
                "functionSignature": "double(double min?, double max?)",
                "functionDeclaration": "/* Generate a random number between specified values */\ndouble (\n    double min?,\n    double max?)",
                "parameters": [
                    {
                        "dataType": "double",
                        "description": "Minimum double inclusive. The default is 0.0.",
                        "minArgs": -1,
                        "name": "min",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "double",
                        "description": "Maximum double exclusive. The default is 1.0.",
                        "minArgs": -1,
                        "name": "max",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "double",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ge_date": {
                "afwCamelCaseFunctionLabel": "afwGeDate",
                "brief": "Checks for greater than or equal",
                "camelCaseFunctionLabel": "geDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 32,
                "deprecated": false,
                "description": "Checks for date arg1 is greater than or equal to date arg2 and return the boolean result.\n\nIf a date value does not include a time-zone value, then the local time-zone value will be assigned.",
                "functionId": "ge<date>",
                "functionLabel": "ge_date",
                "functionSignature": "boolean(date arg1, date arg2)",
                "functionDeclaration": "/* Checks for greater than or equal */\nboolean (\n    date arg1,\n    date arg2)",
                "op": ">=",
                "parameters": [
                    {
                        "dataType": "date",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "date",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_double_integer": {
                "afwCamelCaseFunctionLabel": "afwToDoubleInteger",
                "brief": "Converts to double",
                "camelCaseFunctionLabel": "toDoubleInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 54,
                "deprecated": false,
                "description": "Converts integer arg to double and returns double result.",
                "functionId": "to_double<integer>",
                "functionLabel": "to_double_integer",
                "functionSignature": "double(integer arg)",
                "functionDeclaration": "/* Converts to double */\ndouble (\n    integer arg)",
                "parameters": [
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "double",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "regexp_string_match": {
                "afwCamelCaseFunctionLabel": "afwRegexpStringMatch",
                "brief": "Deprecated regexp_match.",
                "camelCaseFunctionLabel": "regexpStringMatch",
                "category": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "This is a deprecated version of regexp_match.",
                "functionId": "regexp_string_match",
                "functionLabel": "regexp_string_match",
                "functionSignature": "boolean(string arg1, string arg2)",
                "functionDeclaration": "/* Deprecated regexp_match. */\nboolean (\n    string arg1,\n    string arg2)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_object": {
                "afwCamelCaseFunctionLabel": "afwToStringObject",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringObject",
                "category": "object",
                "dataType": "object",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts object arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<object>",
                "functionLabel": "to_string_object",
                "functionSignature": "string(object arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    object arg)",
                "parameters": [
                    {
                        "dataType": "object",
                        "description": "A object value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "time": {
                "afwCamelCaseFunctionLabel": "afwTime",
                "brief": "Convert to data type time",
                "camelCaseFunctionLabel": "time",
                "category": "time",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type time returning time result.",
                "functionId": "time",
                "functionLabel": "time",
                "functionSignature": "time(any arg)",
                "functionDeclaration": "/* Convert to data type time */\ntime (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "time",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subtract_yearMonthDuration_dateTime": {
                "afwCamelCaseFunctionLabel": "afwSubtractYearMonthDurationDateTime",
                "brief": "Subtract numbers",
                "camelCaseFunctionLabel": "subtractYearMonthDurationDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 39,
                "deprecated": false,
                "description": "Subtract yearMonthDuration arg2 from dateTime arg1 and return the dateTime result.",
                "functionId": "subtract_yearMonthDuration<dateTime>",
                "functionLabel": "subtract_yearMonthDuration_dateTime",
                "functionSignature": "dateTime(dateTime arg1, yearMonthDuration arg2)",
                "functionDeclaration": "/* Subtract numbers */\ndateTime (\n    dateTime arg1,\n    yearMonthDuration arg2)",
                "parameters": [
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "yearMonthDuration",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "dateTime",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "gt_string": {
                "afwCamelCaseFunctionLabel": "afwGtString",
                "brief": "Checks for greater than",
                "camelCaseFunctionLabel": "gtString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 33,
                "deprecated": false,
                "description": "Checks for string arg1 is greater than string arg2 and return the boolean result.",
                "functionId": "gt<string>",
                "functionLabel": "gt_string",
                "functionSignature": "boolean(string arg1, string arg2)",
                "functionDeclaration": "/* Checks for greater than */\nboolean (\n    string arg1,\n    string arg2)",
                "op": ">",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "one_and_only_yearMonthDuration": {
                "afwCamelCaseFunctionLabel": "afwOneAndOnlyYearMonthDuration",
                "brief": "Converts a one value list to a yearMonthDuration value",
                "camelCaseFunctionLabel": "oneAndOnlyYearMonthDuration",
                "category": "yearMonthDuration",
                "dataType": "yearMonthDuration",
                "dataTypeMethodNumber": 15,
                "deprecated": false,
                "description": "This converts a list list  that contains one value to a data type yearMonthDuration value.",
                "functionId": "one_and_only<yearMonthDuration>",
                "functionLabel": "one_and_only_yearMonthDuration",
                "functionSignature": "yearMonthDuration((list list) list)",
                "functionDeclaration": "/* Converts a one value list to a yearMonthDuration value */\nyearMonthDuration (\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "yearMonthDuration",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "xpath_node_count": {
                "afwCamelCaseFunctionLabel": "afwXpathNodeCount",
                "brief": "Number of nodes in node-set",
                "camelCaseFunctionLabel": "xpathNodeCount",
                "category": "xpathExpression",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "The number of nodes in a node-set.",
                "functionId": "xpath_node_count",
                "functionLabel": "xpath_node_count",
                "functionSignature": "integer(xpathExpression nodeset)",
                "functionDeclaration": "/* Number of nodes in node-set */\ninteger (\n    xpathExpression nodeset)",
                "parameters": [
                    {
                        "dataType": "xpathExpression",
                        "minArgs": -1,
                        "name": "nodeset",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_yearMonthDuration": {
                "afwCamelCaseFunctionLabel": "afwToStringYearMonthDuration",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringYearMonthDuration",
                "category": "yearMonthDuration",
                "dataType": "yearMonthDuration",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts yearMonthDuration arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<yearMonthDuration>",
                "functionLabel": "to_string_yearMonthDuration",
                "functionSignature": "string(yearMonthDuration arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    yearMonthDuration arg)",
                "parameters": [
                    {
                        "dataType": "yearMonthDuration",
                        "description": "A yearMonthDuration value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "union_dayTimeDuration": {
                "afwCamelCaseFunctionLabel": "afwUnionDayTimeDuration",
                "brief": "Returns union of two or more string lists",
                "camelCaseFunctionLabel": "unionDayTimeDuration",
                "category": "dayTimeDuration",
                "dataType": "dayTimeDuration",
                "dataTypeMethodNumber": 27,
                "deprecated": false,
                "description": "Returns a list of dayTimeDuration contains all of the unique values in two or more list of dayTimeDuration args.",
                "functionId": "union<dayTimeDuration>",
                "functionLabel": "union_dayTimeDuration",
                "functionSignature": "(list dayTimeDuration)(...(list dayTimeDuration) lists)",
                "functionDeclaration": "/* Returns union of two or more string lists */\n(list dayTimeDuration) (\n    ...(list dayTimeDuration) lists)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dayTimeDuration",
                        "description": "Two or more lists.",
                        "minArgs": 2,
                        "name": "lists",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "dayTimeDuration",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "double": {
                "afwCamelCaseFunctionLabel": "afwDouble",
                "brief": "Convert to data type double",
                "camelCaseFunctionLabel": "double",
                "category": "double",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type double returning double result.",
                "functionId": "double",
                "functionLabel": "double",
                "functionSignature": "double(any arg)",
                "functionDeclaration": "/* Convert to data type double */\ndouble (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "double",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "regexp_match_dnsName": {
                "afwCamelCaseFunctionLabel": "afwRegexpMatchDnsName",
                "brief": "Search for a match using a regular expression",
                "camelCaseFunctionLabel": "regexpMatchDnsName",
                "category": "dnsName",
                "dataType": "dnsName",
                "dataTypeMethodNumber": 17,
                "deprecated": false,
                "description": "Checks whether dnsName value matches the regular expression regexp and return the boolean result.",
                "functionId": "regexp_match<dnsName>",
                "functionLabel": "regexp_match_dnsName",
                "functionSignature": "boolean(dnsName value, string regexp)",
                "functionDeclaration": "/* Search for a match using a regular expression */\nboolean (\n    dnsName value,\n    string regexp)",
                "parameters": [
                    {
                        "dataType": "dnsName",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "regexp",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ceil": {
                "afwCamelCaseFunctionLabel": "afwCeil",
                "brief": "Round upward to nearest integer",
                "camelCaseFunctionLabel": "ceil",
                "category": "polymorphic",
                "dataTypeMethodNumber": 42,
                "deprecated": false,
                "description": "Determine the smallest integer that is greater then or equal to the <Type> arg and return the <Type> result.",
                "functionId": "ceil",
                "functionLabel": "ceil",
                "functionSignature": "<Type> Type(Type arg)",
                "functionDeclaration": "/* Round upward to nearest integer */\n<Type> Type (\n    Type arg)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "double"
                ],
                "pure": true,
                "returns": {
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "rule_ordered_permit_overrides": {
                "afwCamelCaseFunctionLabel": "afwRuleOrderedPermitOverrides",
                "brief": "Rule combining algorithm - permit_overrides",
                "camelCaseFunctionLabel": "ruleOrderedPermitOverrides",
                "category": "rule_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Rule combining algorithm for permit overrides.",
                "functionId": "rule_ordered_permit_overrides",
                "functionLabel": "rule_ordered_permit_overrides",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Rule combining algorithm - permit_overrides */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_date": {
                "afwCamelCaseFunctionLabel": "afwToDate",
                "brief": "Converts string to date",
                "camelCaseFunctionLabel": "toDate",
                "category": "polymorphic",
                "dataTypeMethodNumber": 66,
                "deprecated": false,
                "description": "Converts <Type> arg to date.",
                "functionId": "to_date",
                "functionLabel": "to_date",
                "functionSignature": "<Type> date(Type arg)",
                "functionDeclaration": "/* Converts string to date */\n<Type> date (\n    Type arg)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "date",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_anyURI": {
                "afwCamelCaseFunctionLabel": "afwBagAnyURI",
                "brief": "Makes a list from args",
                "camelCaseFunctionLabel": "bagAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 2,
                "deprecated": false,
                "description": "Takes any number of anyURI args and returns a list of list.",
                "functionId": "bag<anyURI>",
                "functionLabel": "bag_anyURI",
                "functionSignature": "(list anyURI)(...(list anyURI) args)",
                "functionDeclaration": "/* Makes a list from args */\n(list anyURI) (\n    ...(list anyURI) args)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "anyURI",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "anyURI",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "add_entries": {
                "afwCamelCaseFunctionLabel": "afwAddEntries",
                "brief": "Add entries of one or more lists to another",
                "camelCaseFunctionLabel": "addEntries",
                "category": "array",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Add the entries of one or more lists to another.",
                "functionId": "add_entries",
                "functionLabel": "add_entries",
                "functionSignature": "list(list target, ...list source)",
                "functionDeclaration": "/* Add entries of one or more lists to another */\nlist (\n    list target,\n    ...list source)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "Target list.  This list must not be immutable.",
                        "minArgs": -1,
                        "name": "target",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "description": "Source list(s).",
                        "minArgs": 1,
                        "name": "source",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "array",
                    "description": "The modified target list.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0,
                "sideEffects": [
                    "Target list is modified."
                ]
            },
            "set_equals_dateTime": {
                "afwCamelCaseFunctionLabel": "afwSetEqualsDateTime",
                "brief": "Checks whether two lists are subsets of each other",
                "camelCaseFunctionLabel": "setEqualsDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 21,
                "deprecated": false,
                "description": "Returns boolean true if dateTime list1 and dateTime list2 are subsets of each other and return the boolean result.",
                "functionId": "set_equals<dateTime>",
                "functionLabel": "set_equals_dateTime",
                "functionSignature": "boolean((list dateTime) list1, (list dateTime) list2)",
                "functionDeclaration": "/* Checks whether two lists are subsets of each other */\nboolean (\n    (list dateTime) list1,\n    (list dateTime) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dateTime",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dateTime",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "intersection_dateTime": {
                "afwCamelCaseFunctionLabel": "afwIntersectionDateTime",
                "brief": "Returns intersection of two lists",
                "camelCaseFunctionLabel": "intersectionDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 9,
                "deprecated": false,
                "description": "Returns a list of dateTime with the values that are common to both list of dateTime list1 and list2.",
                "functionId": "intersection<dateTime>",
                "functionLabel": "intersection_dateTime",
                "functionSignature": "(list dateTime)((list dateTime) list1, (list dateTime) list2)",
                "functionDeclaration": "/* Returns intersection of two lists */\n(list dateTime) (\n    (list dateTime) list1,\n    (list dateTime) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dateTime",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dateTime",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "dateTime",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "decode_to_string_base64Binary": {
                "afwCamelCaseFunctionLabel": "afwDecodeToStringBase64Binary",
                "brief": "Decode base64Binary to string",
                "camelCaseFunctionLabel": "decodeToStringBase64Binary",
                "category": "base64Binary",
                "dataType": "base64Binary",
                "dataTypeMethodNumber": 29,
                "deprecated": false,
                "description": "Decode base64Binary value to string.  An error is thrown if decoded value is not valid UTF-8.",
                "functionId": "decode_to_string<base64Binary>",
                "functionLabel": "decode_to_string_base64Binary",
                "functionSignature": "string(base64Binary value)",
                "functionDeclaration": "/* Decode base64Binary to string */\nstring (\n    base64Binary value)",
                "parameters": [
                    {
                        "dataType": "base64Binary",
                        "description": "The base64Binary value to decode.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The decoded string.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "gt_integer": {
                "afwCamelCaseFunctionLabel": "afwGtInteger",
                "brief": "Checks for greater than",
                "camelCaseFunctionLabel": "gtInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 33,
                "deprecated": false,
                "description": "Checks for integer arg1 is greater than integer arg2 and return the boolean result.",
                "functionId": "gt<integer>",
                "functionLabel": "gt_integer",
                "functionSignature": "boolean(integer arg1, integer arg2)",
                "functionDeclaration": "/* Checks for greater than */\nboolean (\n    integer arg1,\n    integer arg2)",
                "op": ">",
                "parameters": [
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "do_while": {
                "afwCamelCaseFunctionLabel": "afwDoWhile",
                "brief": "Evaluate a list of values at least once while a condition is true",
                "camelCaseFunctionLabel": "doWhile",
                "category": "script",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This creates a new structured block with a new nested variable scope.\n\nThis function will evaluate a list of values at least once while a condition is true.  See the related functions \"break\", \"continue\", \"return\" and \"throw\".",
                "functionId": "do_while",
                "functionLabel": "do_while",
                "functionSignature": "any(boolean condition, list body)",
                "functionDeclaration": "/* Evaluate a list of values at least once while a condition is true */\nany (\n    boolean condition,\n    list body)",
                "parameters": [
                    {
                        "dataType": "boolean",
                        "description": "While this condition is true, the loop will continue.  This is evaluated in the loop's scope.",
                        "minArgs": -1,
                        "name": "condition",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "description": "This is a list of values that are evaluated for each iteration of the loop.  Each value in body is evaluated in order until the end of the list or until a \"break\", \"continue\", \"return\" or \"throw\" function is encountered.",
                        "minArgs": -1,
                        "name": "body",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "description": "The last value evaluated in body or null if the body is empty.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 5
            },
            "to_dayTimeDuration_string": {
                "afwCamelCaseFunctionLabel": "afwToDayTimeDurationString",
                "brief": "Converts string to dayTimeDuration",
                "camelCaseFunctionLabel": "toDayTimeDurationString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 68,
                "deprecated": false,
                "description": "Converts string arg to dayTimeDuration.",
                "functionId": "to_dayTimeDuration<string>",
                "functionLabel": "to_dayTimeDuration_string",
                "functionSignature": "dayTimeDuration(string arg)",
                "functionDeclaration": "/* Converts string to dayTimeDuration */\ndayTimeDuration (\n    string arg)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "dayTimeDuration",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "rule_first_applicable": {
                "afwCamelCaseFunctionLabel": "afwRuleFirstApplicable",
                "brief": "Rule combining algorithm - first_applicable",
                "camelCaseFunctionLabel": "ruleFirstApplicable",
                "category": "rule_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Rule combining algorithm for first applicable.",
                "functionId": "rule_first_applicable",
                "functionLabel": "rule_first_applicable",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Rule combining algorithm - first_applicable */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "split": {
                "afwCamelCaseFunctionLabel": "afwSplit",
                "brief": "Split at a separator",
                "camelCaseFunctionLabel": "split",
                "category": "polymorphic",
                "dataTypeMethodNumber": 22,
                "deprecated": false,
                "description": "Split <Type> value into an list of strings using a separator.",
                "functionId": "split",
                "functionLabel": "split",
                "functionSignature": "<Type> list(Type value, string separator?, integer limit?)",
                "functionDeclaration": "/* Split at a separator */\n<Type> list (\n    Type value,\n    string separator?,\n    integer limit?)",
                "parameters": [
                    {
                        "description": "The <Type> value to split.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "The separator to use.  If this is an empty string or separator is not specified, the value is split between characters.",
                        "minArgs": -1,
                        "name": "separator",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "This is the maximum number of splits.  Any remaining part of value is ignored.",
                        "minArgs": -1,
                        "name": "limit",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "description": "An list of strings.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "intersection_rfc822Name": {
                "afwCamelCaseFunctionLabel": "afwIntersectionRfc822Name",
                "brief": "Returns intersection of two lists",
                "camelCaseFunctionLabel": "intersectionRfc822Name",
                "category": "rfc822Name",
                "dataType": "rfc822Name",
                "dataTypeMethodNumber": 9,
                "deprecated": false,
                "description": "Returns a list of rfc822Name with the values that are common to both list of rfc822Name list1 and list2.",
                "functionId": "intersection<rfc822Name>",
                "functionLabel": "intersection_rfc822Name",
                "functionSignature": "(list rfc822Name)((list rfc822Name) list1, (list rfc822Name) list2)",
                "functionDeclaration": "/* Returns intersection of two lists */\n(list rfc822Name) (\n    (list rfc822Name) list1,\n    (list rfc822Name) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "rfc822Name",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "rfc822Name",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "rfc822Name",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_object": {
                "afwCamelCaseFunctionLabel": "afwIsObject",
                "brief": "Checks whether value is dataType object",
                "camelCaseFunctionLabel": "isObject",
                "category": "object",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type object.  Use is_list_of_object() instead to test for a list of object.",
                "functionId": "is<object>",
                "functionLabel": "is_object",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType object */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is object.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "union_hexBinary": {
                "afwCamelCaseFunctionLabel": "afwUnionHexBinary",
                "brief": "Returns union of two or more string lists",
                "camelCaseFunctionLabel": "unionHexBinary",
                "category": "hexBinary",
                "dataType": "hexBinary",
                "dataTypeMethodNumber": 27,
                "deprecated": false,
                "description": "Returns a list of hexBinary contains all of the unique values in two or more list of hexBinary args.",
                "functionId": "union<hexBinary>",
                "functionLabel": "union_hexBinary",
                "functionSignature": "(list hexBinary)(...(list hexBinary) lists)",
                "functionDeclaration": "/* Returns union of two or more string lists */\n(list hexBinary) (\n    ...(list hexBinary) lists)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "hexBinary",
                        "description": "Two or more lists.",
                        "minArgs": 2,
                        "name": "lists",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "hexBinary",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "replace_anyURI": {
                "afwCamelCaseFunctionLabel": "afwReplaceAnyURI",
                "brief": "Replace strings",
                "camelCaseFunctionLabel": "replaceAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 20,
                "deprecated": false,
                "description": "Replace string(s) in a anyURI value.",
                "functionId": "replace<anyURI>",
                "functionLabel": "replace_anyURI",
                "functionSignature": "anyURI(anyURI value, string match, string replacement, integer limit?)",
                "functionDeclaration": "/* Replace strings */\nanyURI (\n    anyURI value,\n    string match,\n    string replacement,\n    integer limit?)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "description": "The original anyURI value.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "The string to replace.",
                        "minArgs": -1,
                        "name": "match",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "The replacement string.",
                        "minArgs": -1,
                        "name": "replacement",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "This is the maximum times to replace.  The default is 1.  Specify -1 to replace all occurrences.",
                        "minArgs": -1,
                        "name": "limit",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "anyURI",
                    "description": "A anyURI value with the matched string(s) replaced.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "set_equals_date": {
                "afwCamelCaseFunctionLabel": "afwSetEqualsDate",
                "brief": "Checks whether two lists are subsets of each other",
                "camelCaseFunctionLabel": "setEqualsDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 21,
                "deprecated": false,
                "description": "Returns boolean true if date list1 and date list2 are subsets of each other and return the boolean result.",
                "functionId": "set_equals<date>",
                "functionLabel": "set_equals_date",
                "functionSignature": "boolean((list date) list1, (list date) list2)",
                "functionDeclaration": "/* Checks whether two lists are subsets of each other */\nboolean (\n    (list date) list1,\n    (list date) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "date",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "date",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_double": {
                "afwCamelCaseFunctionLabel": "afwToStringDouble",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts double arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<double>",
                "functionLabel": "to_string_double",
                "functionSignature": "string(double arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    double arg)",
                "parameters": [
                    {
                        "dataType": "double",
                        "description": "A double value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "nex_base64Binary": {
                "afwCamelCaseFunctionLabel": "afwNexBase64Binary",
                "brief": "Checks for not equal value or type",
                "camelCaseFunctionLabel": "nexBase64Binary",
                "category": "base64Binary",
                "dataType": "base64Binary",
                "dataTypeMethodNumber": 14,
                "deprecated": false,
                "description": "Checks for base64Binary arg1 not equal to value or data type of arg2 and return the boolean result.",
                "functionId": "nex<base64Binary>",
                "functionLabel": "nex_base64Binary",
                "functionSignature": "boolean(base64Binary arg1, base64Binary arg2)",
                "functionDeclaration": "/* Checks for not equal value or type */\nboolean (\n    base64Binary arg1,\n    base64Binary arg2)",
                "op": "!==",
                "parameters": [
                    {
                        "dataType": "base64Binary",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "base64Binary",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "all_of_any": {
                "afwCamelCaseFunctionLabel": "afwAllOfAny",
                "brief": "Combinations of all in list1 and any in list2 true",
                "camelCaseFunctionLabel": "allOfAny",
                "category": "higher_order_array",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This function returns true if the result of calling predicate with all of the combination of values from list1 and any of the values of list2 returns true.",
                "functionId": "all_of_any",
                "functionLabel": "all_of_any",
                "functionSignature": "boolean((function (boolean)(value1, value2)) predicate, list list1, list list2)",
                "functionDeclaration": "/* Combinations of all in list1 and any in list2 true */\nboolean (\n    (function (boolean)(value1, value2)) predicate,\n    list list1,\n    list list2)",
                "parameters": [
                    {
                        "dataType": "function",
                        "dataTypeParameter": "(boolean)(value1, value2)",
                        "description": "The predicate is passed two parameters, the first is a value from list1 and the second is a value from list2.",
                        "minArgs": -1,
                        "name": "predicate",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_dateTime": {
                "afwCamelCaseFunctionLabel": "afwBagDateTime",
                "brief": "Makes a list from args",
                "camelCaseFunctionLabel": "bagDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 2,
                "deprecated": false,
                "description": "Takes any number of dateTime args and returns a list of list.",
                "functionId": "bag<dateTime>",
                "functionLabel": "bag_dateTime",
                "functionSignature": "(list dateTime)(...(list dateTime) args)",
                "functionDeclaration": "/* Makes a list from args */\n(list dateTime) (\n    ...(list dateTime) args)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dateTime",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "dateTime",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "url_encode_anyURI": {
                "afwCamelCaseFunctionLabel": "afwUrlEncodeAnyURI",
                "brief": "URI encode",
                "camelCaseFunctionLabel": "urlEncodeAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 28,
                "deprecated": false,
                "description": "URL encode a value or bag of values.",
                "functionId": "url_encode<anyURI>",
                "functionLabel": "url_encode_anyURI",
                "functionSignature": "string(anyURI unencoded)",
                "functionDeclaration": "/* URI encode */\nstring (\n    anyURI unencoded)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "description": "URL encode a single value.  See the url_encode method for the data type of more details.",
                        "minArgs": -1,
                        "name": "unencoded",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "URI encoded string.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "repeat_anyURI": {
                "afwCamelCaseFunctionLabel": "afwRepeatAnyURI",
                "brief": "Returns a repeated value",
                "camelCaseFunctionLabel": "repeatAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 19,
                "deprecated": false,
                "description": "Repeat a anyURI value a specified number of times.",
                "functionId": "repeat<anyURI>",
                "functionLabel": "repeat_anyURI",
                "functionSignature": "anyURI(anyURI value, integer times)",
                "functionDeclaration": "/* Returns a repeated value */\nanyURI (\n    anyURI value,\n    integer times)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "description": "The anyURI value to repeat.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "The number of times to repeat the value.",
                        "minArgs": -1,
                        "name": "times",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "anyURI",
                    "description": "The repeated anyURI value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_anyURI": {
                "afwCamelCaseFunctionLabel": "afwToAnyURI",
                "brief": "Converts string to anyURI",
                "camelCaseFunctionLabel": "toAnyURI",
                "category": "polymorphic",
                "dataTypeMethodNumber": 64,
                "deprecated": false,
                "description": "Converts <Type> arg to anyURI.",
                "functionId": "to_anyURI",
                "functionLabel": "to_anyURI",
                "functionSignature": "<Type> anyURI(Type arg)",
                "functionDeclaration": "/* Converts string to anyURI */\n<Type> anyURI (\n    Type arg)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "anyURI",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "lt_double": {
                "afwCamelCaseFunctionLabel": "afwLtDouble",
                "brief": "Checks for less than",
                "camelCaseFunctionLabel": "ltDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 35,
                "deprecated": false,
                "description": "Checks for double arg1 is less that double arg2 and return the boolean result.",
                "functionId": "lt<double>",
                "functionLabel": "lt_double",
                "functionSignature": "boolean(double arg1, double arg2)",
                "functionDeclaration": "/* Checks for less than */\nboolean (\n    double arg1,\n    double arg2)",
                "op": "<",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_size_anyURI": {
                "afwCamelCaseFunctionLabel": "afwBagSizeAnyURI",
                "brief": "Returns the number of values in a bag",
                "camelCaseFunctionLabel": "bagSizeAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 3,
                "deprecated": false,
                "description": "This returns the integer number of values in list bag arg.",
                "functionId": "bag_size<anyURI>",
                "functionLabel": "bag_size_anyURI",
                "functionSignature": "integer((list anyURI) arg)",
                "functionDeclaration": "/* Returns the number of values in a bag */\ninteger (\n    (list anyURI) arg)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "anyURI",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "map": {
                "afwCamelCaseFunctionLabel": "afwMap",
                "brief": "Maps values of a list",
                "camelCaseFunctionLabel": "map",
                "category": "higher_order_array",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This function creates a list of the results of calling functor with each value of the first list in args",
                "functionId": "map",
                "functionLabel": "map",
                "functionSignature": "list((function ()(...)) functor, list list)",
                "functionDeclaration": "/* Maps values of a list */\nlist (\n    (function ()(...)) functor,\n    list list)",
                "parameters": [
                    {
                        "dataType": "function",
                        "dataTypeParameter": "()(...)",
                        "minArgs": -1,
                        "name": "functor",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "description": "These are the parameters passed to functor with the exception that the first list is passed one value at a time.  At least one list is required.",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "boolean": {
                "afwCamelCaseFunctionLabel": "afwBoolean",
                "brief": "Convert to data type boolean",
                "camelCaseFunctionLabel": "boolean",
                "category": "boolean",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type boolean returning boolean result.",
                "functionId": "boolean",
                "functionLabel": "boolean",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Convert to data type boolean */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_boolean": {
                "afwCamelCaseFunctionLabel": "afwToBoolean",
                "brief": "Converts string to boolean",
                "camelCaseFunctionLabel": "toBoolean",
                "category": "polymorphic",
                "dataTypeMethodNumber": 65,
                "deprecated": false,
                "description": "Converts <Type> arg to boolean.",
                "functionId": "to_boolean",
                "functionLabel": "to_boolean",
                "functionSignature": "<Type> boolean(Type arg)",
                "functionDeclaration": "/* Converts string to boolean */\n<Type> boolean (\n    Type arg)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "nex_double": {
                "afwCamelCaseFunctionLabel": "afwNexDouble",
                "brief": "Checks for not equal value or type",
                "camelCaseFunctionLabel": "nexDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 14,
                "deprecated": false,
                "description": "Checks for double arg1 not equal to value or data type of arg2 and return the boolean result.",
                "functionId": "nex<double>",
                "functionLabel": "nex_double",
                "functionSignature": "boolean(double arg1, double arg2)",
                "functionDeclaration": "/* Checks for not equal value or type */\nboolean (\n    double arg1,\n    double arg2)",
                "op": "!==",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "max": {
                "afwCamelCaseFunctionLabel": "afwMax",
                "brief": "Maximum value",
                "camelCaseFunctionLabel": "max",
                "category": "polymorphic",
                "dataTypeMethodNumber": 36,
                "deprecated": false,
                "description": "Return the <Type> arg that is greater than or equal to the others.",
                "functionId": "max",
                "functionLabel": "max",
                "functionSignature": "<Type> Type(...Type args)",
                "functionDeclaration": "/* Maximum value */\n<Type> Type (\n    ...Type args)",
                "parameters": [
                    {
                        "minArgs": 1,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "date",
                    "dateTime",
                    "double",
                    "integer",
                    "string",
                    "time"
                ],
                "pure": true,
                "returns": {
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "dnsName": {
                "afwCamelCaseFunctionLabel": "afwDnsName",
                "brief": "Convert to data type dnsName",
                "camelCaseFunctionLabel": "dnsName",
                "category": "dnsName",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type dnsName returning dnsName result.",
                "functionId": "dnsName",
                "functionLabel": "dnsName",
                "functionSignature": "dnsName(any arg)",
                "functionDeclaration": "/* Convert to data type dnsName */\ndnsName (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "dnsName",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "for": {
                "afwCamelCaseFunctionLabel": "afwFor",
                "brief": "Evaluate a list of values while a condition is true with a list of initial and increment values",
                "camelCaseFunctionLabel": "for",
                "category": "script",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This creates a new structured block with a new nested variable scope.\n\nThis function loops while condition is true.  If the condition is false for the first iteration, the loop returns a null value.",
                "functionId": "for",
                "functionLabel": "for",
                "functionSignature": "any(list initial?, boolean condition?, list increment?, list body?)",
                "functionDeclaration": "/* Evaluate a list of values while a condition is true with a list of initial and increment values */\nany (\n    list initial?,\n    boolean condition?,\n    list increment?,\n    list body?)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "This is a list of values to evaluate before the loop starts. The values will normally be a call to the \"assign\" function.",
                        "minArgs": -1,
                        "name": "initial",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "boolean",
                        "description": "While this condition is true, the loop will continue.",
                        "minArgs": -1,
                        "name": "condition",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "description": "This is a list of values to evaluate after each iteration of the loop.  The values will normally be a call to the \"assign\" function.",
                        "minArgs": -1,
                        "name": "increment",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "description": "This is a list of values that are evaluated for each iteration of the loop.  Each value in body is evaluated in order until the end of the list or until a \"break\", \"continue\", \"return\" or \"throw\" function is encountered.",
                        "minArgs": -1,
                        "name": "body",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "description": "The last value evaluated in body or null if condition evaluates to false the first time.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 6
            },
            "to_dnsName": {
                "afwCamelCaseFunctionLabel": "afwToDnsName",
                "brief": "Converts string to dnsName",
                "camelCaseFunctionLabel": "toDnsName",
                "category": "polymorphic",
                "dataTypeMethodNumber": 69,
                "deprecated": false,
                "description": "Converts <Type> arg to dnsName.",
                "functionId": "to_dnsName",
                "functionLabel": "to_dnsName",
                "functionSignature": "<Type> dnsName(Type arg)",
                "functionDeclaration": "/* Converts string to dnsName */\n<Type> dnsName (\n    Type arg)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "dnsName",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "evaluate_script": {
                "afwCamelCaseFunctionLabel": "afwEvaluateScript",
                "brief": "Evaluate script value",
                "camelCaseFunctionLabel": "evaluateScript",
                "category": "script",
                "dataType": "script",
                "dataTypeMethodNumber": 52,
                "deprecated": false,
                "description": "Compile and evaluate script value.",
                "functionId": "evaluate<script>",
                "functionLabel": "evaluate_script",
                "functionSignature": "unevaluated(script source, (object _AdaptiveTemplatePropertiesObjects_) additionalContext?)",
                "functionDeclaration": "/* Evaluate script value */\nunevaluated (\n    script source                                                 /* Source to evaluate */,\n    (object _AdaptiveTemplatePropertiesObjects_) additionalContext? /* Additional context */)",
                "parameters": [
                    {
                        "brief": "Source to evaluate",
                        "dataType": "script",
                        "description": "script string to compile and evaluate",
                        "minArgs": -1,
                        "name": "source",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "brief": "Additional context",
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveTemplatePropertiesObjects_",
                        "description": "Additional context to use first during evaluation.",
                        "minArgs": -1,
                        "name": "additionalContext",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "unevaluated",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_size_hexBinary": {
                "afwCamelCaseFunctionLabel": "afwBagSizeHexBinary",
                "brief": "Returns the number of values in a bag",
                "camelCaseFunctionLabel": "bagSizeHexBinary",
                "category": "hexBinary",
                "dataType": "hexBinary",
                "dataTypeMethodNumber": 3,
                "deprecated": false,
                "description": "This returns the integer number of values in list bag arg.",
                "functionId": "bag_size<hexBinary>",
                "functionLabel": "bag_size_hexBinary",
                "functionSignature": "integer((list hexBinary) arg)",
                "functionDeclaration": "/* Returns the number of values in a bag */\ninteger (\n    (list hexBinary) arg)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "hexBinary",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "random_integer": {
                "afwCamelCaseFunctionLabel": "afwRandomInteger",
                "brief": "Generate a random integer between specified values",
                "camelCaseFunctionLabel": "randomInteger",
                "category": "random",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This returns a random integer between specified values inclusive.",
                "functionId": "random_integer",
                "functionLabel": "random_integer",
                "functionSignature": "integer(integer min, integer max)",
                "functionDeclaration": "/* Generate a random integer between specified values */\ninteger (\n    integer min,\n    integer max)",
                "parameters": [
                    {
                        "dataType": "integer",
                        "description": "Minimum integer inclusive.",
                        "minArgs": -1,
                        "name": "min",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "Maximum integer inclusive.",
                        "minArgs": -1,
                        "name": "max",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "integer",
                    "description": "A random integer.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eqx": {
                "afwCamelCaseFunctionLabel": "afwEqx",
                "brief": "Checks for equal and type",
                "camelCaseFunctionLabel": "eqx",
                "category": "polymorphic",
                "dataTypeMethodNumber": 7,
                "deprecated": false,
                "description": "Checks for <Type> arg1 is equal to value and type of arg2 and return the boolean result.",
                "functionId": "eqx",
                "functionLabel": "eqx",
                "functionSignature": "<Type> boolean(Type arg1, Type arg2)",
                "functionDeclaration": "/* Checks for equal and type */\n<Type> boolean (\n    Type arg1,\n    Type arg2)",
                "op": "===",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "base64Binary",
                    "boolean",
                    "date",
                    "dateTime",
                    "dayTimeDuration",
                    "double",
                    "hexBinary",
                    "integer",
                    "rfc822Name",
                    "string",
                    "time",
                    "x500Name",
                    "yearMonthDuration"
                ],
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "union_base64Binary": {
                "afwCamelCaseFunctionLabel": "afwUnionBase64Binary",
                "brief": "Returns union of two or more string lists",
                "camelCaseFunctionLabel": "unionBase64Binary",
                "category": "base64Binary",
                "dataType": "base64Binary",
                "dataTypeMethodNumber": 27,
                "deprecated": false,
                "description": "Returns a list of base64Binary contains all of the unique values in two or more list of base64Binary args.",
                "functionId": "union<base64Binary>",
                "functionLabel": "union_base64Binary",
                "functionSignature": "(list base64Binary)(...(list base64Binary) lists)",
                "functionDeclaration": "/* Returns union of two or more string lists */\n(list base64Binary) (\n    ...(list base64Binary) lists)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "base64Binary",
                        "description": "Two or more lists.",
                        "minArgs": 2,
                        "name": "lists",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "base64Binary",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "one_and_only_boolean": {
                "afwCamelCaseFunctionLabel": "afwOneAndOnlyBoolean",
                "brief": "Converts a one value list to a boolean value",
                "camelCaseFunctionLabel": "oneAndOnlyBoolean",
                "category": "boolean",
                "dataType": "boolean",
                "dataTypeMethodNumber": 15,
                "deprecated": false,
                "description": "This converts a list list  that contains one value to a data type boolean value.",
                "functionId": "one_and_only<boolean>",
                "functionLabel": "one_and_only_boolean",
                "functionSignature": "boolean((list list) list)",
                "functionDeclaration": "/* Converts a one value list to a boolean value */\nboolean (\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "regexp_index_of": {
                "afwCamelCaseFunctionLabel": "afwRegexpIndexOf",
                "brief": "Returns index of first match of regular expression",
                "camelCaseFunctionLabel": "regexpIndexOf",
                "category": "polymorphic",
                "dataTypeMethodNumber": 16,
                "deprecated": false,
                "description": "Search <Type> value for a regular expression and return index.  If not found, -1 is returned.",
                "functionId": "regexp_index_of",
                "functionLabel": "regexp_index_of",
                "functionSignature": "<Type> integer(Type value, string regexp)",
                "functionDeclaration": "/* Returns index of first match of regular expression */\n<Type> integer (\n    Type value,\n    string regexp)",
                "parameters": [
                    {
                        "description": "The <Type> value to search.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "A regular expression to use for search.",
                        "minArgs": -1,
                        "name": "regexp",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "description": "Zero-based index of subString or -1 if not found.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "normalize_to_lower_case": {
                "afwCamelCaseFunctionLabel": "afwNormalizeToLowerCase",
                "brief": "Converts to lower case",
                "camelCaseFunctionLabel": "normalizeToLowerCase",
                "category": "polymorphic",
                "dataTypeMethodNumber": 63,
                "deprecated": false,
                "description": "Normalize <Type> arg to lower case and returns <Type> result.",
                "functionId": "normalize_to_lower_case",
                "functionLabel": "normalize_to_lower_case",
                "functionSignature": "<Type> Type(Type arg)",
                "functionDeclaration": "/* Converts to lower case */\n<Type> Type (\n    Type arg)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "string"
                ],
                "pure": true,
                "returns": {
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "print_objects": {
                "afwCamelCaseFunctionLabel": "afwPrintObjects",
                "brief": "Print adaptive objects",
                "camelCaseFunctionLabel": "printObjects",
                "category": "adaptor",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Print adaptive objects as their to_string() value.  Each object will be preceded with a line containing the decimal length of the object's string.",
                "functionId": "print_objects",
                "functionLabel": "print_objects",
                "functionSignature": "string(string adaptorId, string objectType, (object _AdaptiveQueryCriteria_) queryCriteria?, (object _AdaptiveObjectOptions_) options?)",
                "functionDeclaration": "/* Print adaptive objects */\nstring (\n    string adaptorId,\n    string objectType,\n    (object _AdaptiveQueryCriteria_) queryCriteria?,\n    (object _AdaptiveObjectOptions_) options?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Id of adaptor containing objects to print.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Id of adaptive object type of objects to print.",
                        "minArgs": -1,
                        "name": "objectType",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveQueryCriteria_",
                        "description": "This is the query criteria for objects to be printed. If not specified, all objects will be printed.",
                        "minArgs": -1,
                        "name": "queryCriteria",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveObjectOptions_",
                        "description": "Object view options.  See /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more information.",
                        "minArgs": -1,
                        "name": "options",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "string",
                    "description": "Empty string.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_double": {
                "afwCamelCaseFunctionLabel": "afwIsDouble",
                "brief": "Checks whether value is dataType double",
                "camelCaseFunctionLabel": "isDouble",
                "category": "double",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type double.  Use is_list_of_double() instead to test for a list of double.",
                "functionId": "is<double>",
                "functionLabel": "is_double",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType double */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is double.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eqx_base64Binary": {
                "afwCamelCaseFunctionLabel": "afwEqxBase64Binary",
                "brief": "Checks for equal and type",
                "camelCaseFunctionLabel": "eqxBase64Binary",
                "category": "base64Binary",
                "dataType": "base64Binary",
                "dataTypeMethodNumber": 7,
                "deprecated": false,
                "description": "Checks for base64Binary arg1 is equal to value and type of arg2 and return the boolean result.",
                "functionId": "eqx<base64Binary>",
                "functionLabel": "eqx_base64Binary",
                "functionSignature": "boolean(base64Binary arg1, base64Binary arg2)",
                "functionDeclaration": "/* Checks for equal and type */\nboolean (\n    base64Binary arg1,\n    base64Binary arg2)",
                "op": "===",
                "parameters": [
                    {
                        "dataType": "base64Binary",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "base64Binary",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "at_least_one_member_of_boolean": {
                "afwCamelCaseFunctionLabel": "afwAtLeastOneMemberOfBoolean",
                "brief": "Checks for at least one value in common",
                "camelCaseFunctionLabel": "atLeastOneMemberOfBoolean",
                "category": "boolean",
                "dataType": "boolean",
                "dataTypeMethodNumber": 1,
                "deprecated": false,
                "description": "Returns boolean true if at least one value in boolean list1 is in boolean list2.",
                "functionId": "at_least_one_member_of<boolean>",
                "functionLabel": "at_least_one_member_of_boolean",
                "functionSignature": "boolean((list boolean) list1, (list boolean) list2)",
                "functionDeclaration": "/* Checks for at least one value in common */\nboolean (\n    (list boolean) list1,\n    (list boolean) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "boolean",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "boolean",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_yearMonthDuration": {
                "afwCamelCaseFunctionLabel": "afwIsYearMonthDuration",
                "brief": "Checks whether value is dataType yearMonthDuration",
                "camelCaseFunctionLabel": "isYearMonthDuration",
                "category": "yearMonthDuration",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type yearMonthDuration.  Use is_list_of_yearMonthDuration() instead to test for a list of yearMonthDuration.",
                "functionId": "is<yearMonthDuration>",
                "functionLabel": "is_yearMonthDuration",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType yearMonthDuration */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is yearMonthDuration.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "one_and_only_dnsName": {
                "afwCamelCaseFunctionLabel": "afwOneAndOnlyDnsName",
                "brief": "Converts a one value list to a dnsName value",
                "camelCaseFunctionLabel": "oneAndOnlyDnsName",
                "category": "dnsName",
                "dataType": "dnsName",
                "dataTypeMethodNumber": 15,
                "deprecated": false,
                "description": "This converts a list list  that contains one value to a data type dnsName value.",
                "functionId": "one_and_only<dnsName>",
                "functionLabel": "one_and_only_dnsName",
                "functionSignature": "dnsName((list list) list)",
                "functionDeclaration": "/* Converts a one value list to a dnsName value */\ndnsName (\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "dnsName",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_objectId": {
                "afwCamelCaseFunctionLabel": "afwToStringObjectId",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringObjectId",
                "category": "objectId",
                "dataType": "objectId",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts objectId arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<objectId>",
                "functionLabel": "to_string_objectId",
                "functionSignature": "string(objectId arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    objectId arg)",
                "parameters": [
                    {
                        "dataType": "objectId",
                        "description": "A objectId value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_size_boolean": {
                "afwCamelCaseFunctionLabel": "afwBagSizeBoolean",
                "brief": "Returns the number of values in a bag",
                "camelCaseFunctionLabel": "bagSizeBoolean",
                "category": "boolean",
                "dataType": "boolean",
                "dataTypeMethodNumber": 3,
                "deprecated": false,
                "description": "This returns the integer number of values in list bag arg.",
                "functionId": "bag_size<boolean>",
                "functionLabel": "bag_size_boolean",
                "functionSignature": "integer((list boolean) arg)",
                "functionDeclaration": "/* Returns the number of values in a bag */\ninteger (\n    (list boolean) arg)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "boolean",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "match_rfc822Name": {
                "afwCamelCaseFunctionLabel": "afwMatchRfc822Name",
                "brief": "Checks if x500Name matches",
                "camelCaseFunctionLabel": "matchRfc822Name",
                "category": "rfc822Name",
                "dataType": "rfc822Name",
                "dataTypeMethodNumber": 61,
                "deprecated": false,
                "description": "Returns true if arg1 matches some terminal sequence of RDNs from arg2 when compared using equal_rfc822Name.",
                "functionId": "match<rfc822Name>",
                "functionLabel": "match_rfc822Name",
                "functionSignature": "boolean(rfc822Name arg1, string arg2)",
                "functionDeclaration": "/* Checks if x500Name matches */\nboolean (\n    rfc822Name arg1,\n    string arg2)",
                "parameters": [
                    {
                        "dataType": "rfc822Name",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "convert_AdaptiveQueryCriteria_to_query_string": {
                "afwCamelCaseFunctionLabel": "afwConvertAdaptiveQueryCriteriaToQueryString",
                "brief": "Convert _AdaptiveQueryCriteria_ to RQL",
                "camelCaseFunctionLabel": "convertAdaptiveQueryCriteriaToQueryString",
                "category": "adaptor",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This function converts an _AdaptiveQueryCriteria_ object to a query string.",
                "functionId": "convert_AdaptiveQueryCriteria_to_query_string",
                "functionLabel": "convert_AdaptiveQueryCriteria_to_query_string",
                "functionSignature": "string((object _AdaptiveQueryCriteria_) queryCriteria, string adaptorId?, string objectType?, integer style?)",
                "functionDeclaration": "/* Convert _AdaptiveQueryCriteria_ to RQL */\nstring (\n    (object _AdaptiveQueryCriteria_) queryCriteria,\n    string adaptorId?,\n    string objectType?,\n    integer style?)",
                "parameters": [
                    {
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveQueryCriteria_",
                        "description": "An object type _AdaptiveQueryCriteria_ object.",
                        "minArgs": -1,
                        "name": "queryCriteria",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "This is the adaptorId of adaptor containing the objectType for validating and mapping this query.  If not specified, no validation or mapping will occur.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "This is the objectType used in conjunction with the adaptorId parameter.  This parameter is only allowed and is required if the adaptorId parameter is specified.",
                        "minArgs": -1,
                        "name": "objectType",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "The style of the query string produced.  All of the styles are appropriately url encoded.\n\n0 - \"name=op=value\" where \"=op=\" will be \"==\", \"!=\", \"=ge=\", etc. with conjunctions \"&\" (and) and \"|\" (or).  Parentheses are placed around each group of like conjunctions except for outer \"&\". (default)\n\n1 - the same as 1 with \"=gte=\" instead of \"=ge=\", \"=lte=\" instead of \"=le=\", \"=eq=\" instead of \"=\", and \"=ne=\" instead of '!='.\n\n2 - similar to 1 with ';' for '&' and ',' for '|'.\n\n3 - comparisons \"op(name,value)\" where \"op\" will be \"eq\", \"ne\", \"ge\", ..., plus conjunctions \"and(list)\" and \"or(list)\" where \"list\" is a comma separated list of any comparison or conjunction.",
                        "minArgs": -1,
                        "name": "style",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "string",
                    "description": "Query string representation of the query criteria.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subset_time": {
                "afwCamelCaseFunctionLabel": "afwSubsetTime",
                "brief": "Determines if the first list is a subset of second list",
                "camelCaseFunctionLabel": "subsetTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 24,
                "deprecated": false,
                "description": "Returns boolean true if the unique values in time list1 are all in time list2.",
                "functionId": "subset<time>",
                "functionLabel": "subset_time",
                "functionSignature": "boolean((list time) list1, (list time) list2)",
                "functionDeclaration": "/* Determines if the first list is a subset of second list */\nboolean (\n    (list time) list1,\n    (list time) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "time",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "time",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_dateTime": {
                "afwCamelCaseFunctionLabel": "afwToStringDateTime",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts dateTime arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<dateTime>",
                "functionLabel": "to_string_dateTime",
                "functionSignature": "string(dateTime arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    dateTime arg)",
                "parameters": [
                    {
                        "dataType": "dateTime",
                        "description": "A dateTime value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_yearMonthDuration_1_0": {
                "afwCamelCaseFunctionLabel": "afwBagYearMonthDuration10",
                "brief": "Makes a list from args",
                "camelCaseFunctionLabel": "bagYearMonthDuration10",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Takes any number of yearMonthDuration_1_0 args and returns a list of list.",
                "functionId": "bag<yearMonthDuration_1_0>",
                "functionLabel": "bag_yearMonthDuration_1_0",
                "functionSignature": "(list list)(...(list yearMonthDuration_1_0) args)",
                "functionDeclaration": "/* Makes a list from args */\n(list list) (\n    ...(list yearMonthDuration_1_0) args)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "yearMonthDuration_1_0",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "array",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "union": {
                "afwCamelCaseFunctionLabel": "afwUnion",
                "brief": "Returns union of two or more string lists",
                "camelCaseFunctionLabel": "union",
                "category": "polymorphic",
                "dataTypeMethodNumber": 27,
                "deprecated": false,
                "description": "Returns a list of <Type> contains all of the unique values in two or more list of <Type> args.",
                "functionId": "union",
                "functionLabel": "union",
                "functionSignature": "<Type> list(...list lists)",
                "functionDeclaration": "/* Returns union of two or more string lists */\n<Type> list (\n    ...list lists)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "Two or more lists.",
                        "minArgs": 2,
                        "name": "lists",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": true
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "base64Binary",
                    "boolean",
                    "date",
                    "dateTime",
                    "dayTimeDuration",
                    "double",
                    "hexBinary",
                    "integer",
                    "rfc822Name",
                    "string",
                    "time",
                    "x500Name",
                    "yearMonthDuration"
                ],
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": true
                },
                "scriptSupportNumber": 0
            },
            "bag_size_dnsName": {
                "afwCamelCaseFunctionLabel": "afwBagSizeDnsName",
                "brief": "Returns the number of values in a bag",
                "camelCaseFunctionLabel": "bagSizeDnsName",
                "category": "dnsName",
                "dataType": "dnsName",
                "dataTypeMethodNumber": 3,
                "deprecated": false,
                "description": "This returns the integer number of values in list bag arg.",
                "functionId": "bag_size<dnsName>",
                "functionLabel": "bag_size_dnsName",
                "functionSignature": "integer((list dnsName) arg)",
                "functionDeclaration": "/* Returns the number of values in a bag */\ninteger (\n    (list dnsName) arg)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dnsName",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "reconcile_object": {
                "afwCamelCaseFunctionLabel": "afwReconcileObject",
                "brief": "Reconcile adaptive object",
                "camelCaseFunctionLabel": "reconcileObject",
                "category": "adaptor",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Reconcile an adaptive object.",
                "functionId": "reconcile_object",
                "functionLabel": "reconcile_object",
                "functionSignature": "(object _AdaptiveJournalEntry_)(object object, boolean checkOnly?)",
                "functionDeclaration": "/* Reconcile adaptive object */\n(object _AdaptiveJournalEntry_) (\n    object object,\n    boolean checkOnly?)",
                "parameters": [
                    {
                        "dataType": "object",
                        "description": "An object that has been retrieved with object options reconcilable, and whose properties have been modified.  A modify_object request will be produced reflecting the difference between the original object and this unmodified object.",
                        "minArgs": -1,
                        "name": "object",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "boolean",
                        "description": "Produce the modify_object request but don't execute it.  The returned journal enter will contain the modify_object request.",
                        "minArgs": -1,
                        "name": "checkOnly",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveJournalEntry_",
                    "description": "Resulting journal entry.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_dayTimeDuration": {
                "afwCamelCaseFunctionLabel": "afwToStringDayTimeDuration",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringDayTimeDuration",
                "category": "dayTimeDuration",
                "dataType": "dayTimeDuration",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts dayTimeDuration arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<dayTimeDuration>",
                "functionLabel": "to_string_dayTimeDuration",
                "functionSignature": "string(dayTimeDuration arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    dayTimeDuration arg)",
                "parameters": [
                    {
                        "dataType": "dayTimeDuration",
                        "description": "A dayTimeDuration value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "one_and_only_rfc822Name": {
                "afwCamelCaseFunctionLabel": "afwOneAndOnlyRfc822Name",
                "brief": "Converts a one value list to a rfc822Name value",
                "camelCaseFunctionLabel": "oneAndOnlyRfc822Name",
                "category": "rfc822Name",
                "dataType": "rfc822Name",
                "dataTypeMethodNumber": 15,
                "deprecated": false,
                "description": "This converts a list list  that contains one value to a data type rfc822Name value.",
                "functionId": "one_and_only<rfc822Name>",
                "functionLabel": "one_and_only_rfc822Name",
                "functionSignature": "rfc822Name((list list) list)",
                "functionDeclaration": "/* Converts a one value list to a rfc822Name value */\nrfc822Name (\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "rfc822Name",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "lt_time": {
                "afwCamelCaseFunctionLabel": "afwLtTime",
                "brief": "Checks for less than",
                "camelCaseFunctionLabel": "ltTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 35,
                "deprecated": false,
                "description": "Checks for time arg1 is less that time arg2 and return the boolean result.\n\nIt is illegal to compare a time that includes a time-zone value with one that does not.  In such cases, the in_range<time> function should be used.",
                "functionId": "lt<time>",
                "functionLabel": "lt_time",
                "functionSignature": "boolean(time arg1, time arg2)",
                "functionDeclaration": "/* Checks for less than */\nboolean (\n    time arg1,\n    time arg2)",
                "op": "<",
                "parameters": [
                    {
                        "dataType": "time",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "time",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "min_integer": {
                "afwCamelCaseFunctionLabel": "afwMinInteger",
                "brief": "Minimum value",
                "camelCaseFunctionLabel": "minInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 37,
                "deprecated": false,
                "description": "Return the integer arg that is less than or equal to the others.",
                "functionId": "min<integer>",
                "functionLabel": "min_integer",
                "functionSignature": "integer(...integer args)",
                "functionDeclaration": "/* Minimum value */\ninteger (\n    ...integer args)",
                "parameters": [
                    {
                        "dataType": "integer",
                        "minArgs": 1,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "intersection_double": {
                "afwCamelCaseFunctionLabel": "afwIntersectionDouble",
                "brief": "Returns intersection of two lists",
                "camelCaseFunctionLabel": "intersectionDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 9,
                "deprecated": false,
                "description": "Returns a list of double with the values that are common to both list of double list1 and list2.",
                "functionId": "intersection<double>",
                "functionLabel": "intersection_double",
                "functionSignature": "(list double)((list double) list1, (list double) list2)",
                "functionDeclaration": "/* Returns intersection of two lists */\n(list double) (\n    (list double) list1,\n    (list double) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "double",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "double",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "double",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "set_equals_yearMonthDuration": {
                "afwCamelCaseFunctionLabel": "afwSetEqualsYearMonthDuration",
                "brief": "Checks whether two lists are subsets of each other",
                "camelCaseFunctionLabel": "setEqualsYearMonthDuration",
                "category": "yearMonthDuration",
                "dataType": "yearMonthDuration",
                "dataTypeMethodNumber": 21,
                "deprecated": false,
                "description": "Returns boolean true if yearMonthDuration list1 and yearMonthDuration list2 are subsets of each other and return the boolean result.",
                "functionId": "set_equals<yearMonthDuration>",
                "functionLabel": "set_equals_yearMonthDuration",
                "functionSignature": "boolean((list yearMonthDuration) list1, (list yearMonthDuration) list2)",
                "functionDeclaration": "/* Checks whether two lists are subsets of each other */\nboolean (\n    (list yearMonthDuration) list1,\n    (list yearMonthDuration) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "yearMonthDuration",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "yearMonthDuration",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "policy_permit_overrides": {
                "afwCamelCaseFunctionLabel": "afwPolicyPermitOverrides",
                "brief": "Policy combining algorithm - permit_overrides",
                "camelCaseFunctionLabel": "policyPermitOverrides",
                "category": "policy_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Policy combining algorithm for permit overrides.",
                "functionId": "policy_permit_overrides",
                "functionLabel": "policy_permit_overrides",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Policy combining algorithm - permit_overrides */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subset_boolean": {
                "afwCamelCaseFunctionLabel": "afwSubsetBoolean",
                "brief": "Determines if the first list is a subset of second list",
                "camelCaseFunctionLabel": "subsetBoolean",
                "category": "boolean",
                "dataType": "boolean",
                "dataTypeMethodNumber": 24,
                "deprecated": false,
                "description": "Returns boolean true if the unique values in boolean list1 are all in boolean list2.",
                "functionId": "subset<boolean>",
                "functionLabel": "subset_boolean",
                "functionSignature": "boolean((list boolean) list1, (list boolean) list2)",
                "functionDeclaration": "/* Determines if the first list is a subset of second list */\nboolean (\n    (list boolean) list1,\n    (list boolean) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "boolean",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "boolean",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "compare_uri": {
                "afwCamelCaseFunctionLabel": "afwCompareUri",
                "brief": "Compare URIs",
                "camelCaseFunctionLabel": "compareUri",
                "category": "miscellaneous",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Compare two URIs.",
                "functionId": "compare_uri",
                "functionLabel": "compare_uri",
                "functionSignature": "boolean(string uri1, string uri2, boolean isValuePath?, string currentPath?)",
                "functionDeclaration": "/* Compare URIs */\nboolean (\n    string uri1,\n    string uri2,\n    boolean isValuePath?,\n    string currentPath?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "First URI for compare.  This URI can not contain an asterisk (\"*\")",
                        "minArgs": -1,
                        "name": "uri1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Second URI for compare.  This URI can contain asterisk (\"*\") for substitution if isValuePath is true and currentPath2 is specified.",
                        "minArgs": -1,
                        "name": "uri2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "boolean",
                        "description": "The URIs are adaptive value paths.  If one of the URIs begins with a single slash \"/\", both must, and each URI will be parsed as an adaptive value path (example: /adaptorId/objectType/objectId.propertyNames).",
                        "minArgs": -1,
                        "name": "isValuePath",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "If isValuePath is true, this is the current path that is used to resolve a relative path in the URIs.  If isValuePath is not true, this parameter is ignored.",
                        "minArgs": -1,
                        "name": "currentPath",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "Result of comparison.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "service_stop": {
                "afwCamelCaseFunctionLabel": "afwServiceStop",
                "brief": "Stop service",
                "camelCaseFunctionLabel": "serviceStop",
                "category": "administrative",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Stop a service.",
                "functionId": "service_stop",
                "functionLabel": "service_stop",
                "functionSignature": "(object _AdaptiveService_)(string serviceId)",
                "functionDeclaration": "/* Stop service */\n(object _AdaptiveService_) (\n    string serviceId)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "The serviceId of the service to stop.",
                        "minArgs": -1,
                        "name": "serviceId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveService_",
                    "description": "_AdaptiveService_ object for the service which will contain the current status of the service.  If there is an error, the status property value will be \"error\" and \"statusMessage\" contain an error message.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_size_dayTimeDuration": {
                "afwCamelCaseFunctionLabel": "afwBagSizeDayTimeDuration",
                "brief": "Returns the number of values in a bag",
                "camelCaseFunctionLabel": "bagSizeDayTimeDuration",
                "category": "dayTimeDuration",
                "dataType": "dayTimeDuration",
                "dataTypeMethodNumber": 3,
                "deprecated": false,
                "description": "This returns the integer number of values in list bag arg.",
                "functionId": "bag_size<dayTimeDuration>",
                "functionLabel": "bag_size_dayTimeDuration",
                "functionSignature": "integer((list dayTimeDuration) arg)",
                "functionDeclaration": "/* Returns the number of values in a bag */\ninteger (\n    (list dayTimeDuration) arg)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dayTimeDuration",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "anyURI": {
                "afwCamelCaseFunctionLabel": "afwAnyURI",
                "brief": "Convert to data type anyURI",
                "camelCaseFunctionLabel": "anyURI",
                "category": "anyURI",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type anyURI returning anyURI result.",
                "functionId": "anyURI",
                "functionLabel": "anyURI",
                "functionSignature": "anyURI(any arg)",
                "functionDeclaration": "/* Convert to data type anyURI */\nanyURI (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "anyURI",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_boolean_string": {
                "afwCamelCaseFunctionLabel": "afwToBooleanString",
                "brief": "Converts string to boolean",
                "camelCaseFunctionLabel": "toBooleanString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 65,
                "deprecated": false,
                "description": "Converts string arg to boolean.",
                "functionId": "to_boolean<string>",
                "functionLabel": "to_boolean_string",
                "functionSignature": "boolean(string arg)",
                "functionDeclaration": "/* Converts string to boolean */\nboolean (\n    string arg)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_ipAddress": {
                "afwCamelCaseFunctionLabel": "afwIsIpAddress",
                "brief": "Checks whether value is dataType ipAddress",
                "camelCaseFunctionLabel": "isIpAddress",
                "category": "ipAddress",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type ipAddress.  Use is_list_of_ipAddress() instead to test for a list of ipAddress.",
                "functionId": "is<ipAddress>",
                "functionLabel": "is_ipAddress",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType ipAddress */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is ipAddress.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "perform": {
                "afwCamelCaseFunctionLabel": "afwPerform",
                "brief": "Perform actions",
                "camelCaseFunctionLabel": "perform",
                "category": "miscellaneous",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Perform actions right away.",
                "functionId": "perform",
                "functionLabel": "perform",
                "functionSignature": "(object _AdaptiveResponse_)((object _AdaptiveActions_) request)",
                "functionDeclaration": "/* Perform actions */\n(object _AdaptiveResponse_) (\n    (object _AdaptiveActions_) request)",
                "parameters": [
                    {
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveActions_",
                        "description": "See /afw/_AdaptiveObjectType_/_AdaptiveActions_ for more information.",
                        "minArgs": -1,
                        "name": "request",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveResponse_",
                    "description": "Response object.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "reverse": {
                "afwCamelCaseFunctionLabel": "afwReverse",
                "brief": "Return list with elements reversed",
                "camelCaseFunctionLabel": "reverse",
                "category": "array",
                "dataType": "array",
                "dataTypeMethodNumber": 56,
                "deprecated": false,
                "description": "Reverse the order of the elements in a list.  If the list is typed, the resulting list will be the same type.",
                "functionId": "reverse",
                "functionLabel": "reverse",
                "functionSignature": "list(list list)",
                "functionDeclaration": "/* Return list with elements reversed */\nlist (\n    list list)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "A list to reverse.",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "description": "A list with elements reversed.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "template": {
                "afwCamelCaseFunctionLabel": "afwTemplate",
                "brief": "Convert to data type template",
                "camelCaseFunctionLabel": "template",
                "category": "template",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type template returning template result.",
                "functionId": "template",
                "functionLabel": "template",
                "functionSignature": "template(any arg)",
                "functionDeclaration": "/* Convert to data type template */\ntemplate (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "template",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "one_and_only_hexBinary": {
                "afwCamelCaseFunctionLabel": "afwOneAndOnlyHexBinary",
                "brief": "Converts a one value list to a hexBinary value",
                "camelCaseFunctionLabel": "oneAndOnlyHexBinary",
                "category": "hexBinary",
                "dataType": "hexBinary",
                "dataTypeMethodNumber": 15,
                "deprecated": false,
                "description": "This converts a list list  that contains one value to a data type hexBinary value.",
                "functionId": "one_and_only<hexBinary>",
                "functionLabel": "one_and_only_hexBinary",
                "functionSignature": "hexBinary((list list) list)",
                "functionDeclaration": "/* Converts a one value list to a hexBinary value */\nhexBinary (\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "hexBinary",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ne_time": {
                "afwCamelCaseFunctionLabel": "afwNeTime",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "neTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 13,
                "deprecated": false,
                "description": "Checks for time arg1 is not equal to time arg2 and return the boolean result.",
                "functionId": "ne<time>",
                "functionLabel": "ne_time",
                "functionSignature": "boolean(time arg1, time arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    time arg1,\n    time arg2)",
                "op": "!=",
                "parameters": [
                    {
                        "dataType": "time",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "time",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_hexBinary": {
                "afwCamelCaseFunctionLabel": "afwToStringHexBinary",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringHexBinary",
                "category": "hexBinary",
                "dataType": "hexBinary",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts hexBinary arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<hexBinary>",
                "functionLabel": "to_string_hexBinary",
                "functionSignature": "string(hexBinary arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    hexBinary arg)",
                "parameters": [
                    {
                        "dataType": "hexBinary",
                        "description": "A hexBinary value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "property_is_not_null": {
                "afwCamelCaseFunctionLabel": "afwPropertyIsNotNull",
                "brief": "Determine if a property exists in an object and is not null",
                "camelCaseFunctionLabel": "propertyIsNotNull",
                "category": "object",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Return true if the named property exists in an object and is not null.",
                "functionId": "property_is_not_null",
                "functionLabel": "property_is_not_null",
                "functionSignature": "boolean(object object, string name)",
                "functionDeclaration": "/* Determine if a property exists in an object and is not null */\nboolean (\n    object object,\n    string name)",
                "parameters": [
                    {
                        "dataType": "object",
                        "description": "Object to get property from.",
                        "minArgs": -1,
                        "name": "object",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Name of property to check.",
                        "minArgs": -1,
                        "name": "name",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if object has named property that is not null.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "base64Binary": {
                "afwCamelCaseFunctionLabel": "afwBase64Binary",
                "brief": "Convert to data type base64Binary",
                "camelCaseFunctionLabel": "base64Binary",
                "category": "base64Binary",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type base64Binary returning base64Binary result.",
                "functionId": "base64Binary",
                "functionLabel": "base64Binary",
                "functionSignature": "base64Binary(any arg)",
                "functionDeclaration": "/* Convert to data type base64Binary */\nbase64Binary (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "base64Binary",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_in_yearMonthDuration": {
                "afwCamelCaseFunctionLabel": "afwIsInYearMonthDuration",
                "brief": "Checks whether a value is in a list",
                "camelCaseFunctionLabel": "isInYearMonthDuration",
                "category": "yearMonthDuration",
                "dataType": "yearMonthDuration",
                "dataTypeMethodNumber": 10,
                "deprecated": false,
                "description": "Checks whether yearMonthDuration value is in list of yearMonthDuration list and returns the boolean result.",
                "functionId": "is_in<yearMonthDuration>",
                "functionLabel": "is_in_yearMonthDuration",
                "functionSignature": "boolean(yearMonthDuration value, (list yearMonthDuration) list)",
                "functionDeclaration": "/* Checks whether a value is in a list */\nboolean (\n    yearMonthDuration value,\n    (list yearMonthDuration) list)",
                "parameters": [
                    {
                        "dataType": "yearMonthDuration",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "yearMonthDuration",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_anyURI": {
                "afwCamelCaseFunctionLabel": "afwToStringAnyURI",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts anyURI arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<anyURI>",
                "functionLabel": "to_string_anyURI",
                "functionSignature": "string(anyURI arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    anyURI arg)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "description": "A anyURI value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_in_boolean": {
                "afwCamelCaseFunctionLabel": "afwIsInBoolean",
                "brief": "Checks whether a value is in a list",
                "camelCaseFunctionLabel": "isInBoolean",
                "category": "boolean",
                "dataType": "boolean",
                "dataTypeMethodNumber": 10,
                "deprecated": false,
                "description": "Checks whether boolean value is in list of boolean list and returns the boolean result.",
                "functionId": "is_in<boolean>",
                "functionLabel": "is_in_boolean",
                "functionSignature": "boolean(boolean value, (list boolean) list)",
                "functionDeclaration": "/* Checks whether a value is in a list */\nboolean (\n    boolean value,\n    (list boolean) list)",
                "parameters": [
                    {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "boolean",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "starts_with_anyURI": {
                "afwCamelCaseFunctionLabel": "afwStartsWithAnyURI",
                "brief": "Checks whether value starts with a string",
                "camelCaseFunctionLabel": "startsWithAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 23,
                "deprecated": false,
                "description": "Checks whether anyURI value starts with a subString and return the boolean result.",
                "functionId": "starts_with<anyURI>",
                "functionLabel": "starts_with_anyURI",
                "functionSignature": "boolean(anyURI value, anyURI subString)",
                "functionDeclaration": "/* Checks whether value starts with a string */\nboolean (\n    anyURI value,\n    anyURI subString)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "anyURI",
                        "minArgs": -1,
                        "name": "subString",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "union_integer": {
                "afwCamelCaseFunctionLabel": "afwUnionInteger",
                "brief": "Returns union of two or more string lists",
                "camelCaseFunctionLabel": "unionInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 27,
                "deprecated": false,
                "description": "Returns a list of integer contains all of the unique values in two or more list of integer args.",
                "functionId": "union<integer>",
                "functionLabel": "union_integer",
                "functionSignature": "(list integer)(...(list integer) lists)",
                "functionDeclaration": "/* Returns union of two or more string lists */\n(list integer) (\n    ...(list integer) lists)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "integer",
                        "description": "Two or more lists.",
                        "minArgs": 2,
                        "name": "lists",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_in_dnsName": {
                "afwCamelCaseFunctionLabel": "afwIsInDnsName",
                "brief": "Checks whether a value is in a list",
                "camelCaseFunctionLabel": "isInDnsName",
                "category": "dnsName",
                "dataType": "dnsName",
                "dataTypeMethodNumber": 10,
                "deprecated": false,
                "description": "Checks whether dnsName value is in list of dnsName list and returns the boolean result.",
                "functionId": "is_in<dnsName>",
                "functionLabel": "is_in_dnsName",
                "functionSignature": "boolean(dnsName value, (list dnsName) list)",
                "functionDeclaration": "/* Checks whether a value is in a list */\nboolean (\n    dnsName value,\n    (list dnsName) list)",
                "parameters": [
                    {
                        "dataType": "dnsName",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dnsName",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subtract_dayTimeDuration": {
                "afwCamelCaseFunctionLabel": "afwSubtractDayTimeDuration",
                "brief": "Subtract numbers",
                "camelCaseFunctionLabel": "subtractDayTimeDuration",
                "category": "polymorphic",
                "dataTypeMethodNumber": 38,
                "deprecated": false,
                "description": "Subtract dayTimeDuration arg2 from <Type> arg1 and return the <Type> result.",
                "functionId": "subtract_dayTimeDuration",
                "functionLabel": "subtract_dayTimeDuration",
                "functionSignature": "<Type> Type(Type arg1, dayTimeDuration arg2)",
                "functionDeclaration": "/* Subtract numbers */\n<Type> Type (\n    Type arg1,\n    dayTimeDuration arg2)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "dayTimeDuration",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "dateTime"
                ],
                "pure": true,
                "returns": {
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_string": {
                "afwCamelCaseFunctionLabel": "afwBagString",
                "brief": "Makes a list from args",
                "camelCaseFunctionLabel": "bagString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 2,
                "deprecated": false,
                "description": "Takes any number of string args and returns a list of list.",
                "functionId": "bag<string>",
                "functionLabel": "bag_string",
                "functionSignature": "(list string)(...(list string) args)",
                "functionDeclaration": "/* Makes a list from args */\n(list string) (\n    ...(list string) args)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "string",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "string",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "nex_anyURI": {
                "afwCamelCaseFunctionLabel": "afwNexAnyURI",
                "brief": "Checks for not equal value or type",
                "camelCaseFunctionLabel": "nexAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 14,
                "deprecated": false,
                "description": "Checks for anyURI arg1 not equal to value or data type of arg2 and return the boolean result.",
                "functionId": "nex<anyURI>",
                "functionLabel": "nex_anyURI",
                "functionSignature": "boolean(anyURI arg1, anyURI arg2)",
                "functionDeclaration": "/* Checks for not equal value or type */\nboolean (\n    anyURI arg1,\n    anyURI arg2)",
                "op": "!==",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "anyURI",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "split_anyURI": {
                "afwCamelCaseFunctionLabel": "afwSplitAnyURI",
                "brief": "Split at a separator",
                "camelCaseFunctionLabel": "splitAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 22,
                "deprecated": false,
                "description": "Split anyURI value into an list of strings using a separator.",
                "functionId": "split<anyURI>",
                "functionLabel": "split_anyURI",
                "functionSignature": "list(anyURI value, string separator?, integer limit?)",
                "functionDeclaration": "/* Split at a separator */\nlist (\n    anyURI value,\n    string separator?,\n    integer limit?)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "description": "The anyURI value to split.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "The separator to use.  If this is an empty string or separator is not specified, the value is split between characters.",
                        "minArgs": -1,
                        "name": "separator",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "This is the maximum number of splits.  Any remaining part of value is ignored.",
                        "minArgs": -1,
                        "name": "limit",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "description": "An list of strings.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "one_and_only_time": {
                "afwCamelCaseFunctionLabel": "afwOneAndOnlyTime",
                "brief": "Converts a one value list to a time value",
                "camelCaseFunctionLabel": "oneAndOnlyTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 15,
                "deprecated": false,
                "description": "This converts a list list  that contains one value to a data type time value.",
                "functionId": "one_and_only<time>",
                "functionLabel": "one_and_only_time",
                "functionSignature": "time((list list) list)",
                "functionDeclaration": "/* Converts a one value list to a time value */\ntime (\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "time",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eq_x500Name": {
                "afwCamelCaseFunctionLabel": "afwEqX500Name",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "eqX500Name",
                "category": "x500Name",
                "dataType": "x500Name",
                "dataTypeMethodNumber": 6,
                "deprecated": false,
                "description": "Checks for x500Name arg1 is equal to x500Name arg2 and return the boolean result.",
                "functionId": "eq<x500Name>",
                "functionLabel": "eq_x500Name",
                "functionSignature": "boolean(x500Name arg1, x500Name arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    x500Name arg1,\n    x500Name arg2)",
                "op": "==",
                "parameters": [
                    {
                        "dataType": "x500Name",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "x500Name",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "union_yearMonthDuration_1_0": {
                "afwCamelCaseFunctionLabel": "afwUnionYearMonthDuration10",
                "brief": "Returns union of two or more yearMonthDuration_1_0 lists",
                "camelCaseFunctionLabel": "unionYearMonthDuration10",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Returns yearMonthDuration_1_0 list contains all of the unique values in two or more yearMonthDuration_1_0 list args.",
                "functionId": "union<yearMonthDuration_1_0>",
                "functionLabel": "union_yearMonthDuration_1_0",
                "functionSignature": "(list yearMonthDuration_1_0)(...(list yearMonthDuration_1_0) lists)",
                "functionDeclaration": "/* Returns union of two or more yearMonthDuration_1_0 lists */\n(list yearMonthDuration_1_0) (\n    ...(list yearMonthDuration_1_0) lists)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "yearMonthDuration_1_0",
                        "description": "Two or more lists.",
                        "minArgs": 2,
                        "name": "lists",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "yearMonthDuration_1_0",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "assign": {
                "afwCamelCaseFunctionLabel": "afwAssign",
                "brief": "Assign a value to a defined variable",
                "camelCaseFunctionLabel": "assign",
                "category": "script",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Assign a value to the innermost structured block definition of a variable.  If the variable is not defined, the variable is defined in the innermost structured block.  An error is thrown if not called from a list of values in a structured function.",
                "functionId": "assign",
                "functionLabel": "assign",
                "functionSignature": "any(string name, any value)",
                "functionDeclaration": "/* Assign a value to a defined variable */\nany (\n    string name,\n    any value)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Variable name",
                        "minArgs": -1,
                        "name": "name",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "This is the value to assign to the variable.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "description": "The value assigned.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 1
            },
            "ends_with": {
                "afwCamelCaseFunctionLabel": "afwEndsWith",
                "brief": "Checks whether value ends with a string",
                "camelCaseFunctionLabel": "endsWith",
                "category": "polymorphic",
                "dataTypeMethodNumber": 5,
                "deprecated": false,
                "description": "Checks whether <Type> value ends with a <Type> and return the boolean result.",
                "functionId": "ends_with",
                "functionLabel": "ends_with",
                "functionSignature": "<Type> boolean(Type value, string subString)",
                "functionDeclaration": "/* Checks whether value ends with a string */\n<Type> boolean (\n    Type value,\n    string subString)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "subString",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "journal_get_next_after_cursor": {
                "afwCamelCaseFunctionLabel": "afwJournalGetNextAfterCursor",
                "brief": "Get next journal entry after cursor",
                "camelCaseFunctionLabel": "journalGetNextAfterCursor",
                "category": "journal",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Get the next journal entry after the one specified by the entry_cursor parameter.\n\nThis option will set response properties \"entry\" and \"cursor\" if there is a next entry to retrieve.",
                "functionId": "journal_get_next_after_cursor",
                "functionLabel": "journal_get_next_after_cursor",
                "functionSignature": "object(string adaptorId, string cursor)",
                "functionDeclaration": "/* Get next journal entry after cursor */\nobject (\n    string adaptorId,\n    string cursor)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Id of adaptor.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Journal entry cursor.",
                        "minArgs": -1,
                        "name": "cursor",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Response object.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "union_date": {
                "afwCamelCaseFunctionLabel": "afwUnionDate",
                "brief": "Returns union of two or more string lists",
                "camelCaseFunctionLabel": "unionDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 27,
                "deprecated": false,
                "description": "Returns a list of date contains all of the unique values in two or more list of date args.",
                "functionId": "union<date>",
                "functionLabel": "union_date",
                "functionSignature": "(list date)(...(list date) lists)",
                "functionDeclaration": "/* Returns union of two or more string lists */\n(list date) (\n    ...(list date) lists)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "date",
                        "description": "Two or more lists.",
                        "minArgs": 2,
                        "name": "lists",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "date",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "print_lines": {
                "afwCamelCaseFunctionLabel": "afwPrintLines",
                "brief": "Print line",
                "camelCaseFunctionLabel": "printLines",
                "category": "miscellaneous",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Evaluate and convert each argument to String then print each List entry, Bag entry, or Single value on a separate line.  An undefined value is represented by 'undefined'.",
                "functionId": "print_lines",
                "functionLabel": "print_lines",
                "functionSignature": "null(...any args)",
                "functionDeclaration": "/* Print line */\nnull (\n    ...any args)",
                "parameters": [
                    {
                        "description": "Values to print.",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "null",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0,
                "sideEffects": [
                    "Values written"
                ]
            },
            "to_time_string": {
                "afwCamelCaseFunctionLabel": "afwToTimeString",
                "brief": "Converts string to time",
                "camelCaseFunctionLabel": "toTimeString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 72,
                "deprecated": false,
                "description": "Converts string arg to time.",
                "functionId": "to_time<string>",
                "functionLabel": "to_time_string",
                "functionSignature": "time(string arg)",
                "functionDeclaration": "/* Converts string to time */\ntime (\n    string arg)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "time",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "gt_time": {
                "afwCamelCaseFunctionLabel": "afwGtTime",
                "brief": "Checks for greater than",
                "camelCaseFunctionLabel": "gtTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 33,
                "deprecated": false,
                "description": "Checks for time arg1 is greater than time arg2 and return the boolean result.\n\nIt is illegal to compare a time that includes a time-zone value with one that does not.  In such cases, the in_range<time> function should be used.",
                "functionId": "gt<time>",
                "functionLabel": "gt_time",
                "functionSignature": "boolean(time arg1, time arg2)",
                "functionDeclaration": "/* Checks for greater than */\nboolean (\n    time arg1,\n    time arg2)",
                "op": ">",
                "parameters": [
                    {
                        "dataType": "time",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "time",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "flag_replace_defaults": {
                "afwCamelCaseFunctionLabel": "afwFlagReplaceDefaults",
                "brief": "Replace the list of flags used to determine the default active flags",
                "camelCaseFunctionLabel": "flagReplaceDefaults",
                "category": "administrative",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Completely replace the list of the flagId of flags that are used to determine the default active flags when a scope (request) is created.  This list can contain the flagId of flags that have not yet been registered.  These flags and the flags they include are set as the active default flags.\n\nThis change only lasts for the life of the current adaptive environment (e.g. until the adaptive server or afw command ends).  If you want the change to persist, change the defaultFlags property in the application config.",
                "functionId": "flag_replace_defaults",
                "functionLabel": "flag_replace_defaults",
                "functionSignature": "null((list string) flagId)",
                "functionDeclaration": "/* Replace the list of flags used to determine the default active flags */\nnull (\n    (list string) flagId)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "string",
                        "description": "The list of the flagId of flags used to determine the default active flags.",
                        "minArgs": -1,
                        "name": "flagId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "null",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "match": {
                "afwCamelCaseFunctionLabel": "afwMatch",
                "brief": "Checks if x500Name matches",
                "camelCaseFunctionLabel": "match",
                "category": "polymorphic",
                "dataTypeMethodNumber": 61,
                "deprecated": false,
                "description": "Returns true if arg1 matches some terminal sequence of RDNs from arg2 when compared using equal_<Type>.",
                "functionId": "match",
                "functionLabel": "match",
                "functionSignature": "<Type> boolean(Type arg1, string arg2)",
                "functionDeclaration": "/* Checks if x500Name matches */\n<Type> boolean (\n    Type arg1,\n    string arg2)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "rfc822Name",
                    "x500Name"
                ],
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "multiply_integer": {
                "afwCamelCaseFunctionLabel": "afwMultiplyInteger",
                "brief": "Multiply numbers",
                "camelCaseFunctionLabel": "multiplyInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 45,
                "deprecated": false,
                "description": "Multiply 2 or more integer args and return the integer result.",
                "functionId": "multiply<integer>",
                "functionLabel": "multiply_integer",
                "functionSignature": "integer(...integer args)",
                "functionDeclaration": "/* Multiply numbers */\ninteger (\n    ...integer args)",
                "op": "*",
                "parameters": [
                    {
                        "dataType": "integer",
                        "minArgs": 2,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ne_yearMonthDuration": {
                "afwCamelCaseFunctionLabel": "afwNeYearMonthDuration",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "neYearMonthDuration",
                "category": "yearMonthDuration",
                "dataType": "yearMonthDuration",
                "dataTypeMethodNumber": 13,
                "deprecated": false,
                "description": "Checks for yearMonthDuration arg1 is not equal to yearMonthDuration arg2 and return the boolean result.",
                "functionId": "ne<yearMonthDuration>",
                "functionLabel": "ne_yearMonthDuration",
                "functionSignature": "boolean(yearMonthDuration arg1, yearMonthDuration arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    yearMonthDuration arg1,\n    yearMonthDuration arg2)",
                "op": "!=",
                "parameters": [
                    {
                        "dataType": "yearMonthDuration",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "yearMonthDuration",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "set_equals_double": {
                "afwCamelCaseFunctionLabel": "afwSetEqualsDouble",
                "brief": "Checks whether two lists are subsets of each other",
                "camelCaseFunctionLabel": "setEqualsDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 21,
                "deprecated": false,
                "description": "Returns boolean true if double list1 and double list2 are subsets of each other and return the boolean result.",
                "functionId": "set_equals<double>",
                "functionLabel": "set_equals_double",
                "functionSignature": "boolean((list double) list1, (list double) list2)",
                "functionDeclaration": "/* Checks whether two lists are subsets of each other */\nboolean (\n    (list double) list1,\n    (list double) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "double",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "double",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "policy_deny_overrides": {
                "afwCamelCaseFunctionLabel": "afwPolicyDenyOverrides",
                "brief": "Policy combining algorithm - deny_overrides",
                "camelCaseFunctionLabel": "policyDenyOverrides",
                "category": "policy_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Policy combining algorithm for deny overrides.",
                "functionId": "policy_deny_overrides",
                "functionLabel": "policy_deny_overrides",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Policy combining algorithm - deny_overrides */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "replace_string": {
                "afwCamelCaseFunctionLabel": "afwReplaceString",
                "brief": "Replace strings",
                "camelCaseFunctionLabel": "replaceString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 20,
                "deprecated": false,
                "description": "Replace string(s) in a string value.",
                "functionId": "replace<string>",
                "functionLabel": "replace_string",
                "functionSignature": "string(string value, string match, string replacement, integer limit?)",
                "functionDeclaration": "/* Replace strings */\nstring (\n    string value,\n    string match,\n    string replacement,\n    integer limit?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "The original string value.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "The string to replace.",
                        "minArgs": -1,
                        "name": "match",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "The replacement string.",
                        "minArgs": -1,
                        "name": "replacement",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "This is the maximum times to replace.  The default is 1.  Specify -1 to replace all occurrences.",
                        "minArgs": -1,
                        "name": "limit",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "A string value with the matched string(s) replaced.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_anyURI": {
                "afwCamelCaseFunctionLabel": "afwIsAnyURI",
                "brief": "Checks whether value is dataType anyURI",
                "camelCaseFunctionLabel": "isAnyURI",
                "category": "anyURI",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type anyURI.  Use is_list_of_anyURI() instead to test for a list of anyURI.",
                "functionId": "is<anyURI>",
                "functionLabel": "is_anyURI",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType anyURI */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is anyURI.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "script": {
                "afwCamelCaseFunctionLabel": "afwScript",
                "brief": "Convert to data type script",
                "camelCaseFunctionLabel": "script",
                "category": "script",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type script returning script result.",
                "functionId": "script",
                "functionLabel": "script",
                "functionSignature": "script(any arg)",
                "functionDeclaration": "/* Convert to data type script */\nscript (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "script",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "get_object": {
                "afwCamelCaseFunctionLabel": "afwGetObject",
                "brief": "Get adaptive object",
                "camelCaseFunctionLabel": "getObject",
                "category": "adaptor",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Get an adaptive object from the adaptor, specified by adaptorId, objectType and objectId.  Optional view options and adaptor-specific options may be supplied to influence how the object is returned.",
                "functionId": "get_object",
                "functionLabel": "get_object",
                "functionSignature": "object(string adaptorId, string objectType, string objectId, (object _AdaptiveObjectOptions_) options?, object adaptorTypeSpecific?)",
                "functionDeclaration": "/* Get adaptive object */\nobject (\n    string adaptorId,\n    string objectType,\n    string objectId,\n    (object _AdaptiveObjectOptions_) options?,\n    object adaptorTypeSpecific?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Id of adaptor containing object to retrieve.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Id of adaptive object type of object to retrieve.",
                        "minArgs": -1,
                        "name": "objectType",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Id of object to retrieve.",
                        "minArgs": -1,
                        "name": "objectId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveObjectOptions_",
                        "description": "Object view options.  See /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more information.",
                        "minArgs": -1,
                        "name": "options",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "This is an optional object parameter with an objectType determined by the adaptorType associated with the adaptorId parameter.  If the adaptorType supports this parameter, adaptor afw will have an adaptive object type with an id of:\n\n_AdaptiveAdaptorTypeSpecific_${adaptorType}_get_object\n\nWhere ${adaptorType} is the adaptor type id.",
                        "minArgs": -1,
                        "name": "adaptorTypeSpecific",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Object retrieved or NULL if not found.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "url_encode_string": {
                "afwCamelCaseFunctionLabel": "afwUrlEncodeString",
                "brief": "URI encode",
                "camelCaseFunctionLabel": "urlEncodeString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 28,
                "deprecated": false,
                "description": "URL encode a value or bag of values.",
                "functionId": "url_encode<string>",
                "functionLabel": "url_encode_string",
                "functionSignature": "string(string unencoded)",
                "functionDeclaration": "/* URI encode */\nstring (\n    string unencoded)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "URL encode a single value.  See the url_encode method for the data type of more details.",
                        "minArgs": -1,
                        "name": "unencoded",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "URI encoded string.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "union_x500Name": {
                "afwCamelCaseFunctionLabel": "afwUnionX500Name",
                "brief": "Returns union of two or more string lists",
                "camelCaseFunctionLabel": "unionX500Name",
                "category": "x500Name",
                "dataType": "x500Name",
                "dataTypeMethodNumber": 27,
                "deprecated": false,
                "description": "Returns a list of x500Name contains all of the unique values in two or more list of x500Name args.",
                "functionId": "union<x500Name>",
                "functionLabel": "union_x500Name",
                "functionSignature": "(list x500Name)(...(list x500Name) lists)",
                "functionDeclaration": "/* Returns union of two or more string lists */\n(list x500Name) (\n    ...(list x500Name) lists)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "x500Name",
                        "description": "Two or more lists.",
                        "minArgs": 2,
                        "name": "lists",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "x500Name",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "repeat_string": {
                "afwCamelCaseFunctionLabel": "afwRepeatString",
                "brief": "Returns a repeated value",
                "camelCaseFunctionLabel": "repeatString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 19,
                "deprecated": false,
                "description": "Repeat a string value a specified number of times.",
                "functionId": "repeat<string>",
                "functionLabel": "repeat_string",
                "functionSignature": "string(string value, integer times)",
                "functionDeclaration": "/* Returns a repeated value */\nstring (\n    string value,\n    integer times)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "The string value to repeat.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "The number of times to repeat the value.",
                        "minArgs": -1,
                        "name": "times",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The repeated string value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string": {
                "afwCamelCaseFunctionLabel": "afwToString",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toString",
                "category": "polymorphic",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts <Type> arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string",
                "functionLabel": "to_string",
                "functionSignature": "<Type> string(Type arg)",
                "functionDeclaration": "/* Converts value to string */\n<Type> string (\n    Type arg)",
                "parameters": [
                    {
                        "description": "A <Type> value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "base64Binary",
                    "boolean",
                    "date",
                    "dateTime",
                    "dayTimeDuration",
                    "dnsName",
                    "double",
                    "hexBinary",
                    "ia5String",
                    "integer",
                    "ipAddress",
                    "array",
                    "null",
                    "object",
                    "objectId",
                    "objectPath",
                    "password",
                    "rfc822Name",
                    "string",
                    "template",
                    "time",
                    "x500Name",
                    "xpathExpression",
                    "yearMonthDuration"
                ],
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },            
            "bag_size_string": {
                "afwCamelCaseFunctionLabel": "afwBagSizeString",
                "brief": "Returns the number of values in a bag",
                "camelCaseFunctionLabel": "bagSizeString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 3,
                "deprecated": false,
                "description": "This returns the integer number of values in list bag arg.",
                "functionId": "bag_size<string>",
                "functionLabel": "bag_size_string",
                "functionSignature": "integer((list string) arg)",
                "functionDeclaration": "/* Returns the number of values in a bag */\ninteger (\n    (list string) arg)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "string",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "null": {
                "afwCamelCaseFunctionLabel": "afwNull",
                "brief": "Convert to data type null",
                "camelCaseFunctionLabel": "null",
                "category": "null",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type null returning null result.",
                "functionId": "null",
                "functionLabel": "null",
                "functionSignature": "null(any arg)",
                "functionDeclaration": "/* Convert to data type null */\nnull (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "null",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "nex_dayTimeDuration": {
                "afwCamelCaseFunctionLabel": "afwNexDayTimeDuration",
                "brief": "Checks for not equal value or type",
                "camelCaseFunctionLabel": "nexDayTimeDuration",
                "category": "dayTimeDuration",
                "dataType": "dayTimeDuration",
                "dataTypeMethodNumber": 14,
                "deprecated": false,
                "description": "Checks for dayTimeDuration arg1 not equal to value or data type of arg2 and return the boolean result.",
                "functionId": "nex<dayTimeDuration>",
                "functionLabel": "nex_dayTimeDuration",
                "functionSignature": "boolean(dayTimeDuration arg1, dayTimeDuration arg2)",
                "functionDeclaration": "/* Checks for not equal value or type */\nboolean (\n    dayTimeDuration arg1,\n    dayTimeDuration arg2)",
                "op": "!==",
                "parameters": [
                    {
                        "dataType": "dayTimeDuration",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "dayTimeDuration",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "compile_xpathExpression": {
                "afwCamelCaseFunctionLabel": "afwCompileXpathExpression",
                "brief": "Compile xpathExpression value",
                "camelCaseFunctionLabel": "compileXpathExpression",
                "category": "xpathExpression",
                "dataType": "xpathExpression",
                "dataTypeMethodNumber": 51,
                "deprecated": false,
                "description": "Compile xpathExpression value and return either an unevaluated adaptive value or a string containing the compiler listing.",
                "functionId": "compile<xpathExpression>",
                "functionLabel": "compile_xpathExpression",
                "functionSignature": "unevaluated(xpathExpression source, any listing?)",
                "functionDeclaration": "/* Compile xpathExpression value */\nunevaluated (\n    xpathExpression source /* Source to compile */,\n    any listing?           /* Listing option */)",
                "parameters": [
                    {
                        "brief": "Source to compile",
                        "dataType": "xpathExpression",
                        "description": "xpathExpression string to compile",
                        "minArgs": -1,
                        "name": "source",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "brief": "Listing option",
                        "description": "If specified, a compiler listing is produced instead of an unevaluated expression value.\n\nThis parameter can be an integer between 0 and 10 of a string that is used for indentation.  If 0 is specified, no whitespace is added to the resulting string.  If 1 through 10 is specified, that number of spaces is used.",
                        "minArgs": -1,
                        "name": "listing",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "unevaluated",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_in_dateTime": {
                "afwCamelCaseFunctionLabel": "afwIsInDateTime",
                "brief": "Checks whether a value is in a list",
                "camelCaseFunctionLabel": "isInDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 10,
                "deprecated": false,
                "description": "Checks whether dateTime value is in list of dateTime list and returns the boolean result.",
                "functionId": "is_in<dateTime>",
                "functionLabel": "is_in_dateTime",
                "functionSignature": "boolean(dateTime value, (list dateTime) list)",
                "functionDeclaration": "/* Checks whether a value is in a list */\nboolean (\n    dateTime value,\n    (list dateTime) list)",
                "parameters": [
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dateTime",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eq_ignore_case_string": {
                "afwCamelCaseFunctionLabel": "afwEqIgnoreCaseString",
                "brief": "Checks for equal ignoring case",
                "camelCaseFunctionLabel": "eqIgnoreCaseString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 59,
                "deprecated": false,
                "description": "Checks for string arg1 is equal to string arg2 ignoring case and return the boolean result.",
                "functionId": "eq_ignore_case<string>",
                "functionLabel": "eq_ignore_case_string",
                "functionSignature": "boolean(string arg1, string arg2)",
                "functionDeclaration": "/* Checks for equal ignoring case */\nboolean (\n    string arg1,\n    string arg2)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_password": {
                "afwCamelCaseFunctionLabel": "afwToStringPassword",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringPassword",
                "category": "password",
                "dataType": "password",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts password arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<password>",
                "functionLabel": "to_string_password",
                "functionSignature": "string(password arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    password arg)",
                "parameters": [
                    {
                        "dataType": "password",
                        "description": "A password value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "intersection_anyURI": {
                "afwCamelCaseFunctionLabel": "afwIntersectionAnyURI",
                "brief": "Returns intersection of two lists",
                "camelCaseFunctionLabel": "intersectionAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 9,
                "deprecated": false,
                "description": "Returns a list of anyURI with the values that are common to both list of anyURI list1 and list2.",
                "functionId": "intersection<anyURI>",
                "functionLabel": "intersection_anyURI",
                "functionSignature": "(list anyURI)((list anyURI) list1, (list anyURI) list2)",
                "functionDeclaration": "/* Returns intersection of two lists */\n(list anyURI) (\n    (list anyURI) list1,\n    (list anyURI) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "anyURI",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "anyURI",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "anyURI",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subset_yearMonthDuration_1_0": {
                "afwCamelCaseFunctionLabel": "afwSubsetYearMonthDuration10",
                "brief": "Determines if the first list is a subset of second list",
                "camelCaseFunctionLabel": "subsetYearMonthDuration10",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Returns boolean true if the unique values in yearMonthDuration_1_0 list1 are all in yearMonthDuration_1_0 list2.",
                "functionId": "subset<yearMonthDuration_1_0>",
                "functionLabel": "subset_yearMonthDuration_1_0",
                "functionSignature": "boolean((list yearMonthDuration_1_0) list1, (list yearMonthDuration_1_0) list2)",
                "functionDeclaration": "/* Determines if the first list is a subset of second list */\nboolean (\n    (list yearMonthDuration_1_0) list1,\n    (list yearMonthDuration_1_0) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "yearMonthDuration_1_0",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "yearMonthDuration_1_0",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "normalize_space_string": {
                "afwCamelCaseFunctionLabel": "afwNormalizeSpaceString",
                "brief": "Trims whitespace from beginning and end",
                "camelCaseFunctionLabel": "normalizeSpaceString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 62,
                "deprecated": false,
                "description": "Remove whitespace from the beginning and end of a string value.",
                "functionId": "normalize_space<string>",
                "functionLabel": "normalize_space_string",
                "functionSignature": "string(string arg)",
                "functionDeclaration": "/* Trims whitespace from beginning and end */\nstring (\n    string arg)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eq_ignore_case": {
                "afwCamelCaseFunctionLabel": "afwEqIgnoreCase",
                "brief": "Checks for equal ignoring case",
                "camelCaseFunctionLabel": "eqIgnoreCase",
                "category": "polymorphic",
                "dataTypeMethodNumber": 59,
                "deprecated": false,
                "description": "Checks for <Type> arg1 is equal to <Type> arg2 ignoring case and return the boolean result.",
                "functionId": "eq_ignore_case",
                "functionLabel": "eq_ignore_case",
                "functionSignature": "<Type> boolean(Type arg1, Type arg2)",
                "functionDeclaration": "/* Checks for equal ignoring case */\n<Type> boolean (\n    Type arg1,\n    Type arg2)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subset": {
                "afwCamelCaseFunctionLabel": "afwSubset",
                "brief": "Determines if the first list is a subset of second list",
                "camelCaseFunctionLabel": "subset",
                "category": "polymorphic",
                "dataTypeMethodNumber": 24,
                "deprecated": false,
                "description": "Returns boolean true if the unique values in <Type> list1 are all in <Type> list2.",
                "functionId": "subset",
                "functionLabel": "subset",
                "functionSignature": "<Type> boolean(list list1, list list2)",
                "functionDeclaration": "/* Determines if the first list is a subset of second list */\n<Type> boolean (\n    list list1,\n    list list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": true
                    },
                    {
                        "dataType": "array",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": true
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "base64Binary",
                    "boolean",
                    "date",
                    "dateTime",
                    "dayTimeDuration",
                    "double",
                    "hexBinary",
                    "integer",
                    "rfc822Name",
                    "string",
                    "time",
                    "x500Name",
                    "yearMonthDuration"
                ],
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "rfc822Name": {
                "afwCamelCaseFunctionLabel": "afwRfc822Name",
                "brief": "Convert to data type rfc822Name",
                "camelCaseFunctionLabel": "rfc822Name",
                "category": "rfc822Name",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type rfc822Name returning rfc822Name result.",
                "functionId": "rfc822Name",
                "functionLabel": "rfc822Name",
                "functionSignature": "rfc822Name(any arg)",
                "functionDeclaration": "/* Convert to data type rfc822Name */\nrfc822Name (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "rfc822Name",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "modify_object": {
                "afwCamelCaseFunctionLabel": "afwModifyObject",
                "brief": "Modify adaptive object",
                "camelCaseFunctionLabel": "modifyObject",
                "category": "adaptor",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Modify an adaptive object.",
                "functionId": "modify_object",
                "functionLabel": "modify_object",
                "functionSignature": "(object _AdaptiveJournalEntry_)(string adaptorId, string objectType, string objectId, list entries, object journal?, object adaptorTypeSpecific?)",
                "functionDeclaration": "/* Modify adaptive object */\n(object _AdaptiveJournalEntry_) (\n    string adaptorId,\n    string objectType,\n    string objectId,\n    list entries,\n    object journal?,\n    object adaptorTypeSpecific?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Id of adaptor containing object to modify.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Id of adaptive object type of object to modify.",
                        "minArgs": -1,
                        "name": "objectType",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Id of object to modify.",
                        "minArgs": -1,
                        "name": "objectId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "description": "List of modifications.  Entries are of the form:\n\n    [\n        \"add_value\",\n        \"property name\" or [\"property name\", ... ],\n        value\n    ]\n\n    [\n        \"remove_property\",\n        \"property name\" or [\"property name\", ... ]\n    ]\n\n    [\n        \"remove_value\",\n        \"property name\" or [\"property name\", ... ],\n        value\n    ]\n\n    [\n        \"set_property\",\n        \"property name\" or [\"property name\", ... ],\n        value\n    ]",
                        "minArgs": -1,
                        "name": "entries",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "The properties of this object will be added to the associated journal entry.  Refer to /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names to avoid and for ones that have specific semantics.",
                        "minArgs": -1,
                        "name": "journal",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "This is an optional object parameter with an objectType determined by the adaptorType associated with the adaptorId parameter.  If the adaptorType supports this parameter, adaptor afw will have an adaptive object type with an id of:\n\n_AdaptiveAdaptorTypeSpecific_${adaptorType}_modify_object\n\nWhere ${adaptorType} is the adaptor type id.",
                        "minArgs": -1,
                        "name": "adaptorTypeSpecific",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveJournalEntry_",
                    "description": "Resulting journal entry.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "date": {
                "afwCamelCaseFunctionLabel": "afwDate",
                "brief": "Convert to data type date",
                "camelCaseFunctionLabel": "date",
                "category": "date",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type date returning date result.",
                "functionId": "date",
                "functionLabel": "date",
                "functionSignature": "date(any arg)",
                "functionDeclaration": "/* Convert to data type date */\ndate (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "date",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "contains": {
                "afwCamelCaseFunctionLabel": "afwContains",
                "brief": "Checks whether <Type> value includes a string",
                "camelCaseFunctionLabel": "contains",
                "category": "polymorphic",
                "dataTypeMethodNumber": 4,
                "deprecated": false,
                "description": "Checks whether <Type> value contains a <Type> and return the boolean result.",
                "functionId": "contains",
                "functionLabel": "contains",
                "functionSignature": "<Type> boolean(Type value, string subString)",
                "functionDeclaration": "/* Checks whether <Type> value includes a string */\n<Type> boolean /* Indicates if substring found */ (\n    Type value       /* <Type> value to search */,\n    string subString /* Substring to find */)",
                "parameters": [
                    {
                        "brief": "<Type> value to search",
                        "description": "<Type> value to search.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "brief": "Substring to find",
                        "dataType": "string",
                        "description": "Substring to find.",
                        "minArgs": -1,
                        "name": "subString",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "string"
                ],
                "pure": true,
                "returns": {
                    "brief": "Indicates if substring found",
                    "dataType": "boolean",
                    "description": "Indicates if substring is contained in value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "set_equals_base64Binary": {
                "afwCamelCaseFunctionLabel": "afwSetEqualsBase64Binary",
                "brief": "Checks whether two lists are subsets of each other",
                "camelCaseFunctionLabel": "setEqualsBase64Binary",
                "category": "base64Binary",
                "dataType": "base64Binary",
                "dataTypeMethodNumber": 21,
                "deprecated": false,
                "description": "Returns boolean true if base64Binary list1 and base64Binary list2 are subsets of each other and return the boolean result.",
                "functionId": "set_equals<base64Binary>",
                "functionLabel": "set_equals_base64Binary",
                "functionSignature": "boolean((list base64Binary) list1, (list base64Binary) list2)",
                "functionDeclaration": "/* Checks whether two lists are subsets of each other */\nboolean (\n    (list base64Binary) list1,\n    (list base64Binary) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "base64Binary",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "base64Binary",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subset_hexBinary": {
                "afwCamelCaseFunctionLabel": "afwSubsetHexBinary",
                "brief": "Determines if the first list is a subset of second list",
                "camelCaseFunctionLabel": "subsetHexBinary",
                "category": "hexBinary",
                "dataType": "hexBinary",
                "dataTypeMethodNumber": 24,
                "deprecated": false,
                "description": "Returns boolean true if the unique values in hexBinary list1 are all in hexBinary list2.",
                "functionId": "subset<hexBinary>",
                "functionLabel": "subset_hexBinary",
                "functionSignature": "boolean((list hexBinary) list1, (list hexBinary) list2)",
                "functionDeclaration": "/* Determines if the first list is a subset of second list */\nboolean (\n    (list hexBinary) list1,\n    (list hexBinary) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "hexBinary",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "hexBinary",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subtract_yearMonthDuration_1_0_date": {
                "afwCamelCaseFunctionLabel": "afwSubtractYearMonthDuration10Date",
                "brief": "Subtract numbers",
                "camelCaseFunctionLabel": "subtractYearMonthDuration10Date",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Subtract yearMonthDuration_1_0 arg2 from date arg1 and return the date result.",
                "functionId": "subtract_yearMonthDuration_1_0<date>",
                "functionLabel": "subtract_yearMonthDuration_1_0_date",
                "functionSignature": "date(date arg1, yearMonthDuration_1_0 arg2)",
                "functionDeclaration": "/* Subtract numbers */\ndate (\n    date arg1,\n    yearMonthDuration_1_0 arg2)",
                "parameters": [
                    {
                        "dataType": "date",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "yearMonthDuration_1_0",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "date",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "one_and_only_dateTime": {
                "afwCamelCaseFunctionLabel": "afwOneAndOnlyDateTime",
                "brief": "Converts a one value list to a dateTime value",
                "camelCaseFunctionLabel": "oneAndOnlyDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 15,
                "deprecated": false,
                "description": "This converts a list list  that contains one value to a data type dateTime value.",
                "functionId": "one_and_only<dateTime>",
                "functionLabel": "one_and_only_dateTime",
                "functionSignature": "dateTime((list list) list)",
                "functionDeclaration": "/* Converts a one value list to a dateTime value */\ndateTime (\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "dateTime",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "intersection_integer": {
                "afwCamelCaseFunctionLabel": "afwIntersectionInteger",
                "brief": "Returns intersection of two lists",
                "camelCaseFunctionLabel": "intersectionInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 9,
                "deprecated": false,
                "description": "Returns a list of integer with the values that are common to both list of integer list1 and list2.",
                "functionId": "intersection<integer>",
                "functionLabel": "intersection_integer",
                "functionSignature": "(list integer)((list integer) list1, (list integer) list2)",
                "functionDeclaration": "/* Returns intersection of two lists */\n(list integer) (\n    (list integer) list1,\n    (list integer) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "integer",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "integer",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "add_yearMonthDuration": {
                "afwCamelCaseFunctionLabel": "afwAddYearMonthDuration",
                "brief": "Add duration",
                "camelCaseFunctionLabel": "addYearMonthDuration",
                "category": "polymorphic",
                "dataTypeMethodNumber": 31,
                "deprecated": false,
                "description": "Add <Type> arg1 to yearMonthDuration arg2 and return the <Type> result.",
                "functionId": "add_yearMonthDuration",
                "functionLabel": "add_yearMonthDuration",
                "functionSignature": "<Type> Type(Type arg1, yearMonthDuration arg2)",
                "functionDeclaration": "/* Add duration */\n<Type> Type (\n    Type arg1,\n    yearMonthDuration arg2)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "yearMonthDuration",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "date",
                    "dateTime"
                ],
                "pure": true,
                "returns": {
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "decode_to_string_hexBinary": {
                "afwCamelCaseFunctionLabel": "afwDecodeToStringHexBinary",
                "brief": "Decode hexBinary to string",
                "camelCaseFunctionLabel": "decodeToStringHexBinary",
                "category": "hexBinary",
                "dataType": "hexBinary",
                "dataTypeMethodNumber": 29,
                "deprecated": false,
                "description": "Decode hexBinary value to string.  An error is thrown if decoded value is not valid UTF-8.",
                "functionId": "decode_to_string<hexBinary>",
                "functionLabel": "decode_to_string_hexBinary",
                "functionSignature": "string(hexBinary value)",
                "functionDeclaration": "/* Decode hexBinary to string */\nstring (\n    hexBinary value)",
                "parameters": [
                    {
                        "dataType": "hexBinary",
                        "description": "The hexBinary value to decode.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The decoded string.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_integer": {
                "afwCamelCaseFunctionLabel": "afwToStringInteger",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts integer arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<integer>",
                "functionLabel": "to_string_integer",
                "functionSignature": "string(integer arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    integer arg)",
                "parameters": [
                    {
                        "dataType": "integer",
                        "description": "A integer value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "compile_relaxed_json": {
                "afwCamelCaseFunctionLabel": "afwCompileRelaxedJson",
                "brief": "Compile relaxed JSON",
                "camelCaseFunctionLabel": "compileRelaxedJson",
                "category": "compiler",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Compile an adaptive relaxed JSON syntax string and return an adaptive value.",
                "functionId": "compile_relaxed_json",
                "functionLabel": "compile_relaxed_json",
                "functionSignature": "any(string json, any listing?)",
                "functionDeclaration": "/* Compile relaxed JSON */\nany (\n    string json,\n    any listing?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Adaptive relaxed JSON syntax string to compile.",
                        "minArgs": -1,
                        "name": "json",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "If specified, a compiler listing is produced instead of an unevaluated relaxed JSON value.\n\nThis parameter can be an integer between 0 and 10 of a string that is used for indentation.  If 0 is specified, no whitespace is added to the resulting string.  If 1 through 10 is specified, that number of spaces is used.",
                        "minArgs": -1,
                        "name": "listing",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "description": "An unevaluated relaxed JSON value ready for use by function evaluate() or a string containing the compiler listing.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "apply_object_options": {
                "afwCamelCaseFunctionLabel": "afwApplyObjectOptions",
                "brief": "Apply object options",
                "camelCaseFunctionLabel": "applyObjectOptions",
                "category": "object",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This will return an object with the specified object options applied.",
                "functionId": "apply_object_options",
                "functionLabel": "apply_object_options",
                "functionSignature": "object(object object, (object _AdaptiveObjectOptions_) options?)",
                "functionDeclaration": "/* Apply object options */\nobject (\n    object object,\n    (object _AdaptiveObjectOptions_) options?)",
                "parameters": [
                    {
                        "dataType": "object",
                        "description": "Object used to produce result.",
                        "minArgs": -1,
                        "name": "object",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveObjectOptions_",
                        "description": "Object options.  See /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more information.",
                        "minArgs": -1,
                        "name": "options",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "This is an object with object options applied.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "nex_yearMonthDuration": {
                "afwCamelCaseFunctionLabel": "afwNexYearMonthDuration",
                "brief": "Checks for not equal value or type",
                "camelCaseFunctionLabel": "nexYearMonthDuration",
                "category": "yearMonthDuration",
                "dataType": "yearMonthDuration",
                "dataTypeMethodNumber": 14,
                "deprecated": false,
                "description": "Checks for yearMonthDuration arg1 not equal to value or data type of arg2 and return the boolean result.",
                "functionId": "nex<yearMonthDuration>",
                "functionLabel": "nex_yearMonthDuration",
                "functionSignature": "boolean(yearMonthDuration arg1, yearMonthDuration arg2)",
                "functionDeclaration": "/* Checks for not equal value or type */\nboolean (\n    yearMonthDuration arg1,\n    yearMonthDuration arg2)",
                "op": "!==",
                "parameters": [
                    {
                        "dataType": "yearMonthDuration",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "yearMonthDuration",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subset_dayTimeDuration_1_0": {
                "afwCamelCaseFunctionLabel": "afwSubsetDayTimeDuration10",
                "brief": "Determines if the first list is a subset of second list",
                "camelCaseFunctionLabel": "subsetDayTimeDuration10",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Returns boolean true if the unique values in dayTimeDuration_1_0 list1 are all in dayTimeDuration_1_0 list2.",
                "functionId": "subset<dayTimeDuration_1_0>",
                "functionLabel": "subset_dayTimeDuration_1_0",
                "functionSignature": "boolean((list dayTimeDuration_1_0) list1, (list dayTimeDuration_1_0) list2)",
                "functionDeclaration": "/* Determines if the first list is a subset of second list */\nboolean (\n    (list dayTimeDuration_1_0) list1,\n    (list dayTimeDuration_1_0) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dayTimeDuration_1_0",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dayTimeDuration_1_0",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subset_rfc822Name": {
                "afwCamelCaseFunctionLabel": "afwSubsetRfc822Name",
                "brief": "Determines if the first list is a subset of second list",
                "camelCaseFunctionLabel": "subsetRfc822Name",
                "category": "rfc822Name",
                "dataType": "rfc822Name",
                "dataTypeMethodNumber": 24,
                "deprecated": false,
                "description": "Returns boolean true if the unique values in rfc822Name list1 are all in rfc822Name list2.",
                "functionId": "subset<rfc822Name>",
                "functionLabel": "subset_rfc822Name",
                "functionSignature": "boolean((list rfc822Name) list1, (list rfc822Name) list2)",
                "functionDeclaration": "/* Determines if the first list is a subset of second list */\nboolean (\n    (list rfc822Name) list1,\n    (list rfc822Name) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "rfc822Name",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "rfc822Name",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "all_of": {
                "afwCamelCaseFunctionLabel": "afwAllOf",
                "brief": "All values pass a test",
                "camelCaseFunctionLabel": "allOf",
                "category": "higher_order_array",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Returns true if all values in a list pass the predicate test.",
                "functionId": "all_of",
                "functionLabel": "all_of",
                "functionSignature": "boolean((function (boolean)(...)) predicate, ...any args)",
                "functionDeclaration": "/* All values pass a test */\nboolean (\n    (function (boolean)(...)) predicate,\n    ...any args)",
                "parameters": [
                    {
                        "dataType": "function",
                        "dataTypeParameter": "(boolean)(...)",
                        "description": "This function is called for each value in the first list in args or until false is returned.  If no calls return false, the result is true.",
                        "minArgs": -1,
                        "name": "predicate",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "These are the parameters passed to predicate with the exception that the first list is passed one value at a time.  At least one list is required.",
                        "minArgs": 1,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "regexp_match_rfc822Name": {
                "afwCamelCaseFunctionLabel": "afwRegexpMatchRfc822Name",
                "brief": "Search for a match using a regular expression",
                "camelCaseFunctionLabel": "regexpMatchRfc822Name",
                "category": "rfc822Name",
                "dataType": "rfc822Name",
                "dataTypeMethodNumber": 17,
                "deprecated": false,
                "description": "Checks whether rfc822Name value matches the regular expression regexp and return the boolean result.",
                "functionId": "regexp_match<rfc822Name>",
                "functionLabel": "regexp_match_rfc822Name",
                "functionSignature": "boolean(rfc822Name value, string regexp)",
                "functionDeclaration": "/* Search for a match using a regular expression */\nboolean (\n    rfc822Name value,\n    string regexp)",
                "parameters": [
                    {
                        "dataType": "rfc822Name",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "regexp",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "x500Name": {
                "afwCamelCaseFunctionLabel": "afwX500Name",
                "brief": "Convert to data type x500Name",
                "camelCaseFunctionLabel": "x500Name",
                "category": "x500Name",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type x500Name returning x500Name result.",
                "functionId": "x500Name",
                "functionLabel": "x500Name",
                "functionSignature": "x500Name(any arg)",
                "functionDeclaration": "/* Convert to data type x500Name */\nx500Name (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "x500Name",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_script": {
                "afwCamelCaseFunctionLabel": "afwIsScript",
                "brief": "Checks whether value is dataType script",
                "camelCaseFunctionLabel": "isScript",
                "category": "script",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type script.  Use is_list_of_script() instead to test for a list of script.",
                "functionId": "is<script>",
                "functionLabel": "is_script",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType script */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is script.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_rfc822Name": {
                "afwCamelCaseFunctionLabel": "afwToStringRfc822Name",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringRfc822Name",
                "category": "rfc822Name",
                "dataType": "rfc822Name",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts rfc822Name arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<rfc822Name>",
                "functionLabel": "to_string_rfc822Name",
                "functionSignature": "string(rfc822Name arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    rfc822Name arg)",
                "parameters": [
                    {
                        "dataType": "rfc822Name",
                        "description": "A rfc822Name value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_in": {
                "afwCamelCaseFunctionLabel": "afwIsIn",
                "brief": "Checks whether a value is in a list",
                "camelCaseFunctionLabel": "isIn",
                "category": "polymorphic",
                "dataTypeMethodNumber": 10,
                "deprecated": false,
                "description": "Checks whether <Type> value is in list of <Type> list and returns the boolean result.",
                "functionId": "is_in",
                "functionLabel": "is_in",
                "functionSignature": "<Type> boolean(Type value, list list)",
                "functionDeclaration": "/* Checks whether a value is in a list */\n<Type> boolean (\n    Type value,\n    list list)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": true
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "base64Binary",
                    "boolean",
                    "date",
                    "dateTime",
                    "dayTimeDuration",
                    "dnsName",
                    "double",
                    "hexBinary",
                    "integer",
                    "ipAddress",
                    "rfc822Name",
                    "string",
                    "time",
                    "x500Name",
                    "yearMonthDuration"
                ],
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "string": {
                "afwCamelCaseFunctionLabel": "afwString",
                "brief": "Convert to data type string",
                "camelCaseFunctionLabel": "string",
                "category": "string",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type string returning string result.",
                "functionId": "string",
                "functionLabel": "string",
                "functionSignature": "string(any arg)",
                "functionDeclaration": "/* Convert to data type string */\nstring (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "nex_dateTime": {
                "afwCamelCaseFunctionLabel": "afwNexDateTime",
                "brief": "Checks for not equal value or type",
                "camelCaseFunctionLabel": "nexDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 14,
                "deprecated": false,
                "description": "Checks for dateTime arg1 not equal to value or data type of arg2 and return the boolean result.",
                "functionId": "nex<dateTime>",
                "functionLabel": "nex_dateTime",
                "functionSignature": "boolean(dateTime arg1, dateTime arg2)",
                "functionDeclaration": "/* Checks for not equal value or type */\nboolean (\n    dateTime arg1,\n    dateTime arg2)",
                "op": "!==",
                "parameters": [
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "rule_deny_overrides": {
                "afwCamelCaseFunctionLabel": "afwRuleDenyOverrides",
                "brief": "Rule combining algorithm - deny_overrides",
                "camelCaseFunctionLabel": "ruleDenyOverrides",
                "category": "rule_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Rule combining algorithm for deny overrides.",
                "functionId": "rule_deny_overrides",
                "functionLabel": "rule_deny_overrides",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Rule combining algorithm - deny_overrides */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "floor_double": {
                "afwCamelCaseFunctionLabel": "afwFloorDouble",
                "brief": "Round downwards to nearest integer",
                "camelCaseFunctionLabel": "floorDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 44,
                "deprecated": false,
                "description": "Determine the largest integer that is smaller then or equal to the double arg and return the double result.",
                "functionId": "floor<double>",
                "functionLabel": "floor_double",
                "functionSignature": "double(double arg)",
                "functionDeclaration": "/* Round downwards to nearest integer */\ndouble (\n    double arg)",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "double",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_objectPath": {
                "afwCamelCaseFunctionLabel": "afwIsObjectPath",
                "brief": "Checks whether value is dataType objectPath",
                "camelCaseFunctionLabel": "isObjectPath",
                "category": "objectPath",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type objectPath.  Use is_list_of_objectPath() instead to test for a list of objectPath.",
                "functionId": "is<objectPath>",
                "functionLabel": "is_objectPath",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType objectPath */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is objectPath.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ne_integer": {
                "afwCamelCaseFunctionLabel": "afwNeInteger",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "neInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 13,
                "deprecated": false,
                "description": "Checks for integer arg1 is not equal to integer arg2 and return the boolean result.",
                "functionId": "ne<integer>",
                "functionLabel": "ne_integer",
                "functionSignature": "boolean(integer arg1, integer arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    integer arg1,\n    integer arg2)",
                "op": "!=",
                "parameters": [
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_rfc822Name": {
                "afwCamelCaseFunctionLabel": "afwBagRfc822Name",
                "brief": "Makes a list from args",
                "camelCaseFunctionLabel": "bagRfc822Name",
                "category": "rfc822Name",
                "dataType": "rfc822Name",
                "dataTypeMethodNumber": 2,
                "deprecated": false,
                "description": "Takes any number of rfc822Name args and returns a list of list.",
                "functionId": "bag<rfc822Name>",
                "functionLabel": "bag_rfc822Name",
                "functionSignature": "(list rfc822Name)(...(list rfc822Name) args)",
                "functionDeclaration": "/* Makes a list from args */\n(list rfc822Name) (\n    ...(list rfc822Name) args)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "rfc822Name",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "rfc822Name",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "set_equals_integer": {
                "afwCamelCaseFunctionLabel": "afwSetEqualsInteger",
                "brief": "Checks whether two lists are subsets of each other",
                "camelCaseFunctionLabel": "setEqualsInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 21,
                "deprecated": false,
                "description": "Returns boolean true if integer list1 and integer list2 are subsets of each other and return the boolean result.",
                "functionId": "set_equals<integer>",
                "functionLabel": "set_equals_integer",
                "functionSignature": "boolean((list integer) list1, (list integer) list2)",
                "functionDeclaration": "/* Checks whether two lists are subsets of each other */\nboolean (\n    (list integer) list1,\n    (list integer) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "integer",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "integer",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "convert_query_string_to_AdaptiveQueryCriteria": {
                "afwCamelCaseFunctionLabel": "afwConvertQueryStringToAdaptiveQueryCriteria",
                "brief": "Convert query string to _AdaptiveQueryCriteria_",
                "camelCaseFunctionLabel": "convertQueryStringToAdaptiveQueryCriteria",
                "category": "adaptor",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This function converts a query string to an _AdaptiveQueryCriteria_ object.",
                "functionId": "convert_query_string_to_AdaptiveQueryCriteria",
                "functionLabel": "convert_query_string_to_AdaptiveQueryCriteria",
                "functionSignature": "(object _AdaptiveQueryCriteria_)(string queryString, string adaptorId?, string objectType?)",
                "functionDeclaration": "/* Convert query string to _AdaptiveQueryCriteria_ */\n(object _AdaptiveQueryCriteria_) (\n    string queryString,\n    string adaptorId?,\n    string objectType?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "The query string to convert.",
                        "minArgs": -1,
                        "name": "queryString",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "This is the adaptorId of adaptor containing the objectType for validating and mapping this query.  If not specified, no validation or mapping will occur.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "This is the objectType used in conjunction with the adaptorId parameter.  This parameter is only allowed and is required if the adaptorId parameter is specified.",
                        "minArgs": -1,
                        "name": "objectType",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveQueryCriteria_",
                    "description": "An object type _AdaptiveQueryCriteria_ object representing query string.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_base64Binary": {
                "afwCamelCaseFunctionLabel": "afwIsBase64Binary",
                "brief": "Checks whether value is dataType base64Binary",
                "camelCaseFunctionLabel": "isBase64Binary",
                "category": "base64Binary",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type base64Binary.  Use is_list_of_base64Binary() instead to test for a list of base64Binary.",
                "functionId": "is<base64Binary>",
                "functionLabel": "is_base64Binary",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType base64Binary */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is base64Binary.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "policy_permit_unless_deny": {
                "afwCamelCaseFunctionLabel": "afwPolicyPermitUnlessDeny",
                "brief": "Policy combining algorithm - permit_unless_deny",
                "camelCaseFunctionLabel": "policyPermitUnlessDeny",
                "category": "policy_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Policy combining algorithm for permit unless deny.",
                "functionId": "policy_permit_unless_deny",
                "functionLabel": "policy_permit_unless_deny",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Policy combining algorithm - permit_unless_deny */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_boolean": {
                "afwCamelCaseFunctionLabel": "afwBagBoolean",
                "brief": "Makes a list from args",
                "camelCaseFunctionLabel": "bagBoolean",
                "category": "boolean",
                "dataType": "boolean",
                "dataTypeMethodNumber": 2,
                "deprecated": false,
                "description": "Takes any number of boolean args and returns a list of list.",
                "functionId": "bag<boolean>",
                "functionLabel": "bag_boolean",
                "functionSignature": "(list boolean)(...(list boolean) args)",
                "functionDeclaration": "/* Makes a list from args */\n(list boolean) (\n    ...(list boolean) args)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "boolean",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "nex": {
                "afwCamelCaseFunctionLabel": "afwNex",
                "brief": "Checks for not equal value or type",
                "camelCaseFunctionLabel": "nex",
                "category": "polymorphic",
                "dataTypeMethodNumber": 14,
                "deprecated": false,
                "description": "Checks for <Type> arg1 not equal to value or data type of arg2 and return the boolean result.",
                "functionId": "nex",
                "functionLabel": "nex",
                "functionSignature": "<Type> boolean(Type arg1, Type arg2)",
                "functionDeclaration": "/* Checks for not equal value or type */\n<Type> boolean (\n    Type arg1,\n    Type arg2)",
                "op": "!==",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "base64Binary",
                    "boolean",
                    "date",
                    "dateTime",
                    "dayTimeDuration",
                    "double",
                    "hexBinary",
                    "integer",
                    "rfc822Name",
                    "string",
                    "time",
                    "x500Name",
                    "yearMonthDuration"
                ],
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },            
            "set_equals_anyURI": {
                "afwCamelCaseFunctionLabel": "afwSetEqualsAnyURI",
                "brief": "Checks whether two lists are subsets of each other",
                "camelCaseFunctionLabel": "setEqualsAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 21,
                "deprecated": false,
                "description": "Returns boolean true if anyURI list1 and anyURI list2 are subsets of each other and return the boolean result.",
                "functionId": "set_equals<anyURI>",
                "functionLabel": "set_equals_anyURI",
                "functionSignature": "boolean((list anyURI) list1, (list anyURI) list2)",
                "functionDeclaration": "/* Checks whether two lists are subsets of each other */\nboolean (\n    (list anyURI) list1,\n    (list anyURI) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "anyURI",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "anyURI",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ne_double": {
                "afwCamelCaseFunctionLabel": "afwNeDouble",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "neDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 13,
                "deprecated": false,
                "description": "Checks for double arg1 is not equal to double arg2 and return the boolean result.",
                "functionId": "ne<double>",
                "functionLabel": "ne_double",
                "functionSignature": "boolean(double arg1, double arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    double arg1,\n    double arg2)",
                "op": "!=",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_dnsName": {
                "afwCamelCaseFunctionLabel": "afwBagDnsName",
                "brief": "Makes a list from args",
                "camelCaseFunctionLabel": "bagDnsName",
                "category": "dnsName",
                "dataType": "dnsName",
                "dataTypeMethodNumber": 2,
                "deprecated": false,
                "description": "Takes any number of dnsName args and returns a list of list.",
                "functionId": "bag<dnsName>",
                "functionLabel": "bag_dnsName",
                "functionSignature": "(list dnsName)(...(list dnsName) args)",
                "functionDeclaration": "/* Makes a list from args */\n(list dnsName) (\n    ...(list dnsName) args)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dnsName",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "dnsName",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_string": {
                "afwCamelCaseFunctionLabel": "afwToStringString",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts string arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<string>",
                "functionLabel": "to_string_string",
                "functionSignature": "string(string arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    string arg)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "A string value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "slice": {
                "afwCamelCaseFunctionLabel": "afwSlice",
                "brief": "Return a consecutive slice of values from a list",
                "camelCaseFunctionLabel": "slice",
                "category": "array",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This function extracts a consecutive slice of values from a list.",
                "functionId": "slice",
                "functionLabel": "slice",
                "functionSignature": "list(list list, integer startIndex?, integer endIndex?)",
                "functionDeclaration": "/* Return a consecutive slice of values from a list */\nlist (\n    list list,\n    integer startIndex?,\n    integer endIndex?)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "The list to slice.",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "This is the zero based starting index.  Use negative number to index from the end of the list.  If not specified, an index of 0 is assumed.",
                        "minArgs": -1,
                        "name": "startIndex",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "This is the zero based ending index.  If positive, this is one more than the index of the last value to include in the list.  If negative, the index is from the end of the list.  If not specified, the slice is from startIndex up to and including the end of the list.",
                        "minArgs": -1,
                        "name": "endIndex",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "description": "A list containing the selected values.  If all of the values are the same data type, the list will be a list of that data type.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_xpathExpression": {
                "afwCamelCaseFunctionLabel": "afwIsXpathExpression",
                "brief": "Checks whether value is dataType xpathExpression",
                "camelCaseFunctionLabel": "isXpathExpression",
                "category": "xpathExpression",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type xpathExpression.  Use is_list_of_xpathExpression() instead to test for a list of xpathExpression.",
                "functionId": "is<xpathExpression>",
                "functionLabel": "is_xpathExpression",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType xpathExpression */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is xpathExpression.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "starts_with_string": {
                "afwCamelCaseFunctionLabel": "afwStartsWithString",
                "brief": "Checks whether value starts with a string",
                "camelCaseFunctionLabel": "startsWithString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 23,
                "deprecated": false,
                "description": "Checks whether string value starts with a subString and return the boolean result.",
                "functionId": "starts_with<string>",
                "functionLabel": "starts_with_string",
                "functionSignature": "boolean(string value, string subString)",
                "functionDeclaration": "/* Checks whether value starts with a string */\nboolean (\n    string value,\n    string subString)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "subString",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "at_least_one_member_of_yearMonthDuration": {
                "afwCamelCaseFunctionLabel": "afwAtLeastOneMemberOfYearMonthDuration",
                "brief": "Checks for at least one value in common",
                "camelCaseFunctionLabel": "atLeastOneMemberOfYearMonthDuration",
                "category": "yearMonthDuration",
                "dataType": "yearMonthDuration",
                "dataTypeMethodNumber": 1,
                "deprecated": false,
                "description": "Returns boolean true if at least one value in yearMonthDuration list1 is in yearMonthDuration list2.",
                "functionId": "at_least_one_member_of<yearMonthDuration>",
                "functionLabel": "at_least_one_member_of_yearMonthDuration",
                "functionSignature": "boolean((list yearMonthDuration) list1, (list yearMonthDuration) list2)",
                "functionDeclaration": "/* Checks for at least one value in common */\nboolean (\n    (list yearMonthDuration) list1,\n    (list yearMonthDuration) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "yearMonthDuration",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "yearMonthDuration",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "policy_ordered_deny_overrides": {
                "afwCamelCaseFunctionLabel": "afwPolicyOrderedDenyOverrides",
                "brief": "Policy combining algorithm - deny_overrides",
                "camelCaseFunctionLabel": "policyOrderedDenyOverrides",
                "category": "policy_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Policy combining algorithm for deny overrides.",
                "functionId": "policy_ordered_deny_overrides",
                "functionLabel": "policy_ordered_deny_overrides",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Policy combining algorithm - deny_overrides */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "lt_string": {
                "afwCamelCaseFunctionLabel": "afwLtString",
                "brief": "Checks for less than",
                "camelCaseFunctionLabel": "ltString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 35,
                "deprecated": false,
                "description": "Checks for string arg1 is less that string arg2 and return the boolean result.",
                "functionId": "lt<string>",
                "functionLabel": "lt_string",
                "functionSignature": "boolean(string arg1, string arg2)",
                "functionDeclaration": "/* Checks for less than */\nboolean (\n    string arg1,\n    string arg2)",
                "op": "<",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "url_decode": {
                "afwCamelCaseFunctionLabel": "afwUrlDecode",
                "brief": "URI decode",
                "camelCaseFunctionLabel": "urlDecode",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 75,
                "deprecated": false,
                "description": "URL decode a value or bag of values.",
                "functionId": "url_decode",
                "functionLabel": "url_decode",
                "functionSignature": "string(string encoded)",
                "functionDeclaration": "/* URI decode */\nstring (\n    string encoded)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "URL decode a single string or a bag of string.",
                        "minArgs": -1,
                        "name": "encoded",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "A string or bag of strings.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "reduce": {
                "afwCamelCaseFunctionLabel": "afwReduce",
                "brief": "Reduce values of a list to a single value",
                "camelCaseFunctionLabel": "reduce",
                "category": "higher_order_array",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Reduce calls functor for each value in list with two parameters, accumulator and value, and must return a value of any dataType.  Parameter accumulator is the reduce() accumulator parameter value on first call and the return value of previous functor() call on subsequent calls.  The dataType of the return value should normally be the same as accumulator, but this is not required.",
                "functionId": "reduce",
                "functionLabel": "reduce",
                "functionSignature": "any((function ()(accumulator, value)) functor, any accumulator, list list)",
                "functionDeclaration": "/* Reduce values of a list to a single value */\nany (\n    (function ()(accumulator, value)) functor,\n    any accumulator,\n    list list)",
                "parameters": [
                    {
                        "dataType": "function",
                        "dataTypeParameter": "()(accumulator, value)",
                        "description": "This function is called for each value in a list.  The returned value is passed as the accumulator parameter on the next call to functor().",
                        "minArgs": -1,
                        "name": "functor",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "This is an initial accumulator value passed to functor().  Normally, the dataType of accumulator will be the dataTape for the reduce() return value, but this is not required.",
                        "minArgs": -1,
                        "name": "accumulator",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "description": "This is a list to be reduced.",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "description": "This is the final return value from functor() or the accumulator parameter value if list is empty.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ge_integer": {
                "afwCamelCaseFunctionLabel": "afwGeInteger",
                "brief": "Checks for greater than or equal",
                "camelCaseFunctionLabel": "geInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 32,
                "deprecated": false,
                "description": "Checks for integer arg1 is greater than or equal to integer arg2 and return the boolean result.",
                "functionId": "ge<integer>",
                "functionLabel": "ge_integer",
                "functionSignature": "boolean(integer arg1, integer arg2)",
                "functionDeclaration": "/* Checks for greater than or equal */\nboolean (\n    integer arg1,\n    integer arg2)",
                "op": ">=",
                "parameters": [
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "one_and_only_base64Binary": {
                "afwCamelCaseFunctionLabel": "afwOneAndOnlyBase64Binary",
                "brief": "Converts a one value list to a base64Binary value",
                "camelCaseFunctionLabel": "oneAndOnlyBase64Binary",
                "category": "base64Binary",
                "dataType": "base64Binary",
                "dataTypeMethodNumber": 15,
                "deprecated": false,
                "description": "This converts a list list  that contains one value to a data type base64Binary value.",
                "functionId": "one_and_only<base64Binary>",
                "functionLabel": "one_and_only_base64Binary",
                "functionSignature": "base64Binary((list list) list)",
                "functionDeclaration": "/* Converts a one value list to a base64Binary value */\nbase64Binary (\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "base64Binary",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "encode_as_hexBinary_string": {
                "afwCamelCaseFunctionLabel": "afwEncodeAsHexBinaryString",
                "brief": "Encode to a hexBinary value",
                "camelCaseFunctionLabel": "encodeAsHexBinaryString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 58,
                "deprecated": false,
                "description": "Encode a value as a hexBinary.  The effect is to create a hexBinary value with an internal value of the value passed.",
                "functionId": "encode_as_hexBinary<string>",
                "functionLabel": "encode_as_hexBinary_string",
                "functionSignature": "hexBinary(string value)",
                "functionDeclaration": "/* Encode to a hexBinary value */\nhexBinary (\n    string value)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "The string value to encode.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "hexBinary",
                    "description": "A hexBinary value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "return": {
                "afwCamelCaseFunctionLabel": "afwReturn",
                "brief": "Return from the outermost structured block",
                "camelCaseFunctionLabel": "return",
                "category": "script",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Return from the outermost structured block.  If the expression of a lambda function is a block function, this will effectively return from the lambda function.  If called outside of a structured block, an error is thrown.",
                "functionId": "return",
                "functionLabel": "return",
                "functionSignature": "any(any value?)",
                "functionDeclaration": "/* Return from the outermost structured block */\nany (\n    any value?)",
                "parameters": [
                    {
                        "description": "The value to evaluate that the outermost block will return.  If not specified, the last evaluated value or a null value will be returned.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "description": "This function returns from the outermost structured block with the last evaluated value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 10
            },
            "get_object_with_uri": {
                "afwCamelCaseFunctionLabel": "afwGetObjectWithUri",
                "brief": "Get adaptive object with URI",
                "camelCaseFunctionLabel": "getObjectWithUri",
                "category": "adaptor",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Get an object with a given URI.",
                "functionId": "get_object_with_uri",
                "functionLabel": "get_object_with_uri",
                "functionSignature": "object(anyURI uri, (object _AdaptiveObjectOptions_) options?, object adaptorTypeSpecific?)",
                "functionDeclaration": "/* Get adaptive object with URI */\nobject (\n    anyURI uri,\n    (object _AdaptiveObjectOptions_) options?,\n    object adaptorTypeSpecific?)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "description": "URI of object to retrieve.  If a URI begins with a single slash ('/'), it is the local object path.",
                        "minArgs": -1,
                        "name": "uri",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveObjectOptions_",
                        "description": "Object view options.  See /afw/_AdaptiveObjectType_/_AdaptiveObjectOptions_ for more information.",
                        "minArgs": -1,
                        "name": "options",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "This is an optional object parameter with an objectType determined by the adaptorType associated with the adaptorId parameter.  If the adaptorType supports this parameter, adaptor afw will have an adaptive object type with an id of:\n\n_AdaptiveAdaptorTypeSpecific_${adaptorType}_get_object\n\nwhere ${adaptorType} is the adaptor type id.",
                        "minArgs": -1,
                        "name": "adaptorTypeSpecific",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Object retrieved or NULL if not found.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "nex_string": {
                "afwCamelCaseFunctionLabel": "afwNexString",
                "brief": "Checks for not equal value or type",
                "camelCaseFunctionLabel": "nexString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 14,
                "deprecated": false,
                "description": "Checks for string arg1 not equal to value or data type of arg2 and return the boolean result.",
                "functionId": "nex<string>",
                "functionLabel": "nex_string",
                "functionSignature": "boolean(string arg1, string arg2)",
                "functionDeclaration": "/* Checks for not equal value or type */\nboolean (\n    string arg1,\n    string arg2)",
                "op": "!==",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subtract_yearMonthDuration_date": {
                "afwCamelCaseFunctionLabel": "afwSubtractYearMonthDurationDate",
                "brief": "Subtract numbers",
                "camelCaseFunctionLabel": "subtractYearMonthDurationDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 39,
                "deprecated": false,
                "description": "Subtract yearMonthDuration arg2 from date arg1 and return the date result.",
                "functionId": "subtract_yearMonthDuration<date>",
                "functionLabel": "subtract_yearMonthDuration_date",
                "functionSignature": "date(date arg1, yearMonthDuration arg2)",
                "functionDeclaration": "/* Subtract numbers */\ndate (\n    date arg1,\n    yearMonthDuration arg2)",
                "parameters": [
                    {
                        "dataType": "date",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "yearMonthDuration",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "date",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "split_string": {
                "afwCamelCaseFunctionLabel": "afwSplitString",
                "brief": "Split at a separator",
                "camelCaseFunctionLabel": "splitString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 22,
                "deprecated": false,
                "description": "Split string value into an list of strings using a separator.",
                "functionId": "split<string>",
                "functionLabel": "split_string",
                "functionSignature": "list(string value, string separator?, integer limit?)",
                "functionDeclaration": "/* Split at a separator */\nlist (\n    string value,\n    string separator?,\n    integer limit?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "The string value to split.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "The separator to use.  If this is an empty string or separator is not specified, the value is split between characters.",
                        "minArgs": -1,
                        "name": "separator",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "This is the maximum number of splits.  Any remaining part of value is ignored.",
                        "minArgs": -1,
                        "name": "limit",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "description": "An list of strings.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subset_dateTime": {
                "afwCamelCaseFunctionLabel": "afwSubsetDateTime",
                "brief": "Determines if the first list is a subset of second list",
                "camelCaseFunctionLabel": "subsetDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 24,
                "deprecated": false,
                "description": "Returns boolean true if the unique values in dateTime list1 are all in dateTime list2.",
                "functionId": "subset<dateTime>",
                "functionLabel": "subset_dateTime",
                "functionSignature": "boolean((list dateTime) list1, (list dateTime) list2)",
                "functionDeclaration": "/* Determines if the first list is a subset of second list */\nboolean (\n    (list dateTime) list1,\n    (list dateTime) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dateTime",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dateTime",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "model_default_replace_object_action": {
                "afwCamelCaseFunctionLabel": "afwModelDefaultReplaceObjectAction",
                "brief": "Produce a default _AdaptiveAction_ object for an replace object request to a model adaptor.",
                "camelCaseFunctionLabel": "modelDefaultReplaceObjectAction",
                "category": "model",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This function returns a _AdaptiveAction_ object for the default action performed if a onReplaceObject parameter is not specified on the associated _AdaptiveModelObjectType_.  The action is not performed, but be aware that functions called while producing the _AdaptiveAction_ object may cause side effects.  This function can be called as part of a onReplace expression or for testing.",
                "functionId": "model_default_replace_object_action",
                "functionLabel": "model_default_replace_object_action",
                "functionSignature": "(object _AdaptiveAction_)(string adaptorId, string objectType, string objectId, object object, string modelId?, (object _AdaptiveContextType_) context?)",
                "functionDeclaration": "/* Produce a default _AdaptiveAction_ object for an replace object request to a model adaptor. */\n(object _AdaptiveAction_) (\n    string adaptorId,\n    string objectType,\n    string objectId,\n    object object,\n    string modelId?,\n    (object _AdaptiveContextType_) context?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "This is the adaptorId of a model adaptor.  Variable custom::adaptorId can be used to access this value in model expressions.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "This is the adaptive object type of object being replaced.  Variable custom::objectType can be used to access this value in model expressions.",
                        "minArgs": -1,
                        "name": "objectType",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "The objectId of object to replace.  Variable custom::objectId can be used to access this value in model expressions.",
                        "minArgs": -1,
                        "name": "objectId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "This is the object to replace.  Variable custom::object can be used to access this value in model expressions.",
                        "minArgs": -1,
                        "name": "object",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "This specifics a modelId of model to use for producing results.  If not specified, the adaptor's current model will be used.",
                        "minArgs": -1,
                        "name": "modelId",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveContextType_",
                        "description": "This specifies additional context information available to model expressions.",
                        "minArgs": -1,
                        "name": "context",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveAction_",
                    "description": "The default action object.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "random_digits": {
                "afwCamelCaseFunctionLabel": "afwRandomDigits",
                "brief": "Generate random decimal digits",
                "camelCaseFunctionLabel": "randomDigits",
                "category": "random",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Generate a string containing a specified number of random decimal digits.",
                "functionId": "random_digits",
                "functionLabel": "random_digits",
                "functionSignature": "string(integer numberOfDigits)",
                "functionDeclaration": "/* Generate random decimal digits */\nstring (\n    integer numberOfDigits)",
                "parameters": [
                    {
                        "dataType": "integer",
                        "description": "The number (1-18) of digits to generate.",
                        "minArgs": -1,
                        "name": "numberOfDigits",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "string",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_ipAddress": {
                "afwCamelCaseFunctionLabel": "afwBagIpAddress",
                "brief": "Makes a list from args",
                "camelCaseFunctionLabel": "bagIpAddress",
                "category": "ipAddress",
                "dataType": "ipAddress",
                "dataTypeMethodNumber": 2,
                "deprecated": false,
                "description": "Takes any number of ipAddress args and returns a list of list.",
                "functionId": "bag<ipAddress>",
                "functionLabel": "bag_ipAddress",
                "functionSignature": "(list ipAddress)(...(list ipAddress) args)",
                "functionDeclaration": "/* Makes a list from args */\n(list ipAddress) (\n    ...(list ipAddress) args)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "ipAddress",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "ipAddress",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "mod_integer": {
                "afwCamelCaseFunctionLabel": "afwModInteger",
                "brief": "Remainder of dividing numbers",
                "camelCaseFunctionLabel": "modInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 53,
                "deprecated": false,
                "description": "Divide integer dividend by integer divisor and return the integer remainder.",
                "functionId": "mod<integer>",
                "functionLabel": "mod_integer",
                "functionSignature": "integer(integer dividend, integer divisor)",
                "functionDeclaration": "/* Remainder of dividing numbers */\ninteger (\n    integer dividend,\n    integer divisor)",
                "op": "%",
                "parameters": [
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "dividend",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "divisor",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "evaluate_expression_tuple": {
                "afwCamelCaseFunctionLabel": "afwEvaluateExpressionTuple",
                "brief": "Evaluate expression tuple",
                "camelCaseFunctionLabel": "evaluateExpressionTuple",
                "category": "compiler",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Compile a string containing adaptive expression tuple syntax and then evaluate the result.",
                "functionId": "evaluate_expression_tuple",
                "functionLabel": "evaluate_expression_tuple",
                "functionSignature": "any(string expression_tuple, (object _AdaptiveTemplatePropertiesObjects_) additionalContext?)",
                "functionDeclaration": "/* Evaluate expression tuple */\nany (\n    string expression_tuple,\n    (object _AdaptiveTemplatePropertiesObjects_) additionalContext?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Expression tuple to compile and evaluate.",
                        "minArgs": -1,
                        "name": "expression_tuple",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveTemplatePropertiesObjects_",
                        "description": "Additional context to use first during evaluation.",
                        "minArgs": -1,
                        "name": "additionalContext",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "description": "Evaluated adaptive expression tuple.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_x500Name": {
                "afwCamelCaseFunctionLabel": "afwToX500Name",
                "brief": "Converts string to x500Name",
                "camelCaseFunctionLabel": "toX500Name",
                "category": "polymorphic",
                "dataTypeMethodNumber": 73,
                "deprecated": false,
                "description": "Converts <Type> arg to x500Name.",
                "functionId": "to_x500Name",
                "functionLabel": "to_x500Name",
                "functionSignature": "<Type> x500Name(Type arg)",
                "functionDeclaration": "/* Converts string to x500Name */\n<Type> x500Name (\n    Type arg)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "x500Name",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_string": {
                "afwCamelCaseFunctionLabel": "afwIsString",
                "brief": "Checks whether value is dataType string",
                "camelCaseFunctionLabel": "isString",
                "category": "string",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type string.  Use is_list_of_string() instead to test for a list of string.",
                "functionId": "is<string>",
                "functionLabel": "is_string",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType string */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is string.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "negative": {
                "afwCamelCaseFunctionLabel": "afwNegative",
                "brief": "Negative of a number",
                "camelCaseFunctionLabel": "negative",
                "category": "polymorphic",
                "dataTypeMethodNumber": 46,
                "deprecated": false,
                "description": "Return negative of <Type> arg.",
                "functionId": "negative",
                "functionLabel": "negative",
                "functionSignature": "<Type> Type(Type arg)",
                "functionDeclaration": "/* Negative of a number */\n<Type> Type (\n    Type arg)",
                "op": "-",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "double",
                    "integer"
                ],
                "pure": true,
                "returns": {
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subset_date": {
                "afwCamelCaseFunctionLabel": "afwSubsetDate",
                "brief": "Determines if the first list is a subset of second list",
                "camelCaseFunctionLabel": "subsetDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 24,
                "deprecated": false,
                "description": "Returns boolean true if the unique values in date list1 are all in date list2.",
                "functionId": "subset<date>",
                "functionLabel": "subset_date",
                "functionSignature": "boolean((list date) list1, (list date) list2)",
                "functionDeclaration": "/* Determines if the first list is a subset of second list */\nboolean (\n    (list date) list1,\n    (list date) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "date",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "date",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "at_least_one_member_of_double": {
                "afwCamelCaseFunctionLabel": "afwAtLeastOneMemberOfDouble",
                "brief": "Checks for at least one value in common",
                "camelCaseFunctionLabel": "atLeastOneMemberOfDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 1,
                "deprecated": false,
                "description": "Returns boolean true if at least one value in double list1 is in double list2.",
                "functionId": "at_least_one_member_of<double>",
                "functionLabel": "at_least_one_member_of_double",
                "functionSignature": "boolean((list double) list1, (list double) list2)",
                "functionDeclaration": "/* Checks for at least one value in common */\nboolean (\n    (list double) list1,\n    (list double) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "double",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "double",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "journal_get_next_for_consumer_after_cursor": {
                "afwCamelCaseFunctionLabel": "afwJournalGetNextForConsumerAfterCursor",
                "brief": "Get next journal entry for consumer after cursor",
                "camelCaseFunctionLabel": "journalGetNextForConsumerAfterCursor",
                "category": "journal",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Get the next journal entry for a consumer referenced by the consumer_id after the one specified by the entry_cursor parameter. The limit parameter specifies the maximum number of entries to scan for an applicable entry for consumer before returning.\n\nThis option will set response properties \"entry\" and \"cursor\" if an applicable entry is retrieved.\n\nThe properties of the _AdaptiveProvisioningPeer_ object associated with the consumer_id are used in the following way:\n\nThe consumerFilter expression is used to determine if an entry is applicable.\n\nUnlike option get_next_for_consumer, no other properties are referenced or modified.",
                "functionId": "journal_get_next_for_consumer_after_cursor",
                "functionLabel": "journal_get_next_for_consumer_after_cursor",
                "functionSignature": "object(string adaptorId, string consumerId, string cursor, integer limit?)",
                "functionDeclaration": "/* Get next journal entry for consumer after cursor */\nobject (\n    string adaptorId,\n    string consumerId,\n    string cursor,\n    integer limit?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Id of adaptor.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "The consumerId property value of the associated _AdaptiveProvisioningPeer_ object.",
                        "minArgs": -1,
                        "name": "consumerId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Journal entry cursor.",
                        "minArgs": -1,
                        "name": "cursor",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "The maximum number of entries that will be scanned for an entry where the consumerFilter expression in the associated _AdaptiveProvisioningPeer_ object evaluates to true.",
                        "minArgs": -1,
                        "name": "limit",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Response object.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "add_dayTimeDuration": {
                "afwCamelCaseFunctionLabel": "afwAddDayTimeDuration",
                "brief": "Add duration",
                "camelCaseFunctionLabel": "addDayTimeDuration",
                "category": "polymorphic",
                "dataTypeMethodNumber": 30,
                "deprecated": false,
                "description": "Add <Type> arg1 to dayTimeDuration arg2 and return the <Type> result.",
                "functionId": "add_dayTimeDuration",
                "functionLabel": "add_dayTimeDuration",
                "functionSignature": "<Type> Type(Type arg1, dayTimeDuration arg2)",
                "functionDeclaration": "/* Add duration */\n<Type> Type (\n    Type arg1,\n    dayTimeDuration arg2)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "dayTimeDuration",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "dateTime"
                ],
                "pure": true,
                "returns": {
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "le_dateTime": {
                "afwCamelCaseFunctionLabel": "afwLeDateTime",
                "brief": "Checks for less than or equal",
                "camelCaseFunctionLabel": "leDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 34,
                "deprecated": false,
                "description": "Checks for dateTime arg1 is less than or equal to dateTime arg2 and return the boolean result.\n\nIf a dateTime value does not include a time-zone value, then the local time-zone value will be assigned.",
                "functionId": "le<dateTime>",
                "functionLabel": "le_dateTime",
                "functionSignature": "boolean(dateTime arg1, any arg2)",
                "functionDeclaration": "/* Checks for less than or equal */\nboolean (\n    dateTime arg1,\n    any arg2)",
                "op": "<=",
                "parameters": [
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "lt_date": {
                "afwCamelCaseFunctionLabel": "afwLtDate",
                "brief": "Checks for less than",
                "camelCaseFunctionLabel": "ltDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 35,
                "deprecated": false,
                "description": "Checks for date arg1 is less that date arg2 and return the boolean result.\n\nIf a date value does not include a time-zone value, then the local time-zone value will be assigned.",
                "functionId": "lt<date>",
                "functionLabel": "lt_date",
                "functionSignature": "boolean(date arg1, date arg2)",
                "functionDeclaration": "/* Checks for less than */\nboolean (\n    date arg1,\n    date arg2)",
                "op": "<",
                "parameters": [
                    {
                        "dataType": "date",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "date",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_objectId": {
                "afwCamelCaseFunctionLabel": "afwIsObjectId",
                "brief": "Checks whether value is dataType objectId",
                "camelCaseFunctionLabel": "isObjectId",
                "category": "objectId",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type objectId.  Use is_list_of_objectId() instead to test for a list of objectId.",
                "functionId": "is<objectId>",
                "functionLabel": "is_objectId",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType objectId */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is objectId.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_size_yearMonthDuration_1_0": {
                "afwCamelCaseFunctionLabel": "afwBagSizeYearMonthDuration10",
                "brief": "Returns the number of values in a bag",
                "camelCaseFunctionLabel": "bagSizeYearMonthDuration10",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "This returns the integer number of values in list bag arg.",
                "functionId": "bag_size<yearMonthDuration_1_0>",
                "functionLabel": "bag_size_yearMonthDuration_1_0",
                "functionSignature": "integer((list list) arg)",
                "functionDeclaration": "/* Returns the number of values in a bag */\ninteger (\n    (list list) arg)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "min": {
                "afwCamelCaseFunctionLabel": "afwMin",
                "brief": "Minimum value",
                "camelCaseFunctionLabel": "min",
                "category": "polymorphic",
                "dataTypeMethodNumber": 37,
                "deprecated": false,
                "description": "Return the <Type> arg that is less than or equal to the others.",
                "functionId": "min",
                "functionLabel": "min",
                "functionSignature": "<Type> Type(...Type args)",
                "functionDeclaration": "/* Minimum value */\n<Type> Type (\n    ...Type args)",
                "parameters": [
                    {
                        "minArgs": 1,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "date",
                    "dateTime",
                    "double",
                    "integer",
                    "string",
                    "time"
                ],
                "pure": true,
                "returns": {
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eq_time": {
                "afwCamelCaseFunctionLabel": "afwEqTime",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "eqTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 6,
                "deprecated": false,
                "description": "Checks for time arg1 is equal to time arg2 and return the boolean result.",
                "functionId": "eq<time>",
                "functionLabel": "eq_time",
                "functionSignature": "boolean(time arg1, time arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    time arg1,\n    time arg2)",
                "op": "==",
                "parameters": [
                    {
                        "dataType": "time",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "time",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "meta": {
                "afwCamelCaseFunctionLabel": "afwMeta",
                "brief": "Return the meta object about an adaptive value",
                "camelCaseFunctionLabel": "meta",
                "category": "value",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This function returns an object containing meta information for an adaptive value.",
                "functionId": "meta",
                "functionLabel": "meta",
                "functionSignature": "object(any value)",
                "functionDeclaration": "/* Return the meta object about an adaptive value */\nobject (\n    any value)",
                "parameters": [
                    {
                        "description": "This is the adaptive value whose meta object is to be returned.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "object",
                    "description": "An object containing the meta information for the adaptive value.  The objectType of this object is normally _AdaptiveValueMeta_ or one of its descendents.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_dateTime": {
                "afwCamelCaseFunctionLabel": "afwIsDateTime",
                "brief": "Checks whether value is dataType dateTime",
                "camelCaseFunctionLabel": "isDateTime",
                "category": "dateTime",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type dateTime.  Use is_list_of_dateTime() instead to test for a list of dateTime.",
                "functionId": "is<dateTime>",
                "functionLabel": "is_dateTime",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType dateTime */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is dateTime.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "intersection_dayTimeDuration_1_0": {
                "afwCamelCaseFunctionLabel": "afwIntersectionDayTimeDuration10",
                "brief": "Returns intersection of two lists",
                "camelCaseFunctionLabel": "intersectionDayTimeDuration10",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Returns dayTimeDuration_1_0 list with the values that are common to both dayTimeDuration_1_0 list1 and list2.",
                "functionId": "intersection<dayTimeDuration_1_0>",
                "functionLabel": "intersection_dayTimeDuration_1_0",
                "functionSignature": "(list dayTimeDuration_1_0)((list dayTimeDuration_1_0) list1, (list dayTimeDuration_1_0) list2)",
                "functionDeclaration": "/* Returns intersection of two lists */\n(list dayTimeDuration_1_0) (\n    (list dayTimeDuration_1_0) list1,\n    (list dayTimeDuration_1_0) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dayTimeDuration_1_0",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dayTimeDuration_1_0",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "dayTimeDuration_1_0",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "at_least_one_member_of_dayTimeDuration_1_0": {
                "afwCamelCaseFunctionLabel": "afwAtLeastOneMemberOfDayTimeDuration10",
                "brief": "Checks for at least one value in common",
                "camelCaseFunctionLabel": "atLeastOneMemberOfDayTimeDuration10",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Returns boolean true if at least one value in dayTimeDuration_1_0 list1 is in dayTimeDuration_1_0 list2.",
                "functionId": "at_least_one_member_of<dayTimeDuration_1_0>",
                "functionLabel": "at_least_one_member_of_dayTimeDuration_1_0",
                "functionSignature": "boolean((list dayTimeDuration_1_0) list1, (list dayTimeDuration_1_0) list2)",
                "functionDeclaration": "/* Checks for at least one value in common */\nboolean (\n    (list dayTimeDuration_1_0) list1,\n    (list dayTimeDuration_1_0) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dayTimeDuration_1_0",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dayTimeDuration_1_0",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "intersection_string": {
                "afwCamelCaseFunctionLabel": "afwIntersectionString",
                "brief": "Returns intersection of two lists",
                "camelCaseFunctionLabel": "intersectionString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 9,
                "deprecated": false,
                "description": "Returns a list of string with the values that are common to both list of string list1 and list2.",
                "functionId": "intersection<string>",
                "functionLabel": "intersection_string",
                "functionSignature": "(list string)((list string) list1, (list string) list2)",
                "functionDeclaration": "/* Returns intersection of two lists */\n(list string) (\n    (list string) list1,\n    (list string) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "string",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "string",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "string",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "join": {
                "afwCamelCaseFunctionLabel": "afwJoin",
                "brief": "Join the string values of list elements",
                "camelCaseFunctionLabel": "join",
                "category": "array",
                "dataType": "array",
                "dataTypeMethodNumber": 55,
                "deprecated": false,
                "description": "Concatenate the string values of the elements of a list with a separator.",
                "functionId": "join",
                "functionLabel": "join",
                "functionSignature": "string(list value, string separator?)",
                "functionDeclaration": "/* Join the string values of list elements */\nstring (\n    list value,\n    string separator?)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "A list of values of any data type.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "The separator to use.  If not specified, a comma (,) is used.",
                        "minArgs": -1,
                        "name": "separator",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "Joined list values.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "min_dateTime": {
                "afwCamelCaseFunctionLabel": "afwMinDateTime",
                "brief": "Minimum value",
                "camelCaseFunctionLabel": "minDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 37,
                "deprecated": false,
                "description": "Return the dateTime arg that is less than or equal to the others.\n\nIf a dateTime value does not include a time-zone value, then the local time-zone value will be assigned.",
                "functionId": "min<dateTime>",
                "functionLabel": "min_dateTime",
                "functionSignature": "dateTime(...dateTime args)",
                "functionDeclaration": "/* Minimum value */\ndateTime (\n    ...dateTime args)",
                "parameters": [
                    {
                        "dataType": "dateTime",
                        "minArgs": 1,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "dateTime",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ne_date": {
                "afwCamelCaseFunctionLabel": "afwNeDate",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "neDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 13,
                "deprecated": false,
                "description": "Checks for date arg1 is not equal to date arg2 and return the boolean result.",
                "functionId": "ne<date>",
                "functionLabel": "ne_date",
                "functionSignature": "boolean(date arg1, date arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    date arg1,\n    date arg2)",
                "op": "!=",
                "parameters": [
                    {
                        "dataType": "date",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "date",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "rule_permit_unless_deny": {
                "afwCamelCaseFunctionLabel": "afwRulePermitUnlessDeny",
                "brief": "Rule combining algorithm - permit_unless_deny",
                "camelCaseFunctionLabel": "rulePermitUnlessDeny",
                "category": "rule_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Rule combining algorithm for permit unless deny.",
                "functionId": "rule_permit_unless_deny",
                "functionLabel": "rule_permit_unless_deny",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Rule combining algorithm - permit_unless_deny */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "delete_object_with_uri": {
                "afwCamelCaseFunctionLabel": "afwDeleteObjectWithUri",
                "camelCaseFunctionLabel": "deleteObjectWithUri",
                "category": "adaptor",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Delete an adaptive object with a given URI.",
                "functionId": "delete_object_with_uri",
                "functionLabel": "delete_object_with_uri",
                "functionSignature": "(object _AdaptiveJournalEntry_)(anyURI uri, object journal?, object adaptorTypeSpecific?)",
                "functionDeclaration": "(object _AdaptiveJournalEntry_) (\n    anyURI uri,\n    object journal?,\n    object adaptorTypeSpecific?)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "description": "URI of object to delete.  If a URI begins with a single slash ('/'), it is the local object path.",
                        "minArgs": -1,
                        "name": "uri",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "The properties of this object will be added to the associated journal entry.  Refer to /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names to avoid and for ones that have specific semantics.",
                        "minArgs": -1,
                        "name": "journal",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "This is an optional object parameter with an objectType determined by the adaptorType associated with the adaptorId parameter.  If the adaptorType supports this parameter, adaptor afw will have an adaptive object type with an id of:\n\n_AdaptiveAdaptorTypeSpecific_${adaptorType}_delete_object\n\nwhere ${adaptorType} is the adaptor type id.",
                        "minArgs": -1,
                        "name": "adaptorTypeSpecific",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveJournalEntry_",
                    "description": "Resulting journal entry.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "dayTimeDuration": {
                "afwCamelCaseFunctionLabel": "afwDayTimeDuration",
                "brief": "Convert to data type dateTimeDuration",
                "camelCaseFunctionLabel": "dayTimeDuration",
                "category": "dayTimeDuration",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type dayTimeDuration returning dayTimeDuration result.",
                "functionId": "dayTimeDuration",
                "functionLabel": "dayTimeDuration",
                "functionSignature": "dayTimeDuration(any arg)",
                "functionDeclaration": "/* Convert to data type dateTimeDuration */\ndayTimeDuration (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "dayTimeDuration",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "any_of_all": {
                "afwCamelCaseFunctionLabel": "afwAnyOfAll",
                "brief": "Combinations of any in list1 and all in list2 true",
                "camelCaseFunctionLabel": "anyOfAll",
                "category": "higher_order_array",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Returns true if the result of calling predicate with all of the combination of values from list2 and any of the values of list1 returns true.",
                "functionId": "any_of_all",
                "functionLabel": "any_of_all",
                "functionSignature": "boolean((function (boolean)(value1, value2)) predicate, list list1, list list2)",
                "functionDeclaration": "/* Combinations of any in list1 and all in list2 true */\nboolean (\n    (function (boolean)(value1, value2)) predicate,\n    list list1,\n    list list2)",
                "parameters": [
                    {
                        "dataType": "function",
                        "dataTypeParameter": "(boolean)(value1, value2)",
                        "description": "The predicate is passed two parameters, the first is a value from list1 and the second is a value from list2.",
                        "minArgs": -1,
                        "name": "predicate",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eq_boolean": {
                "afwCamelCaseFunctionLabel": "afwEqBoolean",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "eqBoolean",
                "category": "boolean",
                "dataType": "boolean",
                "dataTypeMethodNumber": 6,
                "deprecated": false,
                "description": "Checks for boolean arg1 is equal to boolean arg2 and return the boolean result.",
                "functionId": "eq<boolean>",
                "functionLabel": "eq_boolean",
                "functionSignature": "boolean(boolean arg1, boolean arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    boolean arg1,\n    boolean arg2)",
                "op": "==",
                "parameters": [
                    {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "abs": {
                "afwCamelCaseFunctionLabel": "afwAbs",
                "brief": "Absolute value",
                "camelCaseFunctionLabel": "abs",
                "category": "polymorphic",
                "dataTypeMethodNumber": 40,
                "deprecated": false,
                "description": "Compute the absolute value of the <Type> arg and return the <Type> result.",
                "functionId": "abs",
                "functionLabel": "abs",
                "functionSignature": "<Type> Type(Type arg)",
                "functionDeclaration": "/* Absolute value */\n<Type> Type (\n    Type arg)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "double",
                    "integer"
                ],
                "pure": true,
                "returns": {
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "foreach": {
                "afwCamelCaseFunctionLabel": "afwForeach",
                "brief": "Evaluate a list of values while a condition is true with a list of initial and increment values",
                "camelCaseFunctionLabel": "foreach",
                "category": "script",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This creates a new structured block with a new nested variable scope.\n\nThis function will evaluate a list of values while a condition is true with initial and increment values.  The condition is tested at the beginning of the loop.  If the condition is false for the first iteration, the loop returns a null value.",
                "functionId": "foreach",
                "functionLabel": "foreach",
                "functionSignature": "any((list string) name, any value, list body?)",
                "functionDeclaration": "/* Evaluate a list of values while a condition is true with a list of initial and increment values */\nany (\n    (list string) name,\n    any value,\n    list body?)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "string",
                        "description": "Variable name(s).",
                        "minArgs": -1,
                        "name": "name",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "Any list, object or single value.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "description": "This is a list of values that are evaluated for each iteration of the loop.  Each value in body is evaluated in order until the end of the list or until a \"break\", \"continue\", \"return\" or \"throw\" function is encountered.",
                        "minArgs": -1,
                        "name": "body",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "description": "The last value evaluated in body or null if condition evaluates to false the first time.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 7
            },
            "decode_to_string": {
                "afwCamelCaseFunctionLabel": "afwDecodeToString",
                "brief": "Decode <Type> to string",
                "camelCaseFunctionLabel": "decodeToString",
                "category": "polymorphic",
                "dataTypeMethodNumber": 29,
                "deprecated": false,
                "description": "Decode <Type> value to string.  An error is thrown if decoded value is not valid UTF-8.",
                "functionId": "decode_to_string",
                "functionLabel": "decode_to_string",
                "functionSignature": "<Type> string(Type value)",
                "functionDeclaration": "/* Decode <Type> to string */\n<Type> string (\n    Type value)",
                "parameters": [
                    {
                        "description": "The <Type> value to decode.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "base64Binary",
                    "hexBinary"
                ],
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The decoded string.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "rule_ordered_deny_overrides": {
                "afwCamelCaseFunctionLabel": "afwRuleOrderedDenyOverrides",
                "brief": "Rule combining algorithm - deny_overrides",
                "camelCaseFunctionLabel": "ruleOrderedDenyOverrides",
                "category": "rule_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Rule combining algorithm for deny overrides.",
                "functionId": "rule_ordered_deny_overrides",
                "functionLabel": "rule_ordered_deny_overrides",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Rule combining algorithm - deny_overrides */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "last_index_of": {
                "afwCamelCaseFunctionLabel": "afwLastIndexOf",
                "brief": "Returns index of last occurrence",
                "camelCaseFunctionLabel": "lastIndexOf",
                "category": "polymorphic",
                "dataTypeMethodNumber": 11,
                "deprecated": false,
                "description": "Returns the zero-based index into <Type> value of the last occurrence of a subString.  If subString is not found, -1 is returned.",
                "functionId": "last_index_of",
                "functionLabel": "last_index_of",
                "functionSignature": "<Type> integer(Type value, string subString, integer startIndex?)",
                "functionDeclaration": "/* Returns index of last occurrence */\n<Type> integer (\n    Type value,\n    string subString,\n    integer startIndex?)",
                "parameters": [
                    {
                        "description": "The <Type> value to search.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Substring to search for.",
                        "minArgs": -1,
                        "name": "subString",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "Optional start index for search if different than start of string.",
                        "minArgs": -1,
                        "name": "startIndex",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "description": "Zero-based index of subString or -1 if not found.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "intersection_base64Binary": {
                "afwCamelCaseFunctionLabel": "afwIntersectionBase64Binary",
                "brief": "Returns intersection of two lists",
                "camelCaseFunctionLabel": "intersectionBase64Binary",
                "category": "base64Binary",
                "dataType": "base64Binary",
                "dataTypeMethodNumber": 9,
                "deprecated": false,
                "description": "Returns a list of base64Binary with the values that are common to both list of base64Binary list1 and list2.",
                "functionId": "intersection<base64Binary>",
                "functionLabel": "intersection_base64Binary",
                "functionSignature": "(list base64Binary)((list base64Binary) list1, (list base64Binary) list2)",
                "functionDeclaration": "/* Returns intersection of two lists */\n(list base64Binary) (\n    (list base64Binary) list1,\n    (list base64Binary) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "base64Binary",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "base64Binary",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "base64Binary",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "repeat": {
                "afwCamelCaseFunctionLabel": "afwRepeat",
                "brief": "Returns a repeated value",
                "camelCaseFunctionLabel": "repeat",
                "category": "polymorphic",
                "dataTypeMethodNumber": 19,
                "deprecated": false,
                "description": "Repeat a <Type> value a specified number of times.",
                "functionId": "repeat",
                "functionLabel": "repeat",
                "functionSignature": "<Type> Type(Type value, integer times)",
                "functionDeclaration": "/* Returns a repeated value */\n<Type> Type (\n    Type value,\n    integer times)",
                "parameters": [
                    {
                        "description": "The <Type> value to repeat.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "The number of times to repeat the value.",
                        "minArgs": -1,
                        "name": "times",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "string"
                ],
                "pure": true,
                "returns": {
                    "description": "The repeated <Type> value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "compile_expression_tuple": {
                "afwCamelCaseFunctionLabel": "afwCompileExpressionTuple",
                "brief": "Compile expression tuple value",
                "camelCaseFunctionLabel": "compileExpressionTuple",
                "category": "compiler",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Compile a string containing adaptive expression tuple syntax and return either an unevaluated expression tuple adaptive value or a string containing the compiler listing.",
                "functionId": "compile_expression_tuple",
                "functionLabel": "compile_expression_tuple",
                "functionSignature": "any(list expression_tuple, any listing?)",
                "functionDeclaration": "/* Compile expression tuple value */\nany (\n    list expression_tuple,\n    any listing?)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "expression tuple to compile.",
                        "minArgs": -1,
                        "name": "expression_tuple",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "If specified, a compiler listing is produced instead of an unevaluated expression tuple value.\n\nThis parameter can be an integer between 0 and 10 of a string that is used for indentation.  If 0 is specified, no whitespace is added to the resulting string.  If 1 through 10 is specified, that number of spaces is used.",
                        "minArgs": -1,
                        "name": "listing",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "description": "An unevaluated expression tuple value ready for use by function evaluate() or a string containing the compiler listing.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "property_get": {
                "afwCamelCaseFunctionLabel": "afwPropertyGet",
                "brief": "Get property value",
                "camelCaseFunctionLabel": "propertyGet",
                "category": "object",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Return the value of a property of an object.  If property is not available, return a default or null value.",
                "functionId": "property_get",
                "functionLabel": "property_get",
                "functionSignature": "any(object object, string name, any defaultValue?)",
                "functionDeclaration": "/* Get property value */\nany (\n    object object,\n    string name,\n    any defaultValue?)",
                "parameters": [
                    {
                        "dataType": "object",
                        "description": "Object to get property from.",
                        "minArgs": -1,
                        "name": "object",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Name of property to get.",
                        "minArgs": -1,
                        "name": "name",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "The default value of property if it does not exist in object.  If not specified, null value is the default.",
                        "minArgs": -1,
                        "name": "defaultValue",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "description": "Evaluated property value or default.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eqx_rfc822Name": {
                "afwCamelCaseFunctionLabel": "afwEqxRfc822Name",
                "brief": "Checks for equal and type",
                "camelCaseFunctionLabel": "eqxRfc822Name",
                "category": "rfc822Name",
                "dataType": "rfc822Name",
                "dataTypeMethodNumber": 7,
                "deprecated": false,
                "description": "Checks for rfc822Name arg1 is equal to value and type of arg2 and return the boolean result.",
                "functionId": "eqx<rfc822Name>",
                "functionLabel": "eqx_rfc822Name",
                "functionSignature": "boolean(rfc822Name arg1, rfc822Name arg2)",
                "functionDeclaration": "/* Checks for equal and type */\nboolean (\n    rfc822Name arg1,\n    rfc822Name arg2)",
                "op": "===",
                "parameters": [
                    {
                        "dataType": "rfc822Name",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "rfc822Name",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "at_least_one_member_of_dateTime": {
                "afwCamelCaseFunctionLabel": "afwAtLeastOneMemberOfDateTime",
                "brief": "Checks for at least one value in common",
                "camelCaseFunctionLabel": "atLeastOneMemberOfDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 1,
                "deprecated": false,
                "description": "Returns boolean true if at least one value in dateTime list1 is in dateTime list2.",
                "functionId": "at_least_one_member_of<dateTime>",
                "functionLabel": "at_least_one_member_of_dateTime",
                "functionSignature": "boolean((list dateTime) list1, (list dateTime) list2)",
                "functionDeclaration": "/* Checks for at least one value in common */\nboolean (\n    (list dateTime) list1,\n    (list dateTime) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dateTime",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dateTime",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subtract_dayTimeDuration_dateTime": {
                "afwCamelCaseFunctionLabel": "afwSubtractDayTimeDurationDateTime",
                "brief": "Subtract numbers",
                "camelCaseFunctionLabel": "subtractDayTimeDurationDateTime",
                "category": "dateTime",
                "dataType": "dateTime",
                "dataTypeMethodNumber": 38,
                "deprecated": false,
                "description": "Subtract dayTimeDuration arg2 from dateTime arg1 and return the dateTime result.",
                "functionId": "subtract_dayTimeDuration<dateTime>",
                "functionLabel": "subtract_dayTimeDuration_dateTime",
                "functionSignature": "dateTime(dateTime arg1, dayTimeDuration arg2)",
                "functionDeclaration": "/* Subtract numbers */\ndateTime (\n    dateTime arg1,\n    dayTimeDuration arg2)",
                "parameters": [
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "dayTimeDuration",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "dateTime",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "one_and_only_dayTimeDuration": {
                "afwCamelCaseFunctionLabel": "afwOneAndOnlyDayTimeDuration",
                "brief": "Converts a one value list to a dayTimeDuration value",
                "camelCaseFunctionLabel": "oneAndOnlyDayTimeDuration",
                "category": "dayTimeDuration",
                "dataType": "dayTimeDuration",
                "dataTypeMethodNumber": 15,
                "deprecated": false,
                "description": "This converts a list list  that contains one value to a data type dayTimeDuration value.",
                "functionId": "one_and_only<dayTimeDuration>",
                "functionLabel": "one_and_only_dayTimeDuration",
                "functionSignature": "dayTimeDuration((list list) list)",
                "functionDeclaration": "/* Converts a one value list to a dayTimeDuration value */\ndayTimeDuration (\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "dayTimeDuration",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_integer": {
                "afwCamelCaseFunctionLabel": "afwIsInteger",
                "brief": "Checks whether value is dataType integer",
                "camelCaseFunctionLabel": "isInteger",
                "category": "integer",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type integer.  Use is_list_of_integer() instead to test for a list of integer.",
                "functionId": "is<integer>",
                "functionLabel": "is_integer",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType integer */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is integer.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "add_object_with_uri": {
                "afwCamelCaseFunctionLabel": "afwAddObjectWithUri",
                "brief": "Add adaptive object with URI",
                "camelCaseFunctionLabel": "addObjectWithUri",
                "category": "adaptor",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Add an adaptive object with a given URI.",
                "functionId": "add_object_with_uri",
                "functionLabel": "add_object_with_uri",
                "functionSignature": "(object _AdaptiveJournalEntry_)(anyURI uri, object object, object journal?, object adaptorTypeSpecific?)",
                "functionDeclaration": "/* Add adaptive object with URI */\n(object _AdaptiveJournalEntry_) (\n    anyURI uri,\n    object object,\n    object journal?,\n    object adaptorTypeSpecific?)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "description": "URI of object to add.  If a URI begins with a single slash ('/'), it is the local object path.  In the case of a local path, an optional preferred objectId of object can be including in URI which the adaptor may ignore.",
                        "minArgs": -1,
                        "name": "uri",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "Object to add.",
                        "minArgs": -1,
                        "name": "object",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "The properties of this object will be added to the associated journal entry.  Refer to /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names to avoid and for ones that have specific semantics.",
                        "minArgs": -1,
                        "name": "journal",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "This is an optional object parameter with an objectType determined by the adaptorType associated with the adaptorId parameter.  If the adaptorType supports this parameter, adaptor afw will have an adaptive object type with an id of:\n\n_AdaptiveAdaptorTypeSpecific_${adaptorType}_add_object\n\nWhere ${adaptorType} is the adaptor type id.",
                        "minArgs": -1,
                        "name": "adaptorTypeSpecific",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveJournalEntry_",
                    "description": "Resulting journal entry.  Property \"objectId\" is the objectId assigned by the adaptor.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag": {
                "afwCamelCaseFunctionLabel": "afwBag",
                "brief": "Makes a list from args",
                "camelCaseFunctionLabel": "bag",
                "category": "polymorphic",
                "dataTypeMethodNumber": 2,
                "deprecated": false,
                "description": "Takes any number of <Type> args and returns a list of list.",
                "functionId": "bag",
                "functionLabel": "bag",
                "functionSignature": "<Type> list(...list args)",
                "functionDeclaration": "/* Makes a list from args */\n<Type> list (\n    ...list args)",
                "parameters": [
                    {
                        "dataType": "array",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": true
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "base64Binary",
                    "boolean",
                    "date",
                    "dateTime",
                    "dayTimeDuration",
                    "dnsName",
                    "double",
                    "hexBinary",
                    "integer",
                    "ipAddress",
                    "rfc822Name",
                    "string",
                    "time",
                    "x500Name",
                    "yearMonthDuration"
                ],
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": true
                },
                "scriptSupportNumber": 0
            },
            "ne_anyURI": {
                "afwCamelCaseFunctionLabel": "afwNeAnyURI",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "neAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 13,
                "deprecated": false,
                "description": "Checks for anyURI arg1 is not equal to anyURI arg2 and return the boolean result.",
                "functionId": "ne<anyURI>",
                "functionLabel": "ne_anyURI",
                "functionSignature": "boolean(anyURI arg1, anyURI arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    anyURI arg1,\n    anyURI arg2)",
                "op": "!=",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "anyURI",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_integer_double": {
                "afwCamelCaseFunctionLabel": "afwToIntegerDouble",
                "brief": "Converts to integer",
                "camelCaseFunctionLabel": "toIntegerDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 50,
                "deprecated": false,
                "description": "Truncate double arg to a whole number and returns integer result.",
                "functionId": "to_integer<double>",
                "functionLabel": "to_integer_double",
                "functionSignature": "integer(double arg)",
                "functionDeclaration": "/* Converts to integer */\ninteger (\n    double arg)",
                "parameters": [
                    {
                        "dataType": "double",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "at_least_one_member_of_dayTimeDuration": {
                "afwCamelCaseFunctionLabel": "afwAtLeastOneMemberOfDayTimeDuration",
                "brief": "Checks for at least one value in common",
                "camelCaseFunctionLabel": "atLeastOneMemberOfDayTimeDuration",
                "category": "dayTimeDuration",
                "dataType": "dayTimeDuration",
                "dataTypeMethodNumber": 1,
                "deprecated": false,
                "description": "Returns boolean true if at least one value in dayTimeDuration list1 is in dayTimeDuration list2.",
                "functionId": "at_least_one_member_of<dayTimeDuration>",
                "functionLabel": "at_least_one_member_of_dayTimeDuration",
                "functionSignature": "boolean((list dayTimeDuration) list1, (list dayTimeDuration) list2)",
                "functionDeclaration": "/* Checks for at least one value in common */\nboolean (\n    (list dayTimeDuration) list1,\n    (list dayTimeDuration) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dayTimeDuration",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dayTimeDuration",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_anyURI_string": {
                "afwCamelCaseFunctionLabel": "afwToAnyURIString",
                "brief": "Converts string to anyURI",
                "camelCaseFunctionLabel": "toAnyURIString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 64,
                "deprecated": false,
                "description": "Converts string arg to anyURI.",
                "functionId": "to_anyURI<string>",
                "functionLabel": "to_anyURI_string",
                "functionSignature": "anyURI(string arg)",
                "functionDeclaration": "/* Converts string to anyURI */\nanyURI (\n    string arg)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "anyURI",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_size_x500Name": {
                "afwCamelCaseFunctionLabel": "afwBagSizeX500Name",
                "brief": "Returns the number of values in a bag",
                "camelCaseFunctionLabel": "bagSizeX500Name",
                "category": "x500Name",
                "dataType": "x500Name",
                "dataTypeMethodNumber": 3,
                "deprecated": false,
                "description": "This returns the integer number of values in list bag arg.",
                "functionId": "bag_size<x500Name>",
                "functionLabel": "bag_size_x500Name",
                "functionSignature": "integer((list x500Name) arg)",
                "functionDeclaration": "/* Returns the number of values in a bag */\ninteger (\n    (list x500Name) arg)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "x500Name",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "one_and_only_date": {
                "afwCamelCaseFunctionLabel": "afwOneAndOnlyDate",
                "brief": "Converts a one value list to a date value",
                "camelCaseFunctionLabel": "oneAndOnlyDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 15,
                "deprecated": false,
                "description": "This converts a list list  that contains one value to a data type date value.",
                "functionId": "one_and_only<date>",
                "functionLabel": "one_and_only_date",
                "functionSignature": "date((list list) list)",
                "functionDeclaration": "/* Converts a one value list to a date value */\ndate (\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "date",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subset_yearMonthDuration": {
                "afwCamelCaseFunctionLabel": "afwSubsetYearMonthDuration",
                "brief": "Determines if the first list is a subset of second list",
                "camelCaseFunctionLabel": "subsetYearMonthDuration",
                "category": "yearMonthDuration",
                "dataType": "yearMonthDuration",
                "dataTypeMethodNumber": 24,
                "deprecated": false,
                "description": "Returns boolean true if the unique values in yearMonthDuration list1 are all in yearMonthDuration list2.",
                "functionId": "subset<yearMonthDuration>",
                "functionLabel": "subset_yearMonthDuration",
                "functionSignature": "boolean((list yearMonthDuration) list1, (list yearMonthDuration) list2)",
                "functionDeclaration": "/* Determines if the first list is a subset of second list */\nboolean (\n    (list yearMonthDuration) list1,\n    (list yearMonthDuration) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "yearMonthDuration",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "yearMonthDuration",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "intersection_yearMonthDuration_1_0": {
                "afwCamelCaseFunctionLabel": "afwIntersectionYearMonthDuration10",
                "brief": "Returns intersection of two lists",
                "camelCaseFunctionLabel": "intersectionYearMonthDuration10",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Returns yearMonthDuration_1_0 list with the values that are common to both yearMonthDuration_1_0 list1 and list2.",
                "functionId": "intersection<yearMonthDuration_1_0>",
                "functionLabel": "intersection_yearMonthDuration_1_0",
                "functionSignature": "(list yearMonthDuration_1_0)((list yearMonthDuration_1_0) list1, (list yearMonthDuration_1_0) list2)",
                "functionDeclaration": "/* Returns intersection of two lists */\n(list yearMonthDuration_1_0) (\n    (list yearMonthDuration_1_0) list1,\n    (list yearMonthDuration_1_0) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "yearMonthDuration_1_0",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "yearMonthDuration_1_0",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "yearMonthDuration_1_0",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "max_integer": {
                "afwCamelCaseFunctionLabel": "afwMaxInteger",
                "brief": "Maximum value",
                "camelCaseFunctionLabel": "maxInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 36,
                "deprecated": false,
                "description": "Return the integer arg that is greater than or equal to the others.",
                "functionId": "max<integer>",
                "functionLabel": "max_integer",
                "functionSignature": "integer(...integer args)",
                "functionDeclaration": "/* Maximum value */\ninteger (\n    ...integer args)",
                "parameters": [
                    {
                        "dataType": "integer",
                        "minArgs": 1,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "gt_date": {
                "afwCamelCaseFunctionLabel": "afwGtDate",
                "brief": "Checks for greater than",
                "camelCaseFunctionLabel": "gtDate",
                "category": "date",
                "dataType": "date",
                "dataTypeMethodNumber": 33,
                "deprecated": false,
                "description": "Checks for date arg1 is greater than date arg2 and return the boolean result.\n\nIf a date value does not include a time-zone value, then the local time-zone value will be assigned.",
                "functionId": "gt<date>",
                "functionLabel": "gt_date",
                "functionSignature": "boolean(date arg1, date arg2)",
                "functionDeclaration": "/* Checks for greater than */\nboolean (\n    date arg1,\n    date arg2)",
                "op": ">",
                "parameters": [
                    {
                        "dataType": "date",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "date",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_time": {
                "afwCamelCaseFunctionLabel": "afwBagTime",
                "brief": "Makes a list from args",
                "camelCaseFunctionLabel": "bagTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 2,
                "deprecated": false,
                "description": "Takes any number of time args and returns a list of list.",
                "functionId": "bag<time>",
                "functionLabel": "bag_time",
                "functionSignature": "(list time)(...(list time) args)",
                "functionDeclaration": "/* Makes a list from args */\n(list time) (\n    ...(list time) args)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "time",
                        "minArgs": 0,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "time",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "match_x500Name": {
                "afwCamelCaseFunctionLabel": "afwMatchX500Name",
                "brief": "Checks if x500Name matches",
                "camelCaseFunctionLabel": "matchX500Name",
                "category": "x500Name",
                "dataType": "x500Name",
                "dataTypeMethodNumber": 61,
                "deprecated": false,
                "description": "Returns true if arg1 matches some terminal sequence of RDNs from arg2 when compared using equal_x500Name.",
                "functionId": "match<x500Name>",
                "functionLabel": "match_x500Name",
                "functionSignature": "boolean(x500Name arg1, string arg2)",
                "functionDeclaration": "/* Checks if x500Name matches */\nboolean (\n    x500Name arg1,\n    string arg2)",
                "parameters": [
                    {
                        "dataType": "x500Name",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eqx_integer": {
                "afwCamelCaseFunctionLabel": "afwEqxInteger",
                "brief": "Checks for equal and type",
                "camelCaseFunctionLabel": "eqxInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 7,
                "deprecated": false,
                "description": "Checks for integer arg1 is equal to value and type of arg2 and return the boolean result.",
                "functionId": "eqx<integer>",
                "functionLabel": "eqx_integer",
                "functionSignature": "boolean(integer arg1, integer arg2)",
                "functionDeclaration": "/* Checks for equal and type */\nboolean (\n    integer arg1,\n    integer arg2)",
                "op": "===",
                "parameters": [
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "rule_ordered_permit_overrides_1_1": {
                "afwCamelCaseFunctionLabel": "afwRuleOrderedPermitOverrides11",
                "brief": "Rule combining algorithm - legacy_rule_permit_overrides",
                "camelCaseFunctionLabel": "ruleOrderedPermitOverrides11",
                "category": "rule_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Rule combining algorithm for legacy rule permit overrides.",
                "functionId": "rule_ordered_permit_overrides_1_1",
                "functionLabel": "rule_ordered_permit_overrides_1_1",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Rule combining algorithm - legacy_rule_permit_overrides */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_yearMonthDuration": {
                "afwCamelCaseFunctionLabel": "afwToYearMonthDuration",
                "brief": "Converts string to yearMonthDuration",
                "camelCaseFunctionLabel": "toYearMonthDuration",
                "category": "polymorphic",
                "dataTypeMethodNumber": 74,
                "deprecated": false,
                "description": "Converts <Type> arg to yearMonthDuration.",
                "functionId": "to_yearMonthDuration",
                "functionLabel": "to_yearMonthDuration",
                "functionSignature": "<Type> yearMonthDuration(Type arg)",
                "functionDeclaration": "/* Converts string to yearMonthDuration */\n<Type> yearMonthDuration (\n    Type arg)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "yearMonthDuration",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "multiply": {
                "afwCamelCaseFunctionLabel": "afwMultiply",
                "brief": "Multiply numbers",
                "camelCaseFunctionLabel": "multiply",
                "category": "polymorphic",
                "dataTypeMethodNumber": 45,
                "deprecated": false,
                "description": "Multiply 2 or more <Type> args and return the <Type> result.",
                "functionId": "multiply",
                "functionLabel": "multiply",
                "functionSignature": "<Type> Type(...Type args)",
                "functionDeclaration": "/* Multiply numbers */\n<Type> Type (\n    ...Type args)",
                "op": "*",
                "parameters": [
                    {
                        "minArgs": 2,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "double",
                    "integer"
                ],
                "pure": true,
                "returns": {
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "at_least_one_member_of_hexBinary": {
                "afwCamelCaseFunctionLabel": "afwAtLeastOneMemberOfHexBinary",
                "brief": "Checks for at least one value in common",
                "camelCaseFunctionLabel": "atLeastOneMemberOfHexBinary",
                "category": "hexBinary",
                "dataType": "hexBinary",
                "dataTypeMethodNumber": 1,
                "deprecated": false,
                "description": "Returns boolean true if at least one value in hexBinary list1 is in hexBinary list2.",
                "functionId": "at_least_one_member_of<hexBinary>",
                "functionLabel": "at_least_one_member_of_hexBinary",
                "functionSignature": "boolean((list hexBinary) list1, (list hexBinary) list2)",
                "functionDeclaration": "/* Checks for at least one value in common */\nboolean (\n    (list hexBinary) list1,\n    (list hexBinary) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "hexBinary",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "hexBinary",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "update_object_with_uri": {
                "afwCamelCaseFunctionLabel": "afwUpdateObjectWithUri",
                "brief": "Update adaptive object with URI",
                "camelCaseFunctionLabel": "updateObjectWithUri",
                "category": "adaptor",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Update an adaptive object with a given URI.",
                "functionId": "update_object_with_uri",
                "functionLabel": "update_object_with_uri",
                "functionSignature": "(object _AdaptiveJournalEntry_)(anyURI uri, object object, object journal?, object adaptorTypeSpecific?)",
                "functionDeclaration": "/* Update adaptive object with URI */\n(object _AdaptiveJournalEntry_) (\n    anyURI uri,\n    object object,\n    object journal?,\n    object adaptorTypeSpecific?)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "description": "URI of object to update.  If a URI begins with a single slash ('/'), it is the local object path.",
                        "minArgs": -1,
                        "name": "uri",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "Object containing properties to replace in existing object.  You can use object_modify instead to update properties of embedded objects and lists, as well as to modify individual values of the object.",
                        "minArgs": -1,
                        "name": "object",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "The properties of this object will be added to the associated journal entry.  Refer to /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names to avoid and for ones that have specific semantics.",
                        "minArgs": -1,
                        "name": "journal",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "This is an optional object parameter with an objectType determined by the adaptorType associated with the adaptorId parameter.  If the adaptorType supports this parameter, adaptor afw will have an adaptive object type with an id of:\n\n_AdaptiveAdaptorTypeSpecific_${adaptorType}_modify_object\n\nWhere ${adaptorType} is the adaptor type id.",
                        "minArgs": -1,
                        "name": "adaptorTypeSpecific",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveJournalEntry_",
                    "description": "Resulting journal entry.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "break": {
                "afwCamelCaseFunctionLabel": "afwBreak",
                "brief": "Break out of a block",
                "camelCaseFunctionLabel": "break",
                "category": "script",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This is a special function that can be called to break out of the body of a loop.  If called outside of a loop body, an error is thrown.",
                "functionId": "break",
                "functionLabel": "break",
                "functionSignature": "any(any value?)",
                "functionDeclaration": "/* Break out of a block */\nany (\n    any value?)",
                "parameters": [
                    {
                        "description": "The value to evaluate that the enclosing loop will return.  If not specified, the last evaluated value or a null value will be returned.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "description": "This function returns from the body of a loop with the last evaluated value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 2
            },
            "scope_create_time_local": {
                "afwCamelCaseFunctionLabel": "afwScopeCreateTimeLocal",
                "brief": "Scope local dataTime",
                "camelCaseFunctionLabel": "scopeCreateTimeLocal",
                "category": "miscellaneous",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Return local dateTime when scope was created.  This will usually be the start of request time.",
                "functionId": "scope_create_time_local",
                "functionLabel": "scope_create_time_local",
                "functionSignature": "dateTime()",
                "functionDeclaration": "/* Scope local dataTime */\ndateTime (\n)",
                "parameters": [],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "dateTime",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "const": {
                "afwCamelCaseFunctionLabel": "afwConst",
                "brief": "Define one or more constants in the current block",
                "camelCaseFunctionLabel": "const",
                "category": "script",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Define one or more statically scoped constants local to the current script block with a permanent value.  These constants can be accessed from the current block and inner blocks, but can not be assigned a different value.",
                "functionId": "const",
                "functionLabel": "const",
                "functionSignature": "any((list string) name, any value, (object _AdaptiveValueMeta_) type?)",
                "functionDeclaration": "/* Define one or more constants in the current block */\nany (\n    (list string) name,\n    any value,\n    (object _AdaptiveValueMeta_) type?)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "string",
                        "description": "The name of one or more constants to defined in the current block.",
                        "minArgs": -1,
                        "name": "name",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "This is the value of the constant(s).",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveValueMeta_",
                        "description": "The type of the constant(s).",
                        "minArgs": -1,
                        "name": "type",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "description": "The value assigned.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 3
            },
            "set_equals_dayTimeDuration": {
                "afwCamelCaseFunctionLabel": "afwSetEqualsDayTimeDuration",
                "brief": "Checks whether two lists are subsets of each other",
                "camelCaseFunctionLabel": "setEqualsDayTimeDuration",
                "category": "dayTimeDuration",
                "dataType": "dayTimeDuration",
                "dataTypeMethodNumber": 21,
                "deprecated": false,
                "description": "Returns boolean true if dayTimeDuration list1 and dayTimeDuration list2 are subsets of each other and return the boolean result.",
                "functionId": "set_equals<dayTimeDuration>",
                "functionLabel": "set_equals_dayTimeDuration",
                "functionSignature": "boolean((list dayTimeDuration) list1, (list dayTimeDuration) list2)",
                "functionDeclaration": "/* Checks whether two lists are subsets of each other */\nboolean (\n    (list dayTimeDuration) list1,\n    (list dayTimeDuration) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dayTimeDuration",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "dayTimeDuration",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "policy_deny_unless_permit": {
                "afwCamelCaseFunctionLabel": "afwPolicyDenyUnlessPermit",
                "brief": "Policy combining algorithm - deny_unless_permit",
                "camelCaseFunctionLabel": "policyDenyUnlessPermit",
                "category": "policy_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Policy combining algorithm for deny unless permit.",
                "functionId": "policy_deny_unless_permit",
                "functionLabel": "policy_deny_unless_permit",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Policy combining algorithm - deny_unless_permit */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "add": {
                "afwCamelCaseFunctionLabel": "afwAdd",
                "brief": "Add numbers",
                "camelCaseFunctionLabel": "add",
                "category": "polymorphic",
                "dataTypeMethodNumber": 41,
                "deprecated": false,
                "description": "Add 2 or more <Type> args and return the <Type> result.",
                "functionId": "add",
                "functionLabel": "add",
                "functionSignature": "<Type> Type(...Type args)",
                "functionDeclaration": "/* Add numbers */\n<Type> Type (\n    ...Type args)",
                "op": "+",
                "parameters": [
                    {
                        "minArgs": 2,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "double",
                    "integer"
                ],
                "pure": true,
                "returns": {
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_time": {
                "afwCamelCaseFunctionLabel": "afwIsTime",
                "brief": "Checks whether value is dataType time",
                "camelCaseFunctionLabel": "isTime",
                "category": "time",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type time.  Use is_list_of_time() instead to test for a list of time.",
                "functionId": "is<time>",
                "functionLabel": "is_time",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType time */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is time.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "set_equals_string": {
                "afwCamelCaseFunctionLabel": "afwSetEqualsString",
                "brief": "Checks whether two lists are subsets of each other",
                "camelCaseFunctionLabel": "setEqualsString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 21,
                "deprecated": false,
                "description": "Returns boolean true if string list1 and string list2 are subsets of each other and return the boolean result.",
                "functionId": "set_equals<string>",
                "functionLabel": "set_equals_string",
                "functionSignature": "boolean((list string) list1, (list string) list2)",
                "functionDeclaration": "/* Checks whether two lists are subsets of each other */\nboolean (\n    (list string) list1,\n    (list string) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "string",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "string",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "regexp_index_of_anyURI": {
                "afwCamelCaseFunctionLabel": "afwRegexpIndexOfAnyURI",
                "brief": "Returns index of first match of regular expression",
                "camelCaseFunctionLabel": "regexpIndexOfAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 16,
                "deprecated": false,
                "description": "Search anyURI value for a regular expression and return index.  If not found, -1 is returned.",
                "functionId": "regexp_index_of<anyURI>",
                "functionLabel": "regexp_index_of_anyURI",
                "functionSignature": "integer(anyURI value, string regexp)",
                "functionDeclaration": "/* Returns index of first match of regular expression */\ninteger (\n    anyURI value,\n    string regexp)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "description": "The anyURI value to search.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "A regular expression to use for search.",
                        "minArgs": -1,
                        "name": "regexp",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "description": "Zero-based index of subString or -1 if not found.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_string_xpathExpression": {
                "afwCamelCaseFunctionLabel": "afwToStringXpathExpression",
                "brief": "Converts value to string",
                "camelCaseFunctionLabel": "toStringXpathExpression",
                "category": "xpathExpression",
                "dataType": "xpathExpression",
                "dataTypeMethodNumber": 26,
                "deprecated": false,
                "description": "Converts xpathExpression arg to string.  For list values, the to_string() value for each entry is returned separated with commas.",
                "functionId": "to_string<xpathExpression>",
                "functionLabel": "to_string_xpathExpression",
                "functionSignature": "string(xpathExpression arg)",
                "functionDeclaration": "/* Converts value to string */\nstring (\n    xpathExpression arg)",
                "parameters": [
                    {
                        "dataType": "xpathExpression",
                        "description": "A xpathExpression value.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "string",
                    "description": "The string representation of the value.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "regexp_match_anyURI": {
                "afwCamelCaseFunctionLabel": "afwRegexpMatchAnyURI",
                "brief": "Search for a match using a regular expression",
                "camelCaseFunctionLabel": "regexpMatchAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 17,
                "deprecated": false,
                "description": "Checks whether anyURI value matches the regular expression regexp and return the boolean result.",
                "functionId": "regexp_match<anyURI>",
                "functionLabel": "regexp_match_anyURI",
                "functionSignature": "boolean(anyURI value, string regexp)",
                "functionDeclaration": "/* Search for a match using a regular expression */\nboolean (\n    anyURI value,\n    string regexp)",
                "parameters": [
                    {
                        "dataType": "anyURI",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "regexp",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "at_least_one_member_of_anyURI": {
                "afwCamelCaseFunctionLabel": "afwAtLeastOneMemberOfAnyURI",
                "brief": "Checks for at least one value in common",
                "camelCaseFunctionLabel": "atLeastOneMemberOfAnyURI",
                "category": "anyURI",
                "dataType": "anyURI",
                "dataTypeMethodNumber": 1,
                "deprecated": false,
                "description": "Returns boolean true if at least one value in anyURI list1 is in anyURI list2.",
                "functionId": "at_least_one_member_of<anyURI>",
                "functionLabel": "at_least_one_member_of_anyURI",
                "functionSignature": "boolean((list anyURI) list1, (list anyURI) list2)",
                "functionDeclaration": "/* Checks for at least one value in common */\nboolean (\n    (list anyURI) list1,\n    (list anyURI) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "anyURI",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "anyURI",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "evaluate_template": {
                "afwCamelCaseFunctionLabel": "afwEvaluateTemplate",
                "brief": "Evaluate template value",
                "camelCaseFunctionLabel": "evaluateTemplate",
                "category": "template",
                "dataType": "template",
                "dataTypeMethodNumber": 52,
                "deprecated": false,
                "description": "Compile and evaluate template value.",
                "functionId": "evaluate<template>",
                "functionLabel": "evaluate_template",
                "functionSignature": "unevaluated(template source, (object _AdaptiveTemplatePropertiesObjects_) additionalContext?)",
                "functionDeclaration": "/* Evaluate template value */\nunevaluated (\n    template source                                               /* Source to evaluate */,\n    (object _AdaptiveTemplatePropertiesObjects_) additionalContext? /* Additional context */)",
                "parameters": [
                    {
                        "brief": "Source to evaluate",
                        "dataType": "template",
                        "description": "template string to compile and evaluate",
                        "minArgs": -1,
                        "name": "source",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "brief": "Additional context",
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveTemplatePropertiesObjects_",
                        "description": "Additional context to use first during evaluation.",
                        "minArgs": -1,
                        "name": "additionalContext",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "unevaluated",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "min_time": {
                "afwCamelCaseFunctionLabel": "afwMinTime",
                "brief": "Minimum value",
                "camelCaseFunctionLabel": "minTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 37,
                "deprecated": false,
                "description": "Return the time arg that is less than or equal to the others.\n\nIt is illegal to compare a time that includes a time-zone value with one that does not.  In such cases, the in_range<time> function should be used.",
                "functionId": "min<time>",
                "functionLabel": "min_time",
                "functionSignature": "time(...time args)",
                "functionDeclaration": "/* Minimum value */\ntime (\n    ...time args)",
                "parameters": [
                    {
                        "dataType": "time",
                        "minArgs": 1,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "time",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "intersection_yearMonthDuration": {
                "afwCamelCaseFunctionLabel": "afwIntersectionYearMonthDuration",
                "brief": "Returns intersection of two lists",
                "camelCaseFunctionLabel": "intersectionYearMonthDuration",
                "category": "yearMonthDuration",
                "dataType": "yearMonthDuration",
                "dataTypeMethodNumber": 9,
                "deprecated": false,
                "description": "Returns a list of yearMonthDuration with the values that are common to both list of yearMonthDuration list1 and list2.",
                "functionId": "intersection<yearMonthDuration>",
                "functionLabel": "intersection_yearMonthDuration",
                "functionSignature": "(list yearMonthDuration)((list yearMonthDuration) list1, (list yearMonthDuration) list2)",
                "functionDeclaration": "/* Returns intersection of two lists */\n(list yearMonthDuration) (\n    (list yearMonthDuration) list1,\n    (list yearMonthDuration) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "yearMonthDuration",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "yearMonthDuration",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "yearMonthDuration",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "ia5String": {
                "afwCamelCaseFunctionLabel": "afwIa5String",
                "brief": "Convert to data type ia5String",
                "camelCaseFunctionLabel": "ia5String",
                "category": "ia5String",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type ia5String returning ia5String result.",
                "functionId": "ia5String",
                "functionLabel": "ia5String",
                "functionSignature": "ia5String(any arg)",
                "functionDeclaration": "/* Convert to data type ia5String */\nia5String (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "ia5String",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_rfc822Name": {
                "afwCamelCaseFunctionLabel": "afwToRfc822Name",
                "brief": "Converts string to rfc822Name",
                "camelCaseFunctionLabel": "toRfc822Name",
                "category": "polymorphic",
                "dataTypeMethodNumber": 71,
                "deprecated": false,
                "description": "Converts <Type> arg to rfc822Name.",
                "functionId": "to_rfc822Name",
                "functionLabel": "to_rfc822Name",
                "functionSignature": "<Type> rfc822Name(Type arg)",
                "functionDeclaration": "/* Converts string to rfc822Name */\n<Type> rfc822Name (\n    Type arg)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "rfc822Name",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "test_template": {
                "afwCamelCaseFunctionLabel": "afwTestTemplate",
                "brief": "Test template",
                "camelCaseFunctionLabel": "testTemplate",
                "category": "compiler",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Compile and evaluate an adaptive template and compare the results to an expected value.  Return object with the test's results.",
                "functionId": "test_template",
                "functionLabel": "test_template",
                "functionSignature": "object(string id, string description, string template, any expected, (object _AdaptiveContextType_) additionalContext?)",
                "functionDeclaration": "/* Test template */\nobject (\n    string id,\n    string description,\n    string template,\n    any expected,\n    (object _AdaptiveContextType_) additionalContext?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Id of test",
                        "minArgs": -1,
                        "name": "id",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Description of test",
                        "minArgs": -1,
                        "name": "description",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Template to compile and evaluate.",
                        "minArgs": -1,
                        "name": "template",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "Expected evaluated result.",
                        "minArgs": -1,
                        "name": "expected",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveContextType_",
                        "description": "Additional context to use first during evaluation.",
                        "minArgs": -1,
                        "name": "additionalContext",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Test results.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "xpath_node_eq_1_0": {
                "afwCamelCaseFunctionLabel": "afwXpathNodeEq10",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "xpathNodeEq10",
                "category": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Checks for string arg1 is equal to string arg2 and return the boolean result.",
                "functionId": "xpath_node_eq_1_0",
                "functionLabel": "xpath_node_eq_1_0",
                "functionSignature": "boolean(string arg1, string arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    string arg1,\n    string arg2)",
                "op": "==",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "floor": {
                "afwCamelCaseFunctionLabel": "afwFloor",
                "brief": "Round downwards to nearest integer",
                "camelCaseFunctionLabel": "floor",
                "category": "polymorphic",
                "dataTypeMethodNumber": 44,
                "deprecated": false,
                "description": "Determine the largest integer that is smaller then or equal to the <Type> arg and return the <Type> result.",
                "functionId": "floor",
                "functionLabel": "floor",
                "functionSignature": "<Type> Type(Type arg)",
                "functionDeclaration": "/* Round downwards to nearest integer */\n<Type> Type (\n    Type arg)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "double"
                ],
                "pure": true,
                "returns": {
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "any_of_any": {
                "afwCamelCaseFunctionLabel": "afwAnyOfAny",
                "brief": "Any combinations true",
                "camelCaseFunctionLabel": "anyOfAny",
                "category": "higher_order_array",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This function returns true if the result of calling predicate with any of the combination of values from list1 and list2 returns true.",
                "functionId": "any_of_any",
                "functionLabel": "any_of_any",
                "functionSignature": "boolean((function (boolean)(value1, value2)) predicate, list list1, list list2)",
                "functionDeclaration": "/* Any combinations true */\nboolean (\n    (function (boolean)(value1, value2)) predicate,\n    list list1,\n    list list2)",
                "parameters": [
                    {
                        "dataType": "function",
                        "dataTypeParameter": "(boolean)(value1, value2)",
                        "description": "The predicate is passed two parameters, the first is a value from list1 and the second is a value from list2.",
                        "minArgs": -1,
                        "name": "predicate",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "to_x500Name_string": {
                "afwCamelCaseFunctionLabel": "afwToX500NameString",
                "brief": "Converts string to x500Name",
                "camelCaseFunctionLabel": "toX500NameString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 73,
                "deprecated": false,
                "description": "Converts string arg to x500Name.",
                "functionId": "to_x500Name<string>",
                "functionLabel": "to_x500Name_string",
                "functionSignature": "x500Name(string arg)",
                "functionDeclaration": "/* Converts string to x500Name */\nx500Name (\n    string arg)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "x500Name",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "journal_get_next_for_consumer": {
                "afwCamelCaseFunctionLabel": "afwJournalGetNextForConsumer",
                "brief": "Get next journal entry for consumer",
                "camelCaseFunctionLabel": "journalGetNextForConsumer",
                "category": "journal",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Get the next journal entry for a consumer referenced by the consumer_id parameter.  The entry_cursor parameter is ignored. The limit parameter specifies the maximum number of entries to scan for an applicable entry for consumer before returning.\n\n This option will set response properties \"entry\" and \"entryCursor\" if an applicable entry is retrieved.  Property \"reissue\" will be set as described below.\n\nThe properties of the _AdaptiveProvisioningPeer_ object associated with the consumer_id are used in the following way:\n\nThe consumerFilter expression is used to determine if an entry is applicable.\n\nIf consumeCursor property exists, return that entry at that cursor again immediately with a \"reissue\" property added and set to true.\n\nJournal entries are scanned beginning at the entry at the cursor in the advanceCursor property.  If the advanceCursor property is not present, the scan begins after the cursor in currentCursor.  If neither are present, the scan begins at the start of the journal.\n\nIf an applicable entry is found, properties consumeStart and consumeCursor are set, advanceCursor is removed, and the entry is returned.  Method mark_entry_consumed() will remove these properties.\n\nIf no applicable entry is found, advanceCursor is set to the last entry scanned.",
                "functionId": "journal_get_next_for_consumer",
                "functionLabel": "journal_get_next_for_consumer",
                "functionSignature": "object(string adaptorId, string consumerId, integer limit?)",
                "functionDeclaration": "/* Get next journal entry for consumer */\nobject (\n    string adaptorId,\n    string consumerId,\n    integer limit?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Id of adaptor.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "The consumerId property value of the associated _AdaptiveProvisioningPeer_ object.",
                        "minArgs": -1,
                        "name": "consumerId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "The maximum number of entries that will be scanned for an entry where the consumerFilter expression in the associated _AdaptiveProvisioningPeer_ object evaluates to true.",
                        "minArgs": -1,
                        "name": "limit",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Response object.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "nex_boolean": {
                "afwCamelCaseFunctionLabel": "afwNexBoolean",
                "brief": "Checks for not equal value or type",
                "camelCaseFunctionLabel": "nexBoolean",
                "category": "boolean",
                "dataType": "boolean",
                "dataTypeMethodNumber": 14,
                "deprecated": false,
                "description": "Checks for boolean arg1 not equal to value or data type of arg2 and return the boolean result.",
                "functionId": "nex<boolean>",
                "functionLabel": "nex_boolean",
                "functionSignature": "boolean(boolean arg1, boolean arg2)",
                "functionDeclaration": "/* Checks for not equal value or type */\nboolean (\n    boolean arg1,\n    boolean arg2)",
                "op": "!==",
                "parameters": [
                    {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_password": {
                "afwCamelCaseFunctionLabel": "afwIsPassword",
                "brief": "Checks whether value is dataType password",
                "camelCaseFunctionLabel": "isPassword",
                "category": "password",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type password.  Use is_list_of_password() instead to test for a list of password.",
                "functionId": "is<password>",
                "functionLabel": "is_password",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType password */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is password.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "one_and_only_double": {
                "afwCamelCaseFunctionLabel": "afwOneAndOnlyDouble",
                "brief": "Converts a one value list to a double value",
                "camelCaseFunctionLabel": "oneAndOnlyDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 15,
                "deprecated": false,
                "description": "This converts a list list  that contains one value to a data type double value.",
                "functionId": "one_and_only<double>",
                "functionLabel": "one_and_only_double",
                "functionSignature": "double((list list) list)",
                "functionDeclaration": "/* Converts a one value list to a double value */\ndouble (\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "double",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "model_default_add_object_action": {
                "afwCamelCaseFunctionLabel": "afwModelDefaultAddObjectAction",
                "brief": "Produce a default _AdaptiveAction_ object for an add object request to a model adaptor.",
                "camelCaseFunctionLabel": "modelDefaultAddObjectAction",
                "category": "model",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This function returns a _AdaptiveAction_ object for the default action performed if a onAdd parameter is not specified on the associated _AdaptiveModelObjectType_.  The action is not performed, but be aware that functions called while producing the _AdaptiveAction_ object may cause side effects.  This function can be called as part of a onAdd expression or for testing.",
                "functionId": "model_default_add_object_action",
                "functionLabel": "model_default_add_object_action",
                "functionSignature": "(object _AdaptiveAction_)(string adaptorId, string objectType, object object, string objectId?, string modelId?, (object _AdaptiveContextType_) context?)",
                "functionDeclaration": "/* Produce a default _AdaptiveAction_ object for an add object request to a model adaptor. */\n(object _AdaptiveAction_) (\n    string adaptorId,\n    string objectType,\n    object object,\n    string objectId?,\n    string modelId?,\n    (object _AdaptiveContextType_) context?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "This is the adaptorId of a model adaptor.  Variable custom::adaptorId can be used to access this value in model expressions.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "This is the adaptive object type of object being added.  Variable custom::objectType can be used to access this value in model expressions.",
                        "minArgs": -1,
                        "name": "objectType",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "This is the object to add.  Variable custom::object can be used to access this value in model expressions.",
                        "minArgs": -1,
                        "name": "object",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "This is the optional preferred objectId of object to add.  The adaptor may ignore this.  Variable custom::objectId can be used to access this value in model expressions.",
                        "minArgs": -1,
                        "name": "objectId",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "This specifics a modelId of model to use for producing results.  If not specified, the adaptor's current model will be used.",
                        "minArgs": -1,
                        "name": "modelId",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveContextType_",
                        "description": "This specifies additional context information available to model expressions.",
                        "minArgs": -1,
                        "name": "context",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveAction_",
                    "description": "The default action object.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subset_double": {
                "afwCamelCaseFunctionLabel": "afwSubsetDouble",
                "brief": "Determines if the first list is a subset of second list",
                "camelCaseFunctionLabel": "subsetDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 24,
                "deprecated": false,
                "description": "Returns boolean true if the unique values in double list1 are all in double list2.",
                "functionId": "subset<double>",
                "functionLabel": "subset_double",
                "functionSignature": "boolean((list double) list1, (list double) list2)",
                "functionDeclaration": "/* Determines if the first list is a subset of second list */\nboolean (\n    (list double) list1,\n    (list double) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "double",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "double",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eq_yearMonthDuration_1_0": {
                "afwCamelCaseFunctionLabel": "afwEqYearMonthDuration10",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "eqYearMonthDuration10",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Checks for yearMonthDuration_1_0 arg1 is equal to yearMonthDuration_1_0 arg2 and return the boolean result.",
                "functionId": "eq<yearMonthDuration_1_0>",
                "functionLabel": "eq_yearMonthDuration_1_0",
                "functionSignature": "boolean(yearMonthDuration_1_0 arg1, yearMonthDuration_1_0 arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    yearMonthDuration_1_0 arg1,\n    yearMonthDuration_1_0 arg2)",
                "op": "==",
                "parameters": [
                    {
                        "dataType": "yearMonthDuration_1_0",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "yearMonthDuration_1_0",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "one_and_only": {
                "afwCamelCaseFunctionLabel": "afwOneAndOnly",
                "brief": "Converts a one value list to a <Type> value",
                "camelCaseFunctionLabel": "oneAndOnly",
                "category": "polymorphic",
                "dataTypeMethodNumber": 15,
                "deprecated": false,
                "description": "This converts a list list  that contains one value to a data type <Type> value.",
                "functionId": "one_and_only",
                "functionLabel": "one_and_only",
                "functionSignature": "<Type> Type((list list) list)",
                "functionDeclaration": "/* Converts a one value list to a <Type> value */\n<Type> Type (\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "base64Binary",
                    "boolean",
                    "date",
                    "dateTime",
                    "dayTimeDuration",
                    "dnsName",
                    "double",
                    "hexBinary",
                    "integer",
                    "ipAddress",
                    "rfc822Name",
                    "string",
                    "time",
                    "x500Name",
                    "yearMonthDuration"
                ],
                "pure": true,
                "returns": {
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eq": {
                "afwCamelCaseFunctionLabel": "afwEq",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "eq",
                "category": "polymorphic",
                "dataTypeMethodNumber": 6,
                "deprecated": false,
                "description": "Checks for <Type> arg1 is equal to <Type> arg2 and return the boolean result.",
                "functionId": "eq",
                "functionLabel": "eq",
                "functionSignature": "<Type> boolean(Type arg1, Type arg2)",
                "functionDeclaration": "/* Checks for equal */\n<Type> boolean (\n    Type arg1,\n    Type arg2)",
                "op": "==",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "base64Binary",
                    "boolean",
                    "date",
                    "dateTime",
                    "dayTimeDuration",
                    "double",
                    "hexBinary",
                    "integer",
                    "rfc822Name",
                    "string",
                    "time",
                    "x500Name",
                    "yearMonthDuration"
                ],
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "add_integer": {
                "afwCamelCaseFunctionLabel": "afwAddInteger",
                "brief": "Add numbers",
                "camelCaseFunctionLabel": "addInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 41,
                "deprecated": false,
                "description": "Add 2 or more integer args and return the integer result.",
                "functionId": "add<integer>",
                "functionLabel": "add_integer",
                "functionSignature": "integer(...integer args)",
                "functionDeclaration": "/* Add numbers */\ninteger (\n    ...integer args)",
                "op": "+",
                "parameters": [
                    {
                        "dataType": "integer",
                        "minArgs": 2,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "flag_modify_defaults": {
                "afwCamelCaseFunctionLabel": "afwFlagModifyDefaults",
                "brief": "Add or remove flags used to determine the default active flags",
                "camelCaseFunctionLabel": "flagModifyDefaults",
                "category": "administrative",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Add or remove flags from the list of the flagId of flags that are used to determine the default active flags when a scope (request) is created.  This list can contain the flagId of flags that have not yet been registered.  These flags and the flags they include are set as the active default flags.\n\nThis change only lasts for the life of the current adaptive environment (e.g. until the adaptive server or afw command ends).  If you want the change to persist, change the defaultFlags property in the application config.",
                "functionId": "flag_modify_defaults",
                "functionLabel": "flag_modify_defaults",
                "functionSignature": "null((list string) flagId, boolean add?)",
                "functionDeclaration": "/* Add or remove flags used to determine the default active flags */\nnull (\n    (list string) flagId,\n    boolean add?)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "string",
                        "description": "The flagId of flags to be added or removed.",
                        "minArgs": -1,
                        "name": "flagId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "boolean",
                        "description": "Specify true to add and false to remove flags.  If not specified, flags are added.",
                        "minArgs": -1,
                        "name": "add",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "null",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "at_least_one_member_of": {
                "afwCamelCaseFunctionLabel": "afwAtLeastOneMemberOf",
                "brief": "Checks for at least one value in common",
                "camelCaseFunctionLabel": "atLeastOneMemberOf",
                "category": "polymorphic",
                "dataTypeMethodNumber": 1,
                "deprecated": false,
                "description": "Returns boolean true if at least one value in <Type> list1 is in <Type> list2.",
                "functionId": "at_least_one_member_of",
                "functionLabel": "at_least_one_member_of",
                "functionSignature": "<Type> boolean(list list1, list list2)",
                "functionDeclaration": "/* Checks for at least one value in common */\n<Type> boolean (\n    list list1,\n    list list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": true
                    },
                    {
                        "dataType": "array",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": true
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "base64Binary",
                    "boolean",
                    "date",
                    "dateTime",
                    "dayTimeDuration",
                    "double",
                    "hexBinary",
                    "integer",
                    "rfc822Name",
                    "string",
                    "time",
                    "x500Name",
                    "yearMonthDuration"
                ],
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "update_object": {
                "afwCamelCaseFunctionLabel": "afwUpdateObject",
                "brief": "Update adaptive object",
                "camelCaseFunctionLabel": "updateObject",
                "category": "adaptor",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Update an adaptive object.",
                "functionId": "update_object",
                "functionLabel": "update_object",
                "functionSignature": "(object _AdaptiveJournalEntry_)(string adaptorId, string objectType, string objectId, object object, object journal?, object adaptorTypeSpecific?)",
                "functionDeclaration": "/* Update adaptive object */\n(object _AdaptiveJournalEntry_) (\n    string adaptorId,\n    string objectType,\n    string objectId,\n    object object,\n    object journal?,\n    object adaptorTypeSpecific?)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Id of adaptor containing object to update.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Id of adaptive object type of object to update.",
                        "minArgs": -1,
                        "name": "objectType",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Id of object to update.",
                        "minArgs": -1,
                        "name": "objectId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "Object containing properties to replace in existing object.  You can use object_modify instead to update properties of embedded objects and lists, as well as to modify individual values of the object.",
                        "minArgs": -1,
                        "name": "object",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "The properties of this object will be added to the associated journal entry.  Refer to /afw/_AdaptiveObjectType_/_AdaptiveJournalEntry_ for property names to avoid and for ones that have specific semantics.",
                        "minArgs": -1,
                        "name": "journal",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "description": "This is an optional object parameter with an objectType determined by the adaptorType associated with the adaptorId parameter.  If the adaptorType supports this parameter, adaptor afw will have an adaptive object type with an id of:\n\n_AdaptiveAdaptorTypeSpecific_${adaptorType}_modify_object\n\nWhere ${adaptorType} is the adaptor type id.",
                        "minArgs": -1,
                        "name": "adaptorTypeSpecific",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "dataTypeParameter": "_AdaptiveJournalEntry_",
                    "description": "Resulting journal entry.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "nex_time": {
                "afwCamelCaseFunctionLabel": "afwNexTime",
                "brief": "Checks for not equal value or type",
                "camelCaseFunctionLabel": "nexTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 14,
                "deprecated": false,
                "description": "Checks for time arg1 not equal to value or data type of arg2 and return the boolean result.",
                "functionId": "nex<time>",
                "functionLabel": "nex_time",
                "functionSignature": "boolean(time arg1, time arg2)",
                "functionDeclaration": "/* Checks for not equal value or type */\nboolean (\n    time arg1,\n    time arg2)",
                "op": "!==",
                "parameters": [
                    {
                        "dataType": "time",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "time",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "annotate": {
                "afwCamelCaseFunctionLabel": "afwAnnotate",
                "brief": "Annotate a value",
                "camelCaseFunctionLabel": "annotate",
                "category": "miscellaneous",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Create an annotated value.",
                "functionId": "annotate",
                "functionLabel": "annotate",
                "functionSignature": "any((object _AdaptiveAnnotation_) annotation, any value)",
                "functionDeclaration": "/* Annotate a value */\nany (\n    (object _AdaptiveAnnotation_) annotation,\n    any value)",
                "parameters": [
                    {
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveAnnotation_",
                        "description": "Annotation for value.",
                        "minArgs": -1,
                        "name": "annotation",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "Any value.  This value will not be evaluated.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "description": "Unevaluated annotated value ready for use by function evaluate().",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "replace": {
                "afwCamelCaseFunctionLabel": "afwReplace",
                "brief": "Replace strings",
                "camelCaseFunctionLabel": "replace",
                "category": "polymorphic",
                "dataTypeMethodNumber": 20,
                "deprecated": false,
                "description": "Replace string(s) in a <Type> value.",
                "functionId": "replace",
                "functionLabel": "replace",
                "functionSignature": "<Type> Type(Type value, string match, string replacement, integer limit?)",
                "functionDeclaration": "/* Replace strings */\n<Type> Type (\n    Type value,\n    string match,\n    string replacement,\n    integer limit?)",
                "parameters": [
                    {
                        "description": "The original <Type> value.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "The string to replace.",
                        "minArgs": -1,
                        "name": "match",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "The replacement string.",
                        "minArgs": -1,
                        "name": "replacement",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "This is the maximum times to replace.  The default is 1.  Specify -1 to replace all occurrences.",
                        "minArgs": -1,
                        "name": "limit",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "string"
                ],
                "pure": true,
                "returns": {
                    "description": "A <Type> value with the matched string(s) replaced.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "let": {
                "afwCamelCaseFunctionLabel": "afwLoc",
                "brief": "Declare one or more variables in the current block",
                "camelCaseFunctionLabel": "let",
                "category": "script",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Declare one or more statically scoped variable locations local to the current script block and optionally assign them an initial value.  These variables can be accessed and assigned different values from the current block and inner blocks.",
                "functionId": "let",
                "functionLabel": "let",
                "functionSignature": "any((list string) name, any value?, (object _AdaptiveValueMeta_) type?)",
                "functionDeclaration": "/* Declare one or more variables in the current block */\nany (\n    (list string) name,\n    any value?,\n    (object _AdaptiveValueMeta_) type?)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "string",
                        "description": "The name of one or more variables to declared in the current block.",
                        "minArgs": -1,
                        "name": "name",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "description": "This is the initial value of the variable(s).  If not specified, the variable will have a value of undefined.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "object",
                        "dataTypeParameter": "_AdaptiveValueMeta_",
                        "description": "The type of the variable(s).",
                        "minArgs": -1,
                        "name": "type",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "description": "The value assigned.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 9
            },
            "to_dnsName_string": {
                "afwCamelCaseFunctionLabel": "afwToDnsNameString",
                "brief": "Converts string to dnsName",
                "camelCaseFunctionLabel": "toDnsNameString",
                "category": "string",
                "dataType": "string",
                "dataTypeMethodNumber": 69,
                "deprecated": false,
                "description": "Converts string arg to dnsName.",
                "functionId": "to_dnsName<string>",
                "functionLabel": "to_dnsName_string",
                "functionSignature": "dnsName(string arg)",
                "functionDeclaration": "/* Converts string to dnsName */\ndnsName (\n    string arg)",
                "parameters": [
                    {
                        "dataType": "string",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "dnsName",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eq_hexBinary": {
                "afwCamelCaseFunctionLabel": "afwEqHexBinary",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "eqHexBinary",
                "category": "hexBinary",
                "dataType": "hexBinary",
                "dataTypeMethodNumber": 6,
                "deprecated": false,
                "description": "Checks for hexBinary arg1 is equal to hexBinary arg2 and return the boolean result.",
                "functionId": "eq<hexBinary>",
                "functionLabel": "eq_hexBinary",
                "functionSignature": "boolean(hexBinary arg1, hexBinary arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    hexBinary arg1,\n    hexBinary arg2)",
                "op": "==",
                "parameters": [
                    {
                        "dataType": "hexBinary",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "hexBinary",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_function": {
                "afwCamelCaseFunctionLabel": "afwIsFunction",
                "brief": "Checks whether value is dataType function",
                "camelCaseFunctionLabel": "isFunction",
                "category": "function",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type function.  Use is_list_of_function() instead to test for a list of function.",
                "functionId": "is<function>",
                "functionLabel": "is_function",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType function */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is function.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "log": {
                "afwCamelCaseFunctionLabel": "afwLog",
                "brief": "Log value",
                "camelCaseFunctionLabel": "log",
                "category": "miscellaneous",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Evaluate and convert arg to String and log it.",
                "functionId": "log",
                "functionLabel": "log",
                "functionSignature": "null(any arg)",
                "functionDeclaration": "/* Log value */\nnull (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to log.",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "null",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0,
                "sideEffects": [
                    "Value written to log"
                ]
            },
            "property_exists": {
                "afwCamelCaseFunctionLabel": "afwPropertyExists",
                "brief": "Determine if a property exists in an object",
                "camelCaseFunctionLabel": "propertyExists",
                "category": "object",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Return true if the named property exists in an object.",
                "functionId": "property_exists",
                "functionLabel": "property_exists",
                "functionSignature": "boolean(object object, string name)",
                "functionDeclaration": "/* Determine if a property exists in an object */\nboolean (\n    object object,\n    string name)",
                "parameters": [
                    {
                        "dataType": "object",
                        "description": "Object to get property from.",
                        "minArgs": -1,
                        "name": "object",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Name of property to check.",
                        "minArgs": -1,
                        "name": "name",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if object has named property.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "is_hexBinary": {
                "afwCamelCaseFunctionLabel": "afwIsHexBinary",
                "brief": "Checks whether value is dataType hexBinary",
                "camelCaseFunctionLabel": "isHexBinary",
                "category": "hexBinary",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Test arg returning boolean True if it is data type hexBinary.  Use is_list_of_hexBinary() instead to test for a list of hexBinary.",
                "functionId": "is<hexBinary>",
                "functionLabel": "is_hexBinary",
                "functionSignature": "boolean(any arg)",
                "functionDeclaration": "/* Checks whether value is dataType hexBinary */\nboolean (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to check",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "description": "True if arg is hexBinary.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eq_dayTimeDuration_1_0": {
                "afwCamelCaseFunctionLabel": "afwEqDayTimeDuration10",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "eqDayTimeDuration10",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Checks for dayTimeDuration_1_0 arg1 is equal to dayTimeDuration_1_0 arg2 and return the boolean result.",
                "functionId": "eq<dayTimeDuration_1_0>",
                "functionLabel": "eq_dayTimeDuration_1_0",
                "functionSignature": "boolean(dayTimeDuration_1_0 arg1, dayTimeDuration_1_0 arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    dayTimeDuration_1_0 arg1,\n    dayTimeDuration_1_0 arg2)",
                "op": "==",
                "parameters": [
                    {
                        "dataType": "dayTimeDuration_1_0",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "dayTimeDuration_1_0",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "index_of": {
                "afwCamelCaseFunctionLabel": "afwIndexOf",
                "brief": "Returns index of first occurrence",
                "camelCaseFunctionLabel": "indexOf",
                "category": "polymorphic",
                "dataTypeMethodNumber": 8,
                "deprecated": false,
                "description": "Returns the zero-based index into <Type> value of subString.  If subString is not found, -1 is returned.",
                "functionId": "index_of",
                "functionLabel": "index_of",
                "functionSignature": "<Type> integer(Type value, string subString, integer startIndex?)",
                "functionDeclaration": "/* Returns index of first occurrence */\n<Type> integer (\n    Type value,\n    string subString,\n    integer startIndex?)",
                "parameters": [
                    {
                        "description": "The <Type> value to search.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Substring to search for.",
                        "minArgs": -1,
                        "name": "subString",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "Optional start index for search if different than start of string.",
                        "minArgs": -1,
                        "name": "startIndex",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "anyURI",
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "description": "Zero-based index of subString or -1 if not found.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "eq_rfc822Name": {
                "afwCamelCaseFunctionLabel": "afwEqRfc822Name",
                "brief": "Checks for equal",
                "camelCaseFunctionLabel": "eqRfc822Name",
                "category": "rfc822Name",
                "dataType": "rfc822Name",
                "dataTypeMethodNumber": 6,
                "deprecated": false,
                "description": "Checks for rfc822Name arg1 is equal to rfc822Name arg2 and return the boolean result.",
                "functionId": "eq<rfc822Name>",
                "functionLabel": "eq_rfc822Name",
                "functionSignature": "boolean(rfc822Name arg1, rfc822Name arg2)",
                "functionDeclaration": "/* Checks for equal */\nboolean (\n    rfc822Name arg1,\n    rfc822Name arg2)",
                "op": "==",
                "parameters": [
                    {
                        "dataType": "rfc822Name",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "rfc822Name",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "lt_integer": {
                "afwCamelCaseFunctionLabel": "afwLtInteger",
                "brief": "Checks for less than",
                "camelCaseFunctionLabel": "ltInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 35,
                "deprecated": false,
                "description": "Checks for integer arg1 is less that integer arg2 and return the boolean result.",
                "functionId": "lt<integer>",
                "functionLabel": "lt_integer",
                "functionSignature": "boolean(integer arg1, integer arg2)",
                "functionDeclaration": "/* Checks for less than */\nboolean (\n    integer arg1,\n    integer arg2)",
                "op": "<",
                "parameters": [
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "integer": {
                "afwCamelCaseFunctionLabel": "afwInteger",
                "brief": "Convert to data type integer",
                "camelCaseFunctionLabel": "integer",
                "category": "integer",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts arg to data type integer returning integer result.",
                "functionId": "integer",
                "functionLabel": "integer",
                "functionSignature": "integer(any arg)",
                "functionDeclaration": "/* Convert to data type integer */\ninteger (\n    any arg)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "trace": {
                "afwCamelCaseFunctionLabel": "afwTrace",
                "brief": "Write a value to the a trace log",
                "camelCaseFunctionLabel": "trace",
                "category": "miscellaneous",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Write a value to a trace log.",
                "functionId": "trace",
                "functionLabel": "trace",
                "functionSignature": "null(any value, boolean filter?, integer number?)",
                "functionDeclaration": "/* Write a value to the a trace log */\nnull (\n    any value,\n    boolean filter?,\n    integer number?)",
                "parameters": [
                    {
                        "description": "This is the value that will be converted to its string representation and written the trace log.  An undefined value is represented by 'undefined'.",
                        "minArgs": -1,
                        "name": "value",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "boolean",
                        "description": "If this optional filter is false, nothing will be written to the trace log. The default is true.",
                        "minArgs": -1,
                        "name": "filter",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "integer",
                        "description": "This is an optional number between 1 and 8 that is appended to \"trace\" to identify the trace log. The default is 1.",
                        "minArgs": -1,
                        "name": "number",
                        "optional": true,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "null",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0,
                "sideEffects": [
                    "Value written to log"
                ]
            },
            "to_integer": {
                "afwCamelCaseFunctionLabel": "afwToInteger",
                "brief": "Converts to integer",
                "camelCaseFunctionLabel": "toInteger",
                "category": "polymorphic",
                "dataTypeMethodNumber": 50,
                "deprecated": false,
                "description": "Truncate <Type> arg to a whole number and returns integer result.",
                "functionId": "to_integer",
                "functionLabel": "to_integer",
                "functionSignature": "<Type> integer(Type arg)",
                "functionDeclaration": "/* Converts to integer */\n<Type> integer (\n    Type arg)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "double",
                    "string"
                ],
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "rule_deny_unless_permit": {
                "afwCamelCaseFunctionLabel": "afwRuleDenyUnlessPermit",
                "brief": "Rule combining algorithm - deny_unless_permit",
                "camelCaseFunctionLabel": "ruleDenyUnlessPermit",
                "category": "rule_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Rule combining algorithm for deny unless permit.",
                "functionId": "rule_deny_unless_permit",
                "functionLabel": "rule_deny_unless_permit",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Rule combining algorithm - deny_unless_permit */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "add_yearMonthDuration_1_0_dateTime": {
                "afwCamelCaseFunctionLabel": "afwAddYearMonthDuration10DateTime",
                "brief": "Add duration",
                "camelCaseFunctionLabel": "addYearMonthDuration10DateTime",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "Add dateTime arg1 to yearMonthDuration_1_0 arg2 and return the dateTime result.",
                "functionId": "add_yearMonthDuration_1_0<dateTime>",
                "functionLabel": "add_yearMonthDuration_1_0_dateTime",
                "functionSignature": "dateTime(dateTime arg1, yearMonthDuration_1_0 arg2)",
                "functionDeclaration": "/* Add duration */\ndateTime (\n    dateTime arg1,\n    yearMonthDuration_1_0 arg2)",
                "parameters": [
                    {
                        "dataType": "dateTime",
                        "minArgs": -1,
                        "name": "arg1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "yearMonthDuration_1_0",
                        "minArgs": -1,
                        "name": "arg2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "dateTime",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "local_object_meta_set_ids": {
                "afwCamelCaseFunctionLabel": "afwLocalObjectMetaSetIds",
                "brief": "Set ids in a local mutable object",
                "camelCaseFunctionLabel": "localObjectMetaSetIds",
                "category": "object",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "This is used to set the ids in a local mutable object.  The ids are used to construct a local path.",
                "functionId": "local_object_meta_set_ids",
                "functionLabel": "local_object_meta_set_ids",
                "functionSignature": "null(object object, string adaptorId, string objectType, string objectId)",
                "functionDeclaration": "/* Set ids in a local mutable object */\nnull (\n    object object,\n    string adaptorId,\n    string objectType,\n    string objectId)",
                "parameters": [
                    {
                        "dataType": "object",
                        "description": "Object to set ids in.",
                        "minArgs": -1,
                        "name": "object",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Adaptor id for object.",
                        "minArgs": -1,
                        "name": "adaptorId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Object type id for object.",
                        "minArgs": -1,
                        "name": "objectType",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Object id for object.",
                        "minArgs": -1,
                        "name": "objectId",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "null",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "max_time": {
                "afwCamelCaseFunctionLabel": "afwMaxTime",
                "brief": "Maximum value",
                "camelCaseFunctionLabel": "maxTime",
                "category": "time",
                "dataType": "time",
                "dataTypeMethodNumber": 36,
                "deprecated": false,
                "description": "Return the time arg that is greater than or equal to the others.\n\nIt is illegal to compare a time that includes a time-zone value with one that does not.  In such cases, the in_range<time> function should be used.",
                "functionId": "max<time>",
                "functionLabel": "max_time",
                "functionSignature": "time(...time args)",
                "functionDeclaration": "/* Maximum value */\ntime (\n    ...time args)",
                "parameters": [
                    {
                        "dataType": "time",
                        "minArgs": 1,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "time",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "bag_size_dayTimeDuration_1_0": {
                "afwCamelCaseFunctionLabel": "afwBagSizeDayTimeDuration10",
                "brief": "Returns the number of values in a bag",
                "camelCaseFunctionLabel": "bagSizeDayTimeDuration10",
                "category": "deprecated",
                "dataType": "deprecated",
                "dataTypeMethodNumber": 0,
                "deprecated": true,
                "description": "This returns the integer number of values in list bag arg.",
                "functionId": "bag_size<dayTimeDuration_1_0>",
                "functionLabel": "bag_size_dayTimeDuration_1_0",
                "functionSignature": "integer((list list) arg)",
                "functionDeclaration": "/* Returns the number of values in a bag */\ninteger (\n    (list list) arg)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "policy_ordered_permit_overrides": {
                "afwCamelCaseFunctionLabel": "afwPolicyOrderedPermitOverrides",
                "brief": "Policy combining algorithm - permit_overrides",
                "camelCaseFunctionLabel": "policyOrderedPermitOverrides",
                "category": "policy_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Policy combining algorithm for permit overrides.",
                "functionId": "policy_ordered_permit_overrides",
                "functionLabel": "policy_ordered_permit_overrides",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Policy combining algorithm - permit_overrides */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "normalize_space": {
                "afwCamelCaseFunctionLabel": "afwNormalizeSpace",
                "brief": "Trims whitespace from beginning and end",
                "camelCaseFunctionLabel": "normalizeSpace",
                "category": "polymorphic",
                "dataTypeMethodNumber": 62,
                "deprecated": false,
                "description": "Remove whitespace from the beginning and end of a <Type> value.",
                "functionId": "normalize_space",
                "functionLabel": "normalize_space",
                "functionSignature": "<Type> Type(Type arg)",
                "functionDeclaration": "/* Trims whitespace from beginning and end */\n<Type> Type (\n    Type arg)",
                "parameters": [
                    {
                        "minArgs": -1,
                        "name": "arg",
                        "optional": false,
                        "polymorphicDataType": true,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": true,
                "polymorphicDataTypes": [
                    "string"
                ],
                "pure": true,
                "returns": {
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": true,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "array": {
                "afwCamelCaseFunctionLabel": "afwList",
                "brief": "Convert to data type list",
                "camelCaseFunctionLabel": "array",
                "category": "array",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Converts 1 or more args to a list.  If an arg is a list, its individual values are included.\n\nIf the data types of all values in the resulting list are the same, the list will be a list of that data type.  Otherwise, the resulting list will be untyped.",
                "functionId": "array",
                "functionLabel": "array",
                "functionSignature": "list(...any args)",
                "functionDeclaration": "/* Convert to data type list */\nlist (\n    ...any args)",
                "parameters": [
                    {
                        "description": "Value to convert",
                        "minArgs": 1,
                        "name": "args",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "description": "Converted value",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "splunk_log": {
                "afwCamelCaseFunctionLabel": "afwSplunkLog",
                "camelCaseFunctionLabel": "splunkLog",
                "category": "splunk",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Sends a raw message to splunk.",
                "functionId": "splunk_log",
                "functionLabel": "splunk_log",
                "functionSignature": "null(string url, string hecToken, string requestChannel, string message)",
                "functionDeclaration": "null (\n    string url,\n    string hecToken,\n    string requestChannel,\n    string message)",
                "parameters": [
                    {
                        "dataType": "string",
                        "description": "Splunk URL",
                        "minArgs": -1,
                        "name": "url",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Splunk client authentication hecToken",
                        "minArgs": -1,
                        "name": "hecToken",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Splunk request channel ID for raw message.",
                        "minArgs": -1,
                        "name": "requestChannel",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "string",
                        "description": "Message to log to splunk.",
                        "minArgs": -1,
                        "name": "message",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "null",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "subset_base64Binary": {
                "afwCamelCaseFunctionLabel": "afwSubsetBase64Binary",
                "brief": "Determines if the first list is a subset of second list",
                "camelCaseFunctionLabel": "subsetBase64Binary",
                "category": "base64Binary",
                "dataType": "base64Binary",
                "dataTypeMethodNumber": 24,
                "deprecated": false,
                "description": "Returns boolean true if the unique values in base64Binary list1 are all in base64Binary list2.",
                "functionId": "subset<base64Binary>",
                "functionLabel": "subset_base64Binary",
                "functionSignature": "boolean((list base64Binary) list1, (list base64Binary) list2)",
                "functionDeclaration": "/* Determines if the first list is a subset of second list */\nboolean (\n    (list base64Binary) list1,\n    (list base64Binary) list2)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "base64Binary",
                        "description": "The first list.",
                        "minArgs": -1,
                        "name": "list1",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    {
                        "dataType": "array",
                        "dataTypeParameter": "base64Binary",
                        "description": "The second list.",
                        "minArgs": -1,
                        "name": "list2",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "boolean",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "one_and_only_integer": {
                "afwCamelCaseFunctionLabel": "afwOneAndOnlyInteger",
                "brief": "Converts a one value list to a integer value",
                "camelCaseFunctionLabel": "oneAndOnlyInteger",
                "category": "integer",
                "dataType": "integer",
                "dataTypeMethodNumber": 15,
                "deprecated": false,
                "description": "This converts a list list  that contains one value to a data type integer value.",
                "functionId": "one_and_only<integer>",
                "functionLabel": "one_and_only_integer",
                "functionSignature": "integer((list list) list)",
                "functionDeclaration": "/* Converts a one value list to a integer value */\ninteger (\n    (list list) list)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "array",
                        "minArgs": -1,
                        "name": "array",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "integer",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "union_double": {
                "afwCamelCaseFunctionLabel": "afwUnionDouble",
                "brief": "Returns union of two or more string lists",
                "camelCaseFunctionLabel": "unionDouble",
                "category": "double",
                "dataType": "double",
                "dataTypeMethodNumber": 27,
                "deprecated": false,
                "description": "Returns a list of double contains all of the unique values in two or more list of double args.",
                "functionId": "union<double>",
                "functionLabel": "union_double",
                "functionSignature": "(list double)(...(list double) lists)",
                "functionDeclaration": "/* Returns union of two or more string lists */\n(list double) (\n    ...(list double) lists)",
                "parameters": [
                    {
                        "dataType": "array",
                        "dataTypeParameter": "double",
                        "description": "Two or more lists.",
                        "minArgs": 2,
                        "name": "lists",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": true,
                "returns": {
                    "dataType": "array",
                    "dataTypeParameter": "double",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            },
            "policy_first_applicable": {
                "afwCamelCaseFunctionLabel": "afwPolicyFirstApplicable",
                "brief": "Policy combining algorithm - first_applicable",
                "camelCaseFunctionLabel": "policyFirstApplicable",
                "category": "policy_combining_algorithm",
                "dataTypeMethodNumber": 0,
                "deprecated": false,
                "description": "Policy combining algorithm for first applicable.",
                "functionId": "policy_first_applicable",
                "functionLabel": "policy_first_applicable",
                "functionSignature": "object(list policies)",
                "functionDeclaration": "/* Policy combining algorithm - first_applicable */\nobject (\n    list policies)",
                "parameters": [
                    {
                        "dataType": "array",
                        "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                        "minArgs": -1,
                        "name": "policies",
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    }
                ],
                "polymorphic": false,
                "pure": false,
                "returns": {
                    "dataType": "object",
                    "description": "Algorithm result.",
                    "minArgs": -1,
                    "optional": false,
                    "polymorphicDataType": false,
                    "polymorphicDataTypeParameter": false
                },
                "scriptSupportNumber": 0
            }
        },
        "lock": {
            "adaptor_id:layouts": {
                "brief": "Adaptor id layouts read/write lock",
                "debugFlagIndex": 0,
                "description": "Read/write lock used internally by adaptor id layouts implementation.",
                "lockId": "adaptor_id:layouts"
            },
            "adaptor_id:auth": {
                "brief": "Adaptor id auth read/write lock",
                "debugFlagIndex": 0,
                "description": "Read/write lock used internally by adaptor id auth implementation.",
                "lockId": "adaptor_id:auth"
            },
            "adaptor_id:files": {
                "brief": "Adaptor id files read/write lock",
                "debugFlagIndex": 0,
                "description": "Read/write lock used internally by adaptor id files implementation.",
                "lockId": "adaptor_id:files"
            },
            "adaptor_id:models": {
                "brief": "Adaptor id models read/write lock",
                "debugFlagIndex": 0,
                "description": "Read/write lock used internally by adaptor id models implementation.",
                "lockId": "adaptor_id:models"
            },
            "adaptor_id:tier": {
                "brief": "Adaptor id tier read/write lock",
                "debugFlagIndex": 0,
                "description": "Read/write lock used internally by adaptor id tier implementation.",
                "lockId": "adaptor_id:tier"
            },
            "adaptor_id:conf": {
                "brief": "Adaptor id conf read/write lock",
                "debugFlagIndex": 0,
                "description": "Read/write lock used internally by adaptor id conf implementation.",
                "lockId": "adaptor_id:conf"
            },
            "environment:registry": {
                "brief": "Environment registry lock",
                "debugFlagIndex": 0,
                "description": "This lock is used internally by afw_environment.c when accessing environment registry memory.",
                "lockId": "environment:registry"
            },
            "authorization_handler_id:auth-script": {
                "brief": "Authorization handler id auth-script read/write lock",
                "debugFlagIndex": 0,
                "description": "Read/write lock used internally by authorization_handler id auth-script implementation.",
                "lockId": "authorization_handler_id:auth-script"
            },
            "environment:authorization_handler_id": {
                "brief": "Authorization handler id anchor lock",
                "debugFlagIndex": 0,
                "description": "This lock is used internally when accessing authorization handler id anchor memory.",
                "lockId": "environment:authorization_handler_id"
            },
            "environment:log_list": {
                "brief": "Environment log list lock",
                "debugFlagIndex": 0,
                "description": "This lock is used internally when accessing environment log list memory.",
                "lockId": "environment:log_list"
            },
            "environment:flags": {
                "brief": "Environment flags lock",
                "debugFlagIndex": 0,
                "description": "This lock is used internally when accessing environment flags memory.",
                "lockId": "environment:flags"
            },
            "adaptor_id:afw": {
                "brief": "Adaptor id afw read/write lock",
                "debugFlagIndex": 0,
                "description": "Read/write lock used internally by adaptor id afw implementation.",
                "lockId": "adaptor_id:afw"
            },
            "environment:adaptor_id_anchor": {
                "brief": "Adaptor id anchor lock",
                "debugFlagIndex": 0,
                "description": "This lock is used internally when accessing adaptor id anchor memory.",
                "lockId": "environment:adaptor_id_anchor"
            },
            "adaptor_id:lmdb": {
                "brief": "Adaptor id lmdb read/write lock",
                "debugFlagIndex": 0,
                "description": "Read/write lock used internally by adaptor id lmdb implementation.",
                "lockId": "adaptor_id:lmdb"
            },
            "adaptor_id:dev": {
                "brief": "Adaptor id dev read/write lock",
                "debugFlagIndex": 0,
                "description": "Read/write lock used internally by adaptor id dev implementation.",
                "lockId": "adaptor_id:dev"
            }
        },
        "log": {
            "syslog": {
                "logId": "syslog",
                "properties": {
                    "_meta_": {
                        "path": "/afw/_AdaptiveConf_log_syslog/syslog"
                    },
                    "filter": true,
                    "optionLogODelay": true,
                    "sourceLocation": "/conf/_AdaptiveServiceConf_/log-syslog/conf",
                    "debug": true,
                    "warning": true,
                    "notice": true,
                    "info": true,
                    "err": true,
                    "emerg": true,
                    "crit": true,
                    "alert": true,
                    "description": "Logs messages to syslog.",
                    "logId": "syslog",
                    "logType": "syslog",
                    "type": "log"
                },
                "serviceId": "log-syslog",
                "sourceLocation": "/conf/_AdaptiveServiceConf_/log-syslog/conf"
            }
        },
        "log_type": {
            "standard": {
                "description": "Log type for writing log stdout.",
                "logType": "standard"
            },
            "syslog": {
                "description": "Log type for writing to syslog.",
                "logType": "syslog"
            },
            "splunk": {
                "description": "Log type for Splunk.",
                "logType": "splunk"
            }
        },
        "policy_combining_algorithm": {},
        "request_handler": {
            "1": {
                "type": "requestHandler",
                "uriPrefix": "/xacml",
                "requestHandlerType": "xacml",
                "sourceLocation": "/workspace/docker/dev/afw.conf entry 2"
            },
            "2": {
                "type": "requestHandler",
                "uriPrefix": "/",
                "requestHandlerType": "adaptor",
                "sourceLocation": "/workspace/docker/dev/afw.conf entry 3"
            }
        },
        "request_handler_type": {
            "xacml": {
                "description": "XACML request handler.",
                "requestHandlerType": "xacml"
            },
            "adaptor": {
                "description": "Request handler type to provide \"rest-like\" access to adaptive objects plus access to actions.",
                "requestHandlerType": "adaptor"
            }
        },
        "rule_combining_algorithm": {},
        "runtime_custom": {
            "_AdaptiveService_": {
                "key": "_AdaptiveService_"
            },
            "_AdaptiveLayoutComponentType_": {
                "key": "_AdaptiveLayoutComponentType_"
            }
        },
        "runtime_object_map_inf": {},
        "runtime_value_accessor": {
            "size": {
                "key": "size"
            },
            "value": {
                "key": "value"
            },
            "octet": {
                "key": "octet"
            },
            "adaptor_metrics": {
                "key": "adaptor_metrics"
            },
            "null_terminated_array_of_objects": {
                "key": "null_terminated_array_of_objects"
            },
            "service_startup": {
                "key": "service_startup"
            },
            "uint32": {
                "key": "uint32"
            },
            "stopping_adaptor_instances": {
                "key": "stopping_adaptor_instances"
            },
            "default": {
                "key": "default"
            },
            "afw_components_extension_loaded": {
                "key": "afw_components_extension_loaded"
            },
            "null_terminated_array_of_values": {
                "key": "null_terminated_array_of_values"
            },
            "stopping_authorization_handler_instances": {
                "key": "stopping_authorization_handler_instances"
            },
            "null_terminated_array_of_pointers": {
                "key": "null_terminated_array_of_pointers"
            },
            "indirect": {
                "key": "indirect"
            },
            "service_status": {
                "key": "service_status"
            },
            "null_terminated_array_of_internal": {
                "key": "null_terminated_array_of_internal"
            },
            "adaptor_additional_metrics": {
                "key": "adaptor_additional_metrics"
            },
            "applicable_flags": {
                "key": "applicable_flags"
            }
        },
        "service": {},
        "service_type": {
            "adaptor": {
                "confType": {
                    "description": "This configuration type adds an adaptor and corresponding service to this Adaptive Framework environment.",
                    "idPropertyName": "adaptorId",
                    "idRegistryType": "adaptor_id",
                    "idRuntimeObjectType": "_AdaptiveAdaptor_",
                    "isUnique": true,
                    "subtypePropertyName": "adaptorType",
                    "subtypeRegistryType": "adaptor_type",
                    "subtypeRuntimeObjectType": "_AdaptiveAdaptorType_",
                    "title": "Adaptive Framework Adaptor Configuration",
                    "type": "adaptor"
                },
                "serviceType": "adaptor",
                "title": "Service type for adaptors."
            },
            "authorizationHandler": {
                "confType": {
                    "description": "This configuration type adds an authorization handler for this Adaptive Framework environment.",
                    "idPropertyName": "authorizationHandlerId",
                    "idRegistryType": "authorization_handler_id",
                    "idRuntimeObjectType": "_AdaptiveAuthorizationHandler_",
                    "isUnique": false,
                    "subtypePropertyName": "authorizationHandlerType",
                    "subtypeRegistryType": "authorization_handler_type",
                    "subtypeRuntimeObjectType": "_AdaptiveAuthorizationHandlerType_",
                    "title": "Adaptive Framework Authorization Handler Configuration",
                    "type": "authorizationHandler"
                },
                "serviceType": "authorizationHandler",
                "title": "Service type for authorizationHandler."
            },
            "log": {
                "confType": {
                    "description": "This configuration type adds a log and corresponding service to this Adaptive Framework environment.",
                    "idPropertyName": "logId",
                    "idRegistryType": "log_id",
                    "idRuntimeObjectType": "_AdaptiveLog_",
                    "isUnique": true,
                    "subtypePropertyName": "logType",
                    "subtypeRegistryType": "log_type",
                    "subtypeRuntimeObjectType": "_AdaptiveLogType_",
                    "title": "Adaptive Framework Log Configuration",
                    "type": "log"
                },
                "serviceType": "log",
                "title": "Service type for logs."
            }
        },
        "value_inf": {
            "template_definition": {
                "key": "template_definition"
            },
            "qualified_variable_reference": {
                "key": "qualified_variable_reference"
            },
            "evaluated_x500Name": {
                "key": "evaluated_x500Name"
            },
            "evaluated_integer": {
                "key": "evaluated_integer"
            },
            "compiled_value": {
                "key": "compiled_value"
            },
            "evaluated_password": {
                "key": "evaluated_password"
            },
            "evaluated_dayTimeDuration": {
                "key": "evaluated_dayTimeDuration"
            },
            "function_definition": {
                "key": "function_definition"
            },
            "evaluated_script": {
                "key": "evaluated_script"
            },
            "evaluated_ia5String": {
                "key": "evaluated_ia5String"
            },
            "evaluated_string": {
                "key": "evaluated_string"
            },
            "evaluated_object": {
                "key": "evaluated_object"
            },
            "reference_by_key": {
                "key": "reference_by_key"
            },
            "evaluated_anyURI": {
                "key": "evaluated_anyURI"
            },
            "evaluated_null": {
                "key": "evaluated_null"
            },
            "evaluated_template": {
                "key": "evaluated_template"
            },
            "expression_definition": {
                "key": "expression_definition"
            },
            "evaluated_ipAddress": {
                "key": "evaluated_ipAddress"
            },
            "script_function": {
                "key": "script_function"
            },
            "call": {
                "key": "call"
            },
            "evaluated_objectPath": {
                "key": "evaluated_objectPath"
            },
            "evaluated_objectId": {
                "key": "evaluated_objectId"
            },
            "evaluated_function": {
                "key": "evaluated_function"
            },
            "evaluated_any": {
                "key": "evaluated_any"
            },
            "evaluated_base64Binary": {
                "key": "evaluated_base64Binary"
            },
            "evaluated_hexBinary": {
                "key": "evaluated_hexBinary"
            },
            "object_expression": {
                "key": "object_expression"
            },
            "evaluated_dateTime": {
                "key": "evaluated_dateTime"
            },
            "evaluated_time": {
                "key": "evaluated_time"
            },
            "evaluated_expression": {
                "key": "evaluated_expression"
            },
            "list_expression": {
                "key": "list_expression"
            },
            "evaluated_xpathExpression": {
                "key": "evaluated_xpathExpression"
            },
            "evaluated_rfc822Name": {
                "key": "evaluated_rfc822Name"
            },
            "evaluated_double": {
                "key": "evaluated_double"
            },
            "evaluated_list": {
                "key": "evaluated_list"
            },
            "evaluated_yearMonthDuration": {
                "key": "evaluated_yearMonthDuration"
            },
            "evaluated_unevaluated": {
                "key": "evaluated_unevaluated"
            },
            "evaluated_date": {
                "key": "evaluated_date"
            },
            "evaluated_boolean": {
                "key": "evaluated_boolean"
            },
            "evaluated_unknown": {
                "key": "evaluated_unknown"
            },
            "annotated": {
                "key": "annotated"
            },
            "assignment_target": {
                "key": "assignment_target"
            },
            "evaluated_dnsName": {
                "key": "evaluated_dnsName"
            }
        },
        "xacmlDataType": {
            "http://www.w3.org/2001/XMLSchema#date": {
                "bagEqualityFunctionURI": "tests:functions:bag-equals",
                "bagFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:date-bag",
                "dataType": "date",
                "dataTypeObject": {
                    "brief": "A date",
                    "cType": "afw_date_t",
                    "dataType": "date",
                    "description": "Data type date holds a calendar date in format CCYY-MM-DD.",
                    "directReturn": false,
                    "evaluated": false,
                    "jsonImpliesDataType": false,
                    "jsonPrimitive": "string",
                    "ldapOid": "1.3.6.1.4.1.1466.115.121.1.24",
                    "relationalCompares": true,
                    "scalar": true
                },
                "dataTypeURI": "http://www.w3.org/2001/XMLSchema#date",
                "deprecated": false,
                "equalityFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:date-equal"
            },
            "urn:oasis:names:tc:xacml:1.0:data-type:x500Name": {
                "bagEqualityFunctionURI": "tests:functions:bag-equals",
                "bagFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:x500Name-bag",
                "dataType": "x500Name",
                "dataTypeObject": {
                    "brief": "A X.500 distinguished name",
                    "cType": "afw_utf8_t",
                    "dataType": "x500Name",
                    "description": "Data type x500Name hold a X.500 distinguished name.",
                    "directReturn": false,
                    "evaluated": false,
                    "jsonImpliesDataType": false,
                    "jsonPrimitive": "string",
                    "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                    "relationalCompares": false,
                    "scalar": true
                },
                "dataTypeURI": "urn:oasis:names:tc:xacml:1.0:data-type:x500Name",
                "deprecated": false,
                "equalityFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:x500Name-equal"
            },
            "http://www.w3.org/2001/XMLSchema#boolean": {
                "bagEqualityFunctionURI": "tests:functions:bag-equals",
                "bagFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:boolean-bag",
                "dataType": "boolean",
                "dataTypeObject": {
                    "brief": "A boolean value",
                    "cType": "afw_boolean_t",
                    "dataType": "boolean",
                    "description": "Data type boolean holds a boolean value.  Its to_string() value is \"true\" or \"false\".  Its from_string() true value can be mixed case \"t\", \"true\" or \"1\".  Its from_string() false value can be mixed case \"f\", \"false\" or \"0\".",
                    "directReturn": true,
                    "evaluated": false,
                    "jsonImpliesDataType": true,
                    "jsonPrimitive": "boolean",
                    "ldapOid": "1.3.6.1.4.1.1466.115.121.1.7",
                    "relationalCompares": false,
                    "scalar": true
                },
                "dataTypeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                "deprecated": false,
                "equalityFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:boolean-equal"
            },
            "urn:oasis:names:tc:xacml:3.0:data-type:xpathExpression": {
                "dataType": "xpathExpression",
                "dataTypeObject": {
                    "brief": "A XPath expression",
                    "cType": "afw_utf8_t",
                    "dataType": "xpathExpression",
                    "description": "Data type xpathExpression holds an XML Path Language (XPath) expression.  An xpath expression provides the ability to navigate around the tree representation of an XML document.",
                    "directReturn": false,
                    "evaluated": false,
                    "jsonImpliesDataType": false,
                    "jsonPrimitive": "string",
                    "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                    "relationalCompares": false,
                    "scalar": true
                },
                "dataTypeURI": "urn:oasis:names:tc:xacml:3.0:data-type:xpathExpression",
                "deprecated": false,
                "equalityFunctionURI": "urn:oasis:names:tc:xacml:3.0:function:xpath-node-equal"
            },
            "urn:oasis:names:tc:xacml:1.0:data-type:rfc822Name": {
                "bagEqualityFunctionURI": "tests:functions:bag-equals",
                "bagFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-bag",
                "dataType": "rfc822Name",
                "dataTypeObject": {
                    "brief": "A RFC 822 name",
                    "cType": "afw_utf8_t",
                    "dataType": "rfc822Name",
                    "description": "Data type rfc822Name holds a string value that conforms to RFC822: local-part@domain",
                    "directReturn": false,
                    "evaluated": false,
                    "jsonImpliesDataType": false,
                    "jsonPrimitive": "string",
                    "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                    "relationalCompares": false,
                    "scalar": true
                },
                "dataTypeURI": "urn:oasis:names:tc:xacml:1.0:data-type:rfc822Name",
                "deprecated": false,
                "equalityFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-equal"
            },
            "http://www.w3.org/TR/2002/WD-xquery-operators-20020816#dayTimeDuration": {
                "bagEqualityFunctionURI": "tests:functions:bag-equals",
                "bagFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-bag",
                "dataType": "dayTimeDuration",
                "dataTypeObject": {
                    "brief": "A day time duration",
                    "cType": "afw_dayTimeDuration_t",
                    "dataType": "dayTimeDuration",
                    "description": "Data type dayTimeDuration is an ISO 8601 extended format DTnHnMnS",
                    "directReturn": false,
                    "evaluated": false,
                    "jsonImpliesDataType": false,
                    "jsonPrimitive": "string",
                    "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                    "relationalCompares": true,
                    "scalar": true
                },
                "dataTypeURI": "http://www.w3.org/TR/2002/WD-xquery-operators-20020816#dayTimeDuration",
                "deprecated": true,
                "equalityFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-equal"
            },
            "http://www.w3.org/2001/XMLSchema#base64Binary": {
                "bagEqualityFunctionURI": "tests:functions:bag-equals",
                "bagFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:base64Binary-bag",
                "dataType": "base64Binary",
                "dataTypeObject": {
                    "brief": "A binary value whose string value is base64 encoded",
                    "cType": "afw_memory_t",
                    "dataType": "base64Binary",
                    "dataTypeParameterType": "MediaType",
                    "description": "Data type base64Binary holds binary data.  Its string value is base64 encoded.",
                    "directReturn": false,
                    "evaluated": false,
                    "jsonImpliesDataType": false,
                    "jsonPrimitive": "string",
                    "ldapOid": "1.3.6.1.4.1.1466.115.121.1.5",
                    "relationalCompares": true,
                    "scalar": true
                },
                "dataTypeURI": "http://www.w3.org/2001/XMLSchema#base64Binary",
                "deprecated": false,
                "equalityFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:base64Binary-equal"
            },
            "http://www.w3.org/2001/XMLSchema#hexBinary": {
                "bagEqualityFunctionURI": "tests:functions:bag-equals",
                "bagFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:hexBinary-bag",
                "dataType": "hexBinary",
                "dataTypeObject": {
                    "brief": "A binary value whose string value is character hex encoded",
                    "cType": "afw_memory_t",
                    "dataType": "hexBinary",
                    "dataTypeParameterType": "MediaType",
                    "description": "Data type hexBinary holds binary data.  Its string value is character hex encoded.",
                    "directReturn": false,
                    "evaluated": false,
                    "jsonImpliesDataType": false,
                    "jsonPrimitive": "string",
                    "ldapOid": "1.3.6.1.4.1.1466.115.121.1.5",
                    "relationalCompares": true,
                    "scalar": true
                },
                "dataTypeURI": "http://www.w3.org/2001/XMLSchema#hexBinary",
                "deprecated": false,
                "equalityFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:hexBinary-equal"
            },
            "http://www.w3.org/2001/XMLSchema#dateTime": {
                "bagEqualityFunctionURI": "tests:functions:bag-equals",
                "bagFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:dateTime-bag",
                "dataType": "dateTime",
                "dataTypeObject": {
                    "brief": "A date and time",
                    "cType": "afw_dateTime_t",
                    "dataType": "dateTime",
                    "description": "Data type dateTime is ISO 8601 extended format CCYY-MM-DDThh:mm:ss with an optional time zone.",
                    "directReturn": false,
                    "evaluated": false,
                    "jsonImpliesDataType": false,
                    "jsonPrimitive": "string",
                    "ldapOid": "1.3.6.1.4.1.1466.115.121.1.24",
                    "relationalCompares": true,
                    "scalar": true
                },
                "dataTypeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                "deprecated": false,
                "equalityFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:dateTime-equal"
            },
            "http://www.w3.org/2001/XMLSchema#integer": {
                "bagEqualityFunctionURI": "tests:functions:bag-equals",
                "bagFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-bag",
                "dataType": "integer",
                "dataTypeObject": {
                    "brief": "An integer",
                    "cType": "afw_integer_t",
                    "dataType": "integer",
                    "description": "Data type integer hold a positive or negative whole numbers.  The string value of a negative integer is preceded with a minus sign ('-').  A positive integer is displayed without a sign but can optionally be preceded by a plus sign ('+') on input.",
                    "directReturn": true,
                    "evaluated": false,
                    "jsonImpliesDataType": true,
                    "jsonPrimitive": "number",
                    "ldapOid": "1.3.6.1.4.1.1466.115.121.1.27",
                    "relationalCompares": true,
                    "scalar": true
                },
                "dataTypeURI": "http://www.w3.org/2001/XMLSchema#integer",
                "deprecated": false,
                "equalityFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-equal"
            },
            "http://www.w3.org/2001/XMLSchema#time": {
                "bagEqualityFunctionURI": "tests:functions:bag-equals",
                "bagFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:time-bag",
                "dataType": "time",
                "dataTypeObject": {
                    "brief": "A time",
                    "cType": "afw_time_t",
                    "dataType": "time",
                    "description": "Data type time is ISO 8601 extended format hh:mm:ss with an optional time zone.",
                    "directReturn": false,
                    "evaluated": false,
                    "jsonImpliesDataType": false,
                    "jsonPrimitive": "string",
                    "ldapOid": "1.3.6.1.4.1.1466.115.121.1.24",
                    "relationalCompares": true,
                    "scalar": true
                },
                "dataTypeURI": "http://www.w3.org/2001/XMLSchema#time",
                "deprecated": false,
                "equalityFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:time-equal"
            },
            "urn:oasis:names:tc:xacml:2.0:data-type:ipAddress": {
                "bagEqualityFunctionURI": "tests:functions:bag-equals",
                "bagFunctionURI": "urn:oasis:names:tc:xacml:2.0:function:ipAddress-bag",
                "dataType": "ipAddress",
                "dataTypeObject": {
                    "brief": "An IP address",
                    "cType": "afw_utf8_t",
                    "dataType": "ipAddress",
                    "description": "Data type ipAddress holds an Internet Protocol address (IP address).",
                    "directReturn": false,
                    "evaluated": false,
                    "jsonImpliesDataType": false,
                    "jsonPrimitive": "string",
                    "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                    "relationalCompares": false,
                    "scalar": true
                },
                "dataTypeURI": "urn:oasis:names:tc:xacml:2.0:data-type:ipAddress",
                "deprecated": false,
                "equalityFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:string-equal"
            },
            "http://www.w3.org/TR/2002/WD-xquery-operators-20020816#yearMonthDuration": {
                "bagEqualityFunctionURI": "tests:functions:bag-equals",
                "bagFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-bag",
                "dataType": "yearMonthDuration",
                "dataTypeObject": {
                    "brief": "A year month duration",
                    "cType": "afw_yearMonthDuration_t",
                    "dataType": "yearMonthDuration",
                    "description": "Data type yearMonthDuration an ISO 8601 extended format PnYnMn.",
                    "directReturn": false,
                    "evaluated": false,
                    "jsonImpliesDataType": false,
                    "jsonPrimitive": "string",
                    "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                    "relationalCompares": true,
                    "scalar": true
                },
                "dataTypeURI": "http://www.w3.org/TR/2002/WD-xquery-operators-20020816#yearMonthDuration",
                "deprecated": true,
                "equalityFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-equal"
            },
            "http://www.w3.org/2001/XMLSchema#dayTimeDuration": {
                "bagEqualityFunctionURI": "tests:functions:bag-equals",
                "bagFunctionURI": "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-bag",
                "dataType": "dayTimeDuration",
                "dataTypeObject": {
                    "brief": "A day time duration",
                    "cType": "afw_dayTimeDuration_t",
                    "dataType": "dayTimeDuration",
                    "description": "Data type dayTimeDuration is an ISO 8601 extended format DTnHnMnS",
                    "directReturn": false,
                    "evaluated": false,
                    "jsonImpliesDataType": false,
                    "jsonPrimitive": "string",
                    "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                    "relationalCompares": true,
                    "scalar": true
                },
                "dataTypeURI": "http://www.w3.org/2001/XMLSchema#dayTimeDuration",
                "deprecated": false,
                "equalityFunctionURI": "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-equal"
            },
            "http://www.w3.org/2001/XMLSchema#string": {
                "bagEqualityFunctionURI": "tests:functions:bag-equals",
                "bagFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:string-bag",
                "dataType": "string",
                "dataTypeObject": {
                    "brief": "A string",
                    "cType": "afw_utf8_t",
                    "dataType": "string",
                    "dataTypeParameterType": "MediaType",
                    "description": "Data type string hold a sequence of Unicode code points as defined at http://www.unicode.org.",
                    "directReturn": false,
                    "evaluated": false,
                    "jsonImpliesDataType": true,
                    "jsonPrimitive": "string",
                    "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                    "relationalCompares": true,
                    "scalar": true
                },
                "dataTypeURI": "http://www.w3.org/2001/XMLSchema#string",
                "deprecated": false,
                "equalityFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:string-equal"
            },
            "http://www.w3.org/2001/XMLSchema#anyURI": {
                "bagEqualityFunctionURI": "tests:functions:bag-equals",
                "bagFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:anyURI-bag",
                "dataType": "anyURI",
                "dataTypeObject": {
                    "brief": "A Uniform Resource Identifier Reference (URI)",
                    "cType": "afw_utf8_t",
                    "dataType": "anyURI",
                    "description": "Data type anyURI holds a Uniform Resource Identifier Reference (URI). The URI can be absolute or relative, and may have an optional fragment identifier.",
                    "directReturn": false,
                    "evaluated": false,
                    "jsonImpliesDataType": false,
                    "jsonPrimitive": "string",
                    "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                    "relationalCompares": true,
                    "scalar": true
                },
                "dataTypeURI": "http://www.w3.org/2001/XMLSchema#anyURI",
                "deprecated": false,
                "equalityFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:anyURI-equal"
            },
            "urn:oasis:names:tc:xacml:2.0:data-type:dnsName": {
                "bagEqualityFunctionURI": "tests:functions:bag-equals",
                "bagFunctionURI": "urn:oasis:names:tc:xacml:2.0:function:dnsName-bag",
                "dataType": "dnsName",
                "dataTypeObject": {
                    "brief": "A DNS name",
                    "cType": "afw_utf8_t",
                    "dataType": "dnsName",
                    "description": "Data type dnsName is Domain Name System (DNS) name.",
                    "directReturn": false,
                    "evaluated": false,
                    "jsonImpliesDataType": false,
                    "jsonPrimitive": "string",
                    "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                    "relationalCompares": false,
                    "scalar": true
                },
                "dataTypeURI": "urn:oasis:names:tc:xacml:2.0:data-type:dnsName",
                "deprecated": false,
                "equalityFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:string-equal"
            },
            "http://www.w3.org/2001/XMLSchema#double": {
                "bagEqualityFunctionURI": "tests:functions:bag-equals",
                "bagFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:double-bag",
                "dataType": "double",
                "dataTypeObject": {
                    "brief": "A 64-bit floating point number",
                    "cType": "double",
                    "dataType": "double",
                    "description": "Data type double holds a double-precision 64-bit floating point number.  It also can hold the values 0, -0, INF, -INF and NaN.",
                    "directReturn": true,
                    "evaluated": false,
                    "jsonImpliesDataType": true,
                    "jsonPrimitive": "number",
                    "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                    "relationalCompares": true,
                    "scalar": true
                },
                "dataTypeURI": "http://www.w3.org/2001/XMLSchema#double",
                "deprecated": false,
                "equalityFunctionURI": "urn:oasis:names:tc:xacml:1.0:function:double-equal"
            },
            "http://www.w3.org/2001/XMLSchema#yearMonthDuration": {
                "bagEqualityFunctionURI": "tests:functions:bag-equals",
                "bagFunctionURI": "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-bag",
                "dataType": "yearMonthDuration",
                "dataTypeObject": {
                    "brief": "A year month duration",
                    "cType": "afw_yearMonthDuration_t",
                    "dataType": "yearMonthDuration",
                    "description": "Data type yearMonthDuration an ISO 8601 extended format PnYnMn.",
                    "directReturn": false,
                    "evaluated": false,
                    "jsonImpliesDataType": false,
                    "jsonPrimitive": "string",
                    "ldapOid": "1.3.6.1.4.1.1466.115.121.1.15{64512}",
                    "relationalCompares": true,
                    "scalar": true
                },
                "dataTypeURI": "http://www.w3.org/2001/XMLSchema#yearMonthDuration",
                "deprecated": false,
                "equalityFunctionURI": "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-equal"
            }
        },
        "xacmlFunction": {
            "urn:oasis:names:tc:xacml:1.0:function:or": {
                "category": "Logical Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"or\" is called by urn:oasis:names:tc:xacml:1.0:function:or.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.5 Logical Functions for more information.",
                "functionId": "or",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwOr",
                    "brief": "Logical or",
                    "camelCaseFunctionLabel": "or",
                    "category": "logical",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Evaluates 0 or more boolean args returning boolean false if there are no args and boolean true if any args evaluate to true.  All args after the first true remain unevaluated.",
                    "functionId": "or",
                    "functionLabel": "or",
                    "functionSignature": "boolean(...boolean args)",
                    "functionDeclaration": "/* Logical or */\nboolean (\n    ...boolean args)",
                    "op": "||",
                    "parameters": [
                        {
                            "dataType": "boolean",
                            "minArgs": 0,
                            "name": "args",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:or",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-subset": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"yearMonthDuration::subset\" is called by urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-subset.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "subset<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-subset",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:string-less-than-or-equal": {
                "category": "Non-numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::le\" is called by urn:oasis:names:tc:xacml:1.0:function:string-less-than-or-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.8 Non-numeric Comparison Functions for more information.",
                "functionId": "le<string>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:string-less-than-or-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dateTime-bag-size": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dateTime::bag_size\" is called by urn:oasis:names:tc:xacml:1.0:function:dateTime-bag-size.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag_size<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dateTime-bag-size",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:x500Name-one-and-only": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"x500Name::one_and_only\" is called by urn:oasis:names:tc:xacml:1.0:function:x500Name-one-and-only.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "one_and_only<x500Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:x500Name-one-and-only",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:dnsName-from-string": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::to_dnsName\" is called by urn:oasis:names:tc:xacml:3.0:function:dnsName-from-string.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_dnsName<string>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:dnsName-from-string",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:time-bag-size": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"time::bag_size\" is called by urn:oasis:names:tc:xacml:1.0:function:time-bag-size.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag_size<time>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:time-bag-size",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:date-set-equals": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"date::set_equals\" is called by urn:oasis:names:tc:xacml:1.0:function:date-set-equals.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "set_equals<date>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:date-set-equals",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-one-and-only": {
                "category": "Bag Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"dayTimeDuration_1_0::one_and_only\" is called by urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-one-and-only.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "one_and_only<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-one-and-only",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-one-and-only": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dayTimeDuration::one_and_only\" is called by urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-one-and-only.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "one_and_only<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-one-and-only",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:boolean-bag": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"boolean::bag\" is called by urn:oasis:names:tc:xacml:1.0:function:boolean-bag.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag<boolean>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:boolean-bag",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-subset": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dayTimeDuration::subset\" is called by urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-subset.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "subset<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-subset",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:string-equal-ignore-case": {
                "category": "Equality Predicate Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::eq_ignore_case\" is called by urn:oasis:names:tc:xacml:3.0:function:string-equal-ignore-case.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.1 Equality Predicate Functions for more information.",
                "functionId": "eq_ignore_case<string>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:string-equal-ignore-case",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:date-less-than": {
                "category": "Non-numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"date::lt\" is called by urn:oasis:names:tc:xacml:1.0:function:date-less-than.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.8 Non-numeric Comparison Functions for more information.",
                "functionId": "lt<date>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:date-less-than",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:string-intersection": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::intersection\" is called by urn:oasis:names:tc:xacml:1.0:function:string-intersection.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "intersection<string>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:string-intersection",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-multiply": {
                "category": "Arithmetic Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::multiply\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-multiply.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.2 Arithmetic Functions for more information.",
                "functionId": "multiply<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-multiply",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dateTime-set-equals": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dateTime::set_equals\" is called by urn:oasis:names:tc:xacml:1.0:function:dateTime-set-equals.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "set_equals<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dateTime-set-equals",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:boolean-one-and-only": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"boolean::one_and_only\" is called by urn:oasis:names:tc:xacml:1.0:function:boolean-one-and-only.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "one_and_only<boolean>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:boolean-one-and-only",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:x500Name-set-equals": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"x500Name::set_equals\" is called by urn:oasis:names:tc:xacml:1.0:function:x500Name-set-equals.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "set_equals<x500Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:x500Name-set-equals",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:floor": {
                "category": "Arithmetic Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::floor\" is called by urn:oasis:names:tc:xacml:1.0:function:floor.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.2 Arithmetic Functions for more information.",
                "functionId": "floor<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:floor",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:string-from-boolean": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"boolean::to_string\" is called by urn:oasis:names:tc:xacml:3.0:function:string-from-boolean.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_string<boolean>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:string-from-boolean",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:hexBinary-at-least-one-member-of": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"hexBinary::at_least_one_member_of\" is called by urn:oasis:names:tc:xacml:1.0:function:hexBinary-at-least-one-member-of.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "at_least_one_member_of<hexBinary>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:hexBinary-at-least-one-member-of",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:double-set-equals": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::set_equals\" is called by urn:oasis:names:tc:xacml:1.0:function:double-set-equals.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "set_equals<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:double-set-equals",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:string-from-dnsName": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dnsName::to_string\" is called by urn:oasis:names:tc:xacml:3.0:function:string-from-dnsName.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_string<dnsName>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:string-from-dnsName",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-bag-size": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::bag_size\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-bag-size.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag_size<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-bag-size",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-bag": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"rfc822Name::bag\" is called by urn:oasis:names:tc:xacml:1.0:function:rfc822Name-bag.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag<rfc822Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-bag",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:dateTime-add-yearMonthDuration": {
                "category": "Date and Time Arithmetic Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dateTime::add_yearMonthDuration\" is called by urn:oasis:names:tc:xacml:3.0:function:dateTime-add-yearMonthDuration.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.7 Date and Time Arithmetic Functions for more information.",
                "functionId": "add_yearMonthDuration<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:dateTime-add-yearMonthDuration",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dateTime-intersection": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dateTime::intersection\" is called by urn:oasis:names:tc:xacml:1.0:function:dateTime-intersection.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "intersection<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dateTime-intersection",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:string-from-x500Name": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"x500Name::to_string\" is called by urn:oasis:names:tc:xacml:3.0:function:string-from-x500Name.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_string<x500Name>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:string-from-x500Name",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:date-bag": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"date::bag\" is called by urn:oasis:names:tc:xacml:1.0:function:date-bag.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag<date>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:date-bag",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:double-at-least-one-member-of": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::at_least_one_member_of\" is called by urn:oasis:names:tc:xacml:1.0:function:double-at-least-one-member-of.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "at_least_one_member_of<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:double-at-least-one-member-of",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:string-subset": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::subset\" is called by urn:oasis:names:tc:xacml:1.0:function:string-subset.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "subset<string>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:string-subset",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:string-from-dayTimeDuration": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dayTimeDuration::to_string\" is called by urn:oasis:names:tc:xacml:3.0:function:string-from-dayTimeDuration.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_string<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:string-from-dayTimeDuration",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:base64Binary-set-equals": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"base64Binary::set_equals\" is called by urn:oasis:names:tc:xacml:1.0:function:base64Binary-set-equals.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "set_equals<base64Binary>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:base64Binary-set-equals",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-greater-than": {
                "category": "Numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::gt\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-greater-than.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.6 Numeric Comparison Functions for more information.",
                "functionId": "gt<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-greater-than",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:double-divide": {
                "category": "Arithmetic Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::divide\" is called by urn:oasis:names:tc:xacml:1.0:function:double-divide.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.2 Arithmetic Functions for more information.",
                "functionId": "divide<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:double-divide",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:date-subtract-yearMonthDuration": {
                "category": "Date and Time Arithmetic Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"date::subtract_yearMonthDuration\" is called by urn:oasis:names:tc:xacml:3.0:function:date-subtract-yearMonthDuration.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.7 Date and Time Arithmetic Functions for more information.",
                "functionId": "subtract_yearMonthDuration<date>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:date-subtract-yearMonthDuration",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:all-of-all": {
                "category": "Higher-order Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"all_of_all\" is called by urn:oasis:names:tc:xacml:1.0:function:all-of-all.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.12 Higher-order Bag Functions for more information.",
                "functionId": "all_of_all",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwAllOfAll",
                    "brief": "All combinations true",
                    "camelCaseFunctionLabel": "allOfAll",
                    "category": "higher_order_array",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Returns true if the result of calling predicate with all of the combination of values from list1 and list2 returns true.",
                    "functionId": "all_of_all",
                    "functionLabel": "all_of_all",
                    "functionSignature": "boolean((function (boolean)(value1, value2)) predicate, list list1, list list2)",
                    "functionDeclaration": "/* All combinations true */\nboolean (\n    (function (boolean)(value1, value2)) predicate,\n    list list1,\n    list list2)",
                    "parameters": [
                        {
                            "dataType": "function",
                            "dataTypeParameter": "(boolean)(value1, value2)",
                            "description": "The predicate is passed two parameters, the first is a value from list1 and the second is a value from list2.",
                            "minArgs": -1,
                            "name": "predicate",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        },
                        {
                            "dataType": "array",
                            "minArgs": -1,
                            "name": "list1",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        },
                        {
                            "dataType": "array",
                            "minArgs": -1,
                            "name": "list2",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:all-of-all",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:x500Name-bag": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"x500Name::bag\" is called by urn:oasis:names:tc:xacml:1.0:function:x500Name-bag.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag<x500Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:x500Name-bag",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dateTime-less-than": {
                "category": "Non-numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dateTime::lt\" is called by urn:oasis:names:tc:xacml:1.0:function:dateTime-less-than.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.8 Non-numeric Comparison Functions for more information.",
                "functionId": "lt<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dateTime-less-than",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:hexBinary-bag-size": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"hexBinary::bag_size\" is called by urn:oasis:names:tc:xacml:1.0:function:hexBinary-bag-size.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag_size<hexBinary>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:hexBinary-bag-size",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:2.0:function:string-concatenate": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::concat\" is called by urn:oasis:names:tc:xacml:2.0:function:string-concatenate.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "concat",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwConcat",
                    "brief": "Concatenate string values",
                    "camelCaseFunctionLabel": "concat",
                    "category": "string",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Concatenate the string value of two or more args of any dataType and return the string result.  An arg with an undefined value is represented by 'undefined'.",
                    "functionId": "concat",
                    "functionLabel": "concat",
                    "functionSignature": "string(...any args)",
                    "functionDeclaration": "/* Concatenate string values */\nstring (\n    ...any args)",
                    "op": "..",
                    "parameters": [
                        {
                            "minArgs": 2,
                            "name": "args",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "string",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:2.0:function:string-concatenate",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:and": {
                "category": "Logical Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"and\" is called by urn:oasis:names:tc:xacml:1.0:function:and.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.5 Logical Functions for more information.",
                "functionId": "and",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwAnd",
                    "brief": "Logical and",
                    "camelCaseFunctionLabel": "and",
                    "category": "logical",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Evaluates 0 or more boolean args returning boolean true if there are no args and boolean false if any args evaluate to false.  All args after the first false remain unevaluated.",
                    "functionId": "and",
                    "functionLabel": "and",
                    "functionSignature": "boolean(...boolean args)",
                    "functionDeclaration": "/* Logical and */\nboolean (\n    ...boolean args)",
                    "op": "&&",
                    "parameters": [
                        {
                            "dataType": "boolean",
                            "minArgs": 0,
                            "name": "args",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:and",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-bag-size": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dayTimeDuration::bag_size\" is called by urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-bag-size.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag_size<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-bag-size",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-bag": {
                "category": "Bag Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"yearMonthDuration_1_0::bag\" is called by urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-bag.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-bag",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-at-least-one-member-of": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"rfc822Name::at_least_one_member_of\" is called by urn:oasis:names:tc:xacml:1.0:function:rfc822Name-at-least-one-member-of.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "at_least_one_member_of<rfc822Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-at-least-one-member-of",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-at-least-one-member-of": {
                "category": "Set Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"yearMonthDuration_1_0::at_least_one_member_of\" is called by urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-at-least-one-member-of.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "at_least_one_member_of<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-at-least-one-member-of",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:2.0:function:ipAddress-bag-size": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"ipAddress::bag_size\" is called by urn:oasis:names:tc:xacml:2.0:function:ipAddress-bag-size.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag_size<ipAddress>",
                "functionURI": "urn:oasis:names:tc:xacml:2.0:function:ipAddress-bag-size",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:date-intersection": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"date::intersection\" is called by urn:oasis:names:tc:xacml:1.0:function:date-intersection.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "intersection<date>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:date-intersection",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:dateTime-subtract-dayTimeDuration": {
                "category": "Date and Time Arithmetic Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dateTime::subtract_dayTimeDuration\" is called by urn:oasis:names:tc:xacml:3.0:function:dateTime-subtract-dayTimeDuration.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.7 Date and Time Arithmetic Functions for more information.",
                "functionId": "subtract_dayTimeDuration<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:dateTime-subtract-dayTimeDuration",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:date-from-string": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::to_date\" is called by urn:oasis:names:tc:xacml:3.0:function:date-from-string.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_date<string>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:date-from-string",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-set-equals": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dayTimeDuration::set_equals\" is called by urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-set-equals.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "set_equals<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-set-equals",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:anyURI-set-equals": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"anyURI::set_equals\" is called by urn:oasis:names:tc:xacml:1.0:function:anyURI-set-equals.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "set_equals<anyURI>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:anyURI-set-equals",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:2.0:function:anyURI-regexp-match": {
                "category": "Regular-expression-based Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"anyURI::regexp_match\" is called by urn:oasis:names:tc:xacml:2.0:function:anyURI-regexp-match.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.13 Regular-expression-based Functions for more information.",
                "functionId": "regexp_match<anyURI>",
                "functionURI": "urn:oasis:names:tc:xacml:2.0:function:anyURI-regexp-match",
                "reverseParameters": true
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-one-and-only": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::one_and_only\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-one-and-only.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "one_and_only<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-one-and-only",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-bag": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dayTimeDuration::bag\" is called by urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-bag.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-bag",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:x500Name-intersection": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"x500Name::intersection\" is called by urn:oasis:names:tc:xacml:1.0:function:x500Name-intersection.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "intersection<x500Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:x500Name-intersection",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:string-less-than": {
                "category": "Non-numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::lt\" is called by urn:oasis:names:tc:xacml:1.0:function:string-less-than.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.8 Non-numeric Comparison Functions for more information.",
                "functionId": "lt<string>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:string-less-than",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-intersection": {
                "category": "Set Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"dayTimeDuration_1_0::intersection\" is called by urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-intersection.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "intersection<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-intersection",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-intersection": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dayTimeDuration::intersection\" is called by urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-intersection.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "intersection<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-intersection",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:string-greater-than-or-equal": {
                "category": "Non-numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::ge\" is called by urn:oasis:names:tc:xacml:1.0:function:string-greater-than-or-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.8 Non-numeric Comparison Functions for more information.",
                "functionId": "ge<string>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:string-greater-than-or-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-set-equals": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::set_equals\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-set-equals.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "set_equals<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-set-equals",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:anyURI-from-string": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::to_anyURI\" is called by urn:oasis:names:tc:xacml:3.0:function:anyURI-from-string.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_anyURI<string>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:anyURI-from-string",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:date-add-yearMonthDuration": {
                "category": "Date and Time Arithmetic Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"date::add_yearMonthDuration\" is called by urn:oasis:names:tc:xacml:3.0:function:date-add-yearMonthDuration.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.7 Date and Time Arithmetic Functions for more information.",
                "functionId": "add_yearMonthDuration<date>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:date-add-yearMonthDuration",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-is-in": {
                "category": "Bag Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"dayTimeDuration_1_0::is_in\" is called by urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-is-in.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "is_in<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-is-in",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:boolean-intersection": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"boolean::intersection\" is called by urn:oasis:names:tc:xacml:1.0:function:boolean-intersection.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "intersection<boolean>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:boolean-intersection",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:2.0:function:uri-string-concatenate": {
                "category": "String Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"uri_string_concatenate\" is called by urn:oasis:names:tc:xacml:2.0:function:uri-string-concatenate.  This function is deprecated.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.4 for more information.",
                "functionId": "uri_string_concatenate",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwUriStringConcatenate",
                    "brief": "Concatenate URI",
                    "camelCaseFunctionLabel": "uriStringConcatenate",
                    "category": "deprecated",
                    "dataTypeMethodNumber": 0,
                    "deprecated": true,
                    "description": "Concatenate an anyURI arg1 with a string arg2 and return the anyURI result.",
                    "functionId": "uri_string_concatenate",
                    "functionLabel": "uri_string_concatenate",
                    "functionSignature": "anyURI(anyURI arg1, string arg2)",
                    "functionDeclaration": "/* Concatenate URI */\nanyURI (\n    anyURI arg1,\n    string arg2)",
                    "parameters": [
                        {
                            "dataType": "anyURI",
                            "minArgs": -1,
                            "name": "arg1",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        },
                        {
                            "dataType": "string",
                            "minArgs": -1,
                            "name": "arg2",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "anyURI",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:2.0:function:uri-string-concatenate",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:double-multiply": {
                "category": "Arithmetic Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::multiply\" is called by urn:oasis:names:tc:xacml:1.0:function:double-multiply.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.2 Arithmetic Functions for more information.",
                "functionId": "multiply<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:double-multiply",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:hexBinary-one-and-only": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"hexBinary::one_and_only\" is called by urn:oasis:names:tc:xacml:1.0:function:hexBinary-one-and-only.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "one_and_only<hexBinary>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:hexBinary-one-and-only",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-less-than": {
                "category": "Numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::lt\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-less-than.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.6 Numeric Comparison Functions for more information.",
                "functionId": "lt<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-less-than",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:time-less-than": {
                "category": "Non-numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"time::lt\" is called by urn:oasis:names:tc:xacml:1.0:function:time-less-than.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.8 Non-numeric Comparison Functions for more information.",
                "functionId": "lt<time>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:time-less-than",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:access-permitted": {
                "category": "Other Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"access_permitted\" is called by urn:oasis:names:tc:xacml:3.0:function:access-permitted.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.16 Other Functions for more information.",
                "functionId": "access_permitted",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwAccessPermitted",
                    "brief": "Check access",
                    "camelCaseFunctionLabel": "accessPermitted",
                    "category": "xacml_other",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Implementation of urn:oasis:names:tc:xacml:3.0:function:access-permitted.",
                    "functionId": "access_permitted",
                    "functionLabel": "access_permitted",
                    "functionSignature": "boolean(anyURI arg1, string arg2)",
                    "functionDeclaration": "/* Check access */\nboolean (\n    anyURI arg1,\n    string arg2)",
                    "parameters": [
                        {
                            "dataType": "anyURI",
                            "minArgs": -1,
                            "name": "arg1",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        },
                        {
                            "dataType": "string",
                            "minArgs": -1,
                            "name": "arg2",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:access-permitted",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:all-of-any": {
                "category": "Higher-order Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"all_of_any\" is called by urn:oasis:names:tc:xacml:1.0:function:all-of-any.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.12 Higher-order Bag Functions for more information.",
                "functionId": "all_of_any",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwAllOfAny",
                    "brief": "Combinations of all in list1 and any in list2 true",
                    "camelCaseFunctionLabel": "allOfAny",
                    "category": "higher_order_array",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "This function returns true if the result of calling predicate with all of the combination of values from list1 and any of the values of list2 returns true.",
                    "functionId": "all_of_any",
                    "functionLabel": "all_of_any",
                    "functionSignature": "boolean((function (boolean)(value1, value2)) predicate, list list1, list list2)",
                    "functionDeclaration": "/* Combinations of all in list1 and any in list2 true */\nboolean (\n    (function (boolean)(value1, value2)) predicate,\n    list list1,\n    list list2)",
                    "parameters": [
                        {
                            "dataType": "function",
                            "dataTypeParameter": "(boolean)(value1, value2)",
                            "description": "The predicate is passed two parameters, the first is a value from list1 and the second is a value from list2.",
                            "minArgs": -1,
                            "name": "predicate",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        },
                        {
                            "dataType": "array",
                            "minArgs": -1,
                            "name": "list1",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        },
                        {
                            "dataType": "array",
                            "minArgs": -1,
                            "name": "list2",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:all-of-any",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:time-greater-than-or-equal": {
                "category": "Non-numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"time::ge\" is called by urn:oasis:names:tc:xacml:1.0:function:time-greater-than-or-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.8 Non-numeric Comparison Functions for more information.",
                "functionId": "ge<time>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:time-greater-than-or-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-abs": {
                "category": "Arithmetic Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::abs\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-abs.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.2 Arithmetic Functions for more information.",
                "functionId": "abs<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-abs",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-bag": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"yearMonthDuration::bag\" is called by urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-bag.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-bag",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:double-less-than": {
                "category": "Numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::lt\" is called by urn:oasis:names:tc:xacml:1.0:function:double-less-than.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.6 Numeric Comparison Functions for more information.",
                "functionId": "lt<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:double-less-than",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-from-string": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::to_dayTimeDuration\" is called by urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-from-string.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_dayTimeDuration<string>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-from-string",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:double-bag-size": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::bag_size\" is called by urn:oasis:names:tc:xacml:1.0:function:double-bag-size.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag_size<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:double-bag-size",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:anyURI-subset": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"anyURI::subset\" is called by urn:oasis:names:tc:xacml:1.0:function:anyURI-subset.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "subset<anyURI>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:anyURI-subset",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:date-at-least-one-member-of": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"date::at_least_one_member_of\" is called by urn:oasis:names:tc:xacml:1.0:function:date-at-least-one-member-of.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "at_least_one_member_of<date>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:date-at-least-one-member-of",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dateTime-less-than-or-equal": {
                "category": "Non-numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dateTime::le\" is called by urn:oasis:names:tc:xacml:1.0:function:dateTime-less-than-or-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.8 Non-numeric Comparison Functions for more information.",
                "functionId": "le<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dateTime-less-than-or-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:double-greater-than-or-equal": {
                "category": "Numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::ge\" is called by urn:oasis:names:tc:xacml:1.0:function:double-greater-than-or-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.6 Numeric Comparison Functions for more information.",
                "functionId": "ge<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:double-greater-than-or-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:time-greater-than": {
                "category": "Non-numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"time::gt\" is called by urn:oasis:names:tc:xacml:1.0:function:time-greater-than.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.8 Non-numeric Comparison Functions for more information.",
                "functionId": "gt<time>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:time-greater-than",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:time-set-equals": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"time::set_equals\" is called by urn:oasis:names:tc:xacml:1.0:function:time-set-equals.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "set_equals<time>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:time-set-equals",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:date-greater-than-or-equal": {
                "category": "Non-numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"date::ge\" is called by urn:oasis:names:tc:xacml:1.0:function:date-greater-than-or-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.8 Non-numeric Comparison Functions for more information.",
                "functionId": "ge<date>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:date-greater-than-or-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:string-from-double": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::to_string\" is called by urn:oasis:names:tc:xacml:3.0:function:string-from-double.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_string<double>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:string-from-double",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:double-from-string": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::to_double\" is called by urn:oasis:names:tc:xacml:3.0:function:double-from-string.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_double<string>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:double-from-string",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:string-from-yearMonthDuration": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"yearMonthDuration::to_string\" is called by urn:oasis:names:tc:xacml:3.0:function:string-from-yearMonthDuration.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_string<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:string-from-yearMonthDuration",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:string-is-in": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::is_in\" is called by urn:oasis:names:tc:xacml:1.0:function:string-is-in.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "is_in<string>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:string-is-in",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:string-from-date": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"date::to_string\" is called by urn:oasis:names:tc:xacml:3.0:function:string-from-date.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_string<date>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:string-from-date",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-bag": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::bag\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-bag.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-bag",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-to-double": {
                "category": "Numeric Data-Type Conversion Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::to_double\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-to-double.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.4 Numeric Data-Type Conversion Functions for more information.",
                "functionId": "to_double<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-to-double",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:string-substring": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::substring\" is called by urn:oasis:names:tc:xacml:3.0:function:string-substring.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "substring<string>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:string-substring",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:round": {
                "category": "Arithmetic Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::round\" is called by urn:oasis:names:tc:xacml:1.0:function:round.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.2 Arithmetic Functions for more information.",
                "functionId": "round<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:round",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-union": {
                "category": "Set Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"dayTimeDuration_1_0::union\" is called by urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-union.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "union<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-union",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:double-less-than-or-equal": {
                "category": "Numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::le\" is called by urn:oasis:names:tc:xacml:1.0:function:double-less-than-or-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.6 Numeric Comparison Functions for more information.",
                "functionId": "le<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:double-less-than-or-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-bag": {
                "category": "Bag Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"dayTimeDuration_1_0::bag\" is called by urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-bag.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-bag",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-is-in": {
                "category": "Bag Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"yearMonthDuration_1_0::is_in\" is called by urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-is-in.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "is_in<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-is-in",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:x500Name-at-least-one-member-of": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"x500Name::at_least_one_member_of\" is called by urn:oasis:names:tc:xacml:1.0:function:x500Name-at-least-one-member-of.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "at_least_one_member_of<x500Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:x500Name-at-least-one-member-of",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:time-at-least-one-member-of": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"time::at_least_one_member_of\" is called by urn:oasis:names:tc:xacml:1.0:function:time-at-least-one-member-of.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "at_least_one_member_of<time>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:time-at-least-one-member-of",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:2.0:function:ipAddress-is-in": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"ipAddress::is_in\" is called by urn:oasis:names:tc:xacml:2.0:function:ipAddress-is-in.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "is_in<ipAddress>",
                "functionURI": "urn:oasis:names:tc:xacml:2.0:function:ipAddress-is-in",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:time-is-in": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"time::is_in\" is called by urn:oasis:names:tc:xacml:1.0:function:time-is-in.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "is_in<time>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:time-is-in",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-bag-size": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"yearMonthDuration::bag_size\" is called by urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-bag-size.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag_size<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-bag-size",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-is-in": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dayTimeDuration::is_in\" is called by urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-is-in.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "is_in<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-is-in",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-from-string": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::to_yearMonthDuration\" is called by urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-from-string.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_yearMonthDuration<string>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-from-string",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-add": {
                "category": "Arithmetic Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::add\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-add.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.2 Arithmetic Functions for more information.",
                "functionId": "add<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-add",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:string-from-ipAddress": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"ipAddress::to_string\" is called by urn:oasis:names:tc:xacml:3.0:function:string-from-ipAddress.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_string<ipAddress>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:string-from-ipAddress",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:base64Binary-at-least-one-member-of": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"base64Binary::at_least_one_member_of\" is called by urn:oasis:names:tc:xacml:1.0:function:base64Binary-at-least-one-member-of.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "at_least_one_member_of<base64Binary>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:base64Binary-at-least-one-member-of",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:double-is-in": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::is_in\" is called by urn:oasis:names:tc:xacml:1.0:function:double-is-in.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "is_in<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:double-is-in",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-set-equals": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"rfc822Name::set_equals\" is called by urn:oasis:names:tc:xacml:1.0:function:rfc822Name-set-equals.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "set_equals<rfc822Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-set-equals",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:date-is-in": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"date::is_in\" is called by urn:oasis:names:tc:xacml:1.0:function:date-is-in.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "is_in<date>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:date-is-in",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:hexBinary-subset": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"hexBinary::subset\" is called by urn:oasis:names:tc:xacml:1.0:function:hexBinary-subset.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "subset<hexBinary>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:hexBinary-subset",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:string-union": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::union\" is called by urn:oasis:names:tc:xacml:1.0:function:string-union.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "union<string>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:string-union",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:time-one-and-only": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"time::one_and_only\" is called by urn:oasis:names:tc:xacml:1.0:function:time-one-and-only.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "one_and_only<time>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:time-one-and-only",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:string-normalize-space": {
                "category": "String Conversion Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::normalize_space\" is called by urn:oasis:names:tc:xacml:1.0:function:string-normalize-space.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.3 String Conversion Functions for more information.",
                "functionId": "normalize_space<string>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:string-normalize-space",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:string-starts-with": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::starts_with\" is called by urn:oasis:names:tc:xacml:3.0:function:string-starts-with.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "starts_with<string>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:string-starts-with",
                "reverseParameters": true
            },
            "urn:oasis:names:tc:xacml:1.0:function:n-of": {
                "category": "Logical Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"n_of\" is called by urn:oasis:names:tc:xacml:1.0:function:n-of.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.5 Logical Functions for more information.",
                "functionId": "n_of",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwNOf",
                    "brief": "Check for n true values",
                    "camelCaseFunctionLabel": "nOf",
                    "category": "logical",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "integer arg1 specifies the number of boolean args that follow that must evaluate to true for boolean true to be returned.  If arg1 is 0, true is returned.  Once arg1 args evaluate to true, true is returned and the remaining args remain unevaluated.",
                    "functionId": "n_of",
                    "functionLabel": "n_of",
                    "functionSignature": "boolean(integer arg1, ...boolean args)",
                    "functionDeclaration": "/* Check for n true values */\nboolean (\n    integer arg1,\n    ...boolean args)",
                    "parameters": [
                        {
                            "dataType": "integer",
                            "minArgs": -1,
                            "name": "arg1",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        },
                        {
                            "dataType": "boolean",
                            "minArgs": 0,
                            "name": "args",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:n-of",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-intersection": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::intersection\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-intersection.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "intersection<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-intersection",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-union": {
                "category": "Set Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"yearMonthDuration_1_0::union\" is called by urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-union.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "union<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-union",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:2.0:function:dnsName-is-in": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dnsName::is_in\" is called by urn:oasis:names:tc:xacml:2.0:function:dnsName-is-in.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "is_in<dnsName>",
                "functionURI": "urn:oasis:names:tc:xacml:2.0:function:dnsName-is-in",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:anyURI-one-and-only": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"anyURI::one_and_only\" is called by urn:oasis:names:tc:xacml:1.0:function:anyURI-one-and-only.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "one_and_only<anyURI>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:anyURI-one-and-only",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:hexBinary-is-in": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"hexBinary::is_in\" is called by urn:oasis:names:tc:xacml:1.0:function:hexBinary-is-in.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "is_in<hexBinary>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:hexBinary-is-in",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:string-ends-with": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::ends_with\" is called by urn:oasis:names:tc:xacml:3.0:function:string-ends-with.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "ends_with<string>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:string-ends-with",
                "reverseParameters": true
            },
            "urn:oasis:names:tc:xacml:1.0:function:x500Name-is-in": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"x500Name::is_in\" is called by urn:oasis:names:tc:xacml:1.0:function:x500Name-is-in.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "is_in<x500Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:x500Name-is-in",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:double-subset": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::subset\" is called by urn:oasis:names:tc:xacml:1.0:function:double-subset.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "subset<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:double-subset",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:double-abs": {
                "category": "Arithmetic Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::abs\" is called by urn:oasis:names:tc:xacml:1.0:function:double-abs.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.2 Arithmetic Functions for more information.",
                "functionId": "abs<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:double-abs",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:string-from-rfc822Name": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"rfc822Name::to_string\" is called by urn:oasis:names:tc:xacml:3.0:function:string-from-rfc822Name.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_string<rfc822Name>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:string-from-rfc822Name",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:boolean-bag-size": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"boolean::bag_size\" is called by urn:oasis:names:tc:xacml:1.0:function:boolean-bag-size.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag_size<boolean>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:boolean-bag-size",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-set-equals": {
                "category": "Set Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"dayTimeDuration_1_0::set_equals\" is called by urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-set-equals.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "set_equals<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-set-equals",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:time-union": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"time::union\" is called by urn:oasis:names:tc:xacml:1.0:function:time-union.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "union<time>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:time-union",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:anyURI-is-in": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"anyURI::is_in\" is called by urn:oasis:names:tc:xacml:1.0:function:anyURI-is-in.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "is_in<anyURI>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:anyURI-is-in",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:ipAddress-from-string": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::to_ipAddress\" is called by urn:oasis:names:tc:xacml:3.0:function:ipAddress-from-string.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_ipAddress<string>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:ipAddress-from-string",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:regexp-string-match": {
                "category": "Regular-expression-based Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"regexp_string_match\" is called by urn:oasis:names:tc:xacml:1.0:function:regexp-string-match.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.13 Regular-expression-based Functions for more information.",
                "functionId": "regexp_string_match",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwRegexpStringMatch",
                    "brief": "Deprecated regexp_match.",
                    "camelCaseFunctionLabel": "regexpStringMatch",
                    "category": "deprecated",
                    "dataTypeMethodNumber": 0,
                    "deprecated": true,
                    "description": "This is a deprecated version of regexp_match.",
                    "functionId": "regexp_string_match",
                    "functionLabel": "regexp_string_match",
                    "functionSignature": "boolean(string arg1, string arg2)",
                    "functionDeclaration": "/* Deprecated regexp_match. */\nboolean (\n    string arg1,\n    string arg2)",
                    "parameters": [
                        {
                            "dataType": "string",
                            "minArgs": -1,
                            "name": "arg1",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        },
                        {
                            "dataType": "string",
                            "minArgs": -1,
                            "name": "arg2",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:regexp-string-match",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:base64Binary-bag-size": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"base64Binary::bag_size\" is called by urn:oasis:names:tc:xacml:1.0:function:base64Binary-bag-size.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag_size<base64Binary>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:base64Binary-bag-size",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-union": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dayTimeDuration::union\" is called by urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-union.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "union<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-union",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:hexBinary-intersection": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"hexBinary::intersection\" is called by urn:oasis:names:tc:xacml:1.0:function:hexBinary-intersection.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "intersection<hexBinary>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:hexBinary-intersection",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:xpath-node-count": {
                "category": "XPath-based Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"xpath_node_count\" is called by urn:oasis:names:tc:xacml:3.0:function:xpath-node-count.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.15 XPath-based Functions for more information.",
                "functionId": "xpath_node_count",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwXpathNodeCount",
                    "brief": "Number of nodes in node-set",
                    "camelCaseFunctionLabel": "xpathNodeCount",
                    "category": "xpathExpression",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "The number of nodes in a node-set.",
                    "functionId": "xpath_node_count",
                    "functionLabel": "xpath_node_count",
                    "functionSignature": "integer(xpathExpression nodeset)",
                    "functionDeclaration": "/* Number of nodes in node-set */\ninteger (\n    xpathExpression nodeset)",
                    "parameters": [
                        {
                            "dataType": "xpathExpression",
                            "minArgs": -1,
                            "name": "nodeset",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "integer",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:xpath-node-count",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-at-least-one-member-of": {
                "category": "Set Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"dayTimeDuration_1_0::at_least_one_member_of\" is called by urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-at-least-one-member-of.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "at_least_one_member_of<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-at-least-one-member-of",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:double-union": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::union\" is called by urn:oasis:names:tc:xacml:1.0:function:double-union.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "union<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:double-union",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:double-bag": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::bag\" is called by urn:oasis:names:tc:xacml:1.0:function:double-bag.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:double-bag",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:date-union": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"date::union\" is called by urn:oasis:names:tc:xacml:1.0:function:date-union.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "union<date>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:date-union",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:xpath-node-match": {
                "category": "XPath-based Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"xpath_node_match\" is called by urn:oasis:names:tc:xacml:3.0:function:xpath-node-match.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.15 XPath-based Functions for more information.",
                "functionId": "xpath_node_match",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwXpathNodeMatch",
                    "brief": "Checks whether two node-sets or their children have an equal node",
                    "camelCaseFunctionLabel": "xpathNodeMatch",
                    "category": "xpathExpression",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Returns true if any of the nodes matched by nodeset1 are equal to any of the nodes matched by nodeset2 or their corresponding children.",
                    "functionId": "xpath_node_match",
                    "functionLabel": "xpath_node_match",
                    "functionSignature": "boolean(xpathExpression nodeset2, xpathExpression arg2)",
                    "functionDeclaration": "/* Checks whether two node-sets or their children have an equal node */\nboolean (\n    xpathExpression nodeset2,\n    xpathExpression arg2)",
                    "parameters": [
                        {
                            "dataType": "xpathExpression",
                            "minArgs": -1,
                            "name": "nodeset2",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        },
                        {
                            "dataType": "xpathExpression",
                            "minArgs": -1,
                            "name": "arg2",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:xpath-node-match",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:string-bag-size": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::bag_size\" is called by urn:oasis:names:tc:xacml:1.0:function:string-bag-size.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag_size<string>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:string-bag-size",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-equal": {
                "category": "Equality Predicate Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"dayTimeDuration_1_0::eq\" is called by urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-equal.  This function is deprecated.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.4 for more information.",
                "functionId": "eq<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-one-and-only": {
                "category": "Bag Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"yearMonthDuration_1_0::one_and_only\" is called by urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-one-and-only.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "one_and_only<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-one-and-only",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-subset": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"rfc822Name::subset\" is called by urn:oasis:names:tc:xacml:1.0:function:rfc822Name-subset.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "subset<rfc822Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-subset",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:date-add-yearMonthDuration": {
                "category": "Date and Time Arithmetic Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"date::add_yearMonthDuration_1_0\" is called by urn:oasis:names:tc:xacml:1.0:function:date-add-yearMonthDuration.  This function is deprecated.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.4 for more information.",
                "functionId": "add_yearMonthDuration<date>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:date-add-yearMonthDuration",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:xpath-node-equal": {
                "category": "XPath-based Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"xpath_node_eq\" is called by urn:oasis:names:tc:xacml:3.0:function:xpath-node-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.15 XPath-based Functions for more information.",
                "functionId": "xpath_node_eq",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwXpathNodeEq",
                    "brief": "Checks for equal",
                    "camelCaseFunctionLabel": "xpathNodeEq",
                    "category": "xpathExpression",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Checks for xpathExpression arg1 is equal to xpathExpression arg2 and return the boolean result.",
                    "functionId": "xpath_node_eq",
                    "functionLabel": "xpath_node_eq",
                    "functionSignature": "boolean(xpathExpression arg1, xpathExpression arg2)",
                    "functionDeclaration": "/* Checks for equal */\nboolean (\n    xpathExpression arg1,\n    xpathExpression arg2)",
                    "op": "==",
                    "parameters": [
                        {
                            "dataType": "xpathExpression",
                            "minArgs": -1,
                            "name": "arg1",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        },
                        {
                            "dataType": "xpathExpression",
                            "minArgs": -1,
                            "name": "arg2",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:xpath-node-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:string-from-anyURI": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"anyURI::to_string\" is called by urn:oasis:names:tc:xacml:3.0:function:string-from-anyURI.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_string<anyURI>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:string-from-anyURI",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:hexBinary-union": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"hexBinary::union\" is called by urn:oasis:names:tc:xacml:1.0:function:hexBinary-union.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "union<hexBinary>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:hexBinary-union",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-subset": {
                "category": "Set Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"yearMonthDuration_1_0::subset\" is called by urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-subset.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "subset<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-subset",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dateTime-add-dayTimeDuration": {
                "category": "Date and Time Arithmetic Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"dateTime::add_dayTimeDuration_1_0\" is called by urn:oasis:names:tc:xacml:1.0:function:dateTime-add-dayTimeDuration.  This function is deprecated.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.4 for more information.",
                "functionId": "add_dayTimeDuration<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dateTime-add-dayTimeDuration",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:x500Name-union": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"x500Name::union\" is called by urn:oasis:names:tc:xacml:1.0:function:x500Name-union.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "union<x500Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:x500Name-union",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:string-contains": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::contains\" is called by urn:oasis:names:tc:xacml:3.0:function:string-contains.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "contains<string>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:string-contains",
                "reverseParameters": true
            },
            "urn:oasis:names:tc:xacml:3.0:function:dateTime-add-dayTimeDuration": {
                "category": "Date and Time Arithmetic Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dateTime::add_dayTimeDuration\" is called by urn:oasis:names:tc:xacml:3.0:function:dateTime-add-dayTimeDuration.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.7 Date and Time Arithmetic Functions for more information.",
                "functionId": "add_dayTimeDuration<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:dateTime-add-dayTimeDuration",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:boolean-from-string": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::to_boolean\" is called by urn:oasis:names:tc:xacml:3.0:function:boolean-from-string.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_boolean<string>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:boolean-from-string",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-at-least-one-member-of": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::at_least_one_member_of\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-at-least-one-member-of.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "at_least_one_member_of<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-at-least-one-member-of",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:anyURI-union": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"anyURI::union\" is called by urn:oasis:names:tc:xacml:1.0:function:anyURI-union.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "union<anyURI>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:anyURI-union",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-greater-than-or-equal": {
                "category": "Numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::ge\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-greater-than-or-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.6 Numeric Comparison Functions for more information.",
                "functionId": "ge<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-greater-than-or-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-divide": {
                "category": "Arithmetic Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::divide\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-divide.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.2 Arithmetic Functions for more information.",
                "functionId": "divide<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-divide",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:double-add": {
                "category": "Arithmetic Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::add\" is called by urn:oasis:names:tc:xacml:1.0:function:double-add.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.2 Arithmetic Functions for more information.",
                "functionId": "add<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:double-add",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:time-from-string": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::to_time\" is called by urn:oasis:names:tc:xacml:3.0:function:time-from-string.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_time<string>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:time-from-string",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:string-equal": {
                "category": "Equality Predicate Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::eq\" is called by urn:oasis:names:tc:xacml:1.0:function:string-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.1 Equality Predicate Functions for more information.",
                "functionId": "eq<string>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:string-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:time-less-than-or-equal": {
                "category": "Non-numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"time::le\" is called by urn:oasis:names:tc:xacml:1.0:function:time-less-than-or-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.8 Non-numeric Comparison Functions for more information.",
                "functionId": "le<time>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:time-less-than-or-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-equal": {
                "category": "Equality Predicate Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"yearMonthDuration_1_0::eq\" is called by urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-equal.  This function is deprecated.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.4 for more information.",
                "functionId": "eq<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dateTime-subtract-dayTimeDuration": {
                "category": "Date and Time Arithmetic Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"dateTime::subtract_dayTimeDuration_1_0\" is called by urn:oasis:names:tc:xacml:1.0:function:dateTime-subtract-dayTimeDuration.  This function is deprecated.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.4 for more information.",
                "functionId": "subtract_dayTimeDuration<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dateTime-subtract-dayTimeDuration",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dateTime-bag": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dateTime::bag\" is called by urn:oasis:names:tc:xacml:1.0:function:dateTime-bag.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dateTime-bag",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:2.0:function:dnsName-bag-size": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dnsName::bag_size\" is called by urn:oasis:names:tc:xacml:2.0:function:dnsName-bag-size.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag_size<dnsName>",
                "functionURI": "urn:oasis:names:tc:xacml:2.0:function:dnsName-bag-size",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:base64Binary-one-and-only": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"base64Binary::one_and_only\" is called by urn:oasis:names:tc:xacml:1.0:function:base64Binary-one-and-only.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "one_and_only<base64Binary>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:base64Binary-one-and-only",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:any-of": {
                "category": "Higher-order Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"any_of\" is called by urn:oasis:names:tc:xacml:1.0:function:any-of.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.12 Higher-order Bag Functions for more information.",
                "functionId": "any_of",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwAnyOf",
                    "brief": "Any values pass a test",
                    "camelCaseFunctionLabel": "anyOf",
                    "category": "higher_order_array",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Returns true if any value in a list pass the predicate test.",
                    "functionId": "any_of",
                    "functionLabel": "any_of",
                    "functionSignature": "boolean((function (boolean)(...)) predicate, ...any args)",
                    "functionDeclaration": "/* Any values pass a test */\nboolean (\n    (function (boolean)(...)) predicate,\n    ...any args)",
                    "parameters": [
                        {
                            "dataType": "function",
                            "dataTypeParameter": "(boolean)(...)",
                            "description": "This function is called for each value in the first list in args or until true is returned.  If no calls return true, the result is false.",
                            "minArgs": -1,
                            "name": "predicate",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        },
                        {
                            "description": "These are the parameters passed to predicate with the exception that the first list is passed one value at a time.  At least one list is required.",
                            "minArgs": 1,
                            "name": "args",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:any-of",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:double-greater-than": {
                "category": "Numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::gt\" is called by urn:oasis:names:tc:xacml:1.0:function:double-greater-than.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.6 Numeric Comparison Functions for more information.",
                "functionId": "gt<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:double-greater-than",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dateTime-at-least-one-member-of": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dateTime::at_least_one_member_of\" is called by urn:oasis:names:tc:xacml:1.0:function:dateTime-at-least-one-member-of.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "at_least_one_member_of<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dateTime-at-least-one-member-of",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:boolean-is-in": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"boolean::is_in\" is called by urn:oasis:names:tc:xacml:1.0:function:boolean-is-in.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "is_in<boolean>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:boolean-is-in",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:time-intersection": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"time::intersection\" is called by urn:oasis:names:tc:xacml:1.0:function:time-intersection.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "intersection<time>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:time-intersection",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:time-equal": {
                "category": "Equality Predicate Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"time::eq\" is called by urn:oasis:names:tc:xacml:1.0:function:time-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.1 Equality Predicate Functions for more information.",
                "functionId": "eq<time>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:time-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-one-and-only": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"rfc822Name::one_and_only\" is called by urn:oasis:names:tc:xacml:1.0:function:rfc822Name-one-and-only.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "one_and_only<rfc822Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-one-and-only",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-equal": {
                "category": "Equality Predicate Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dayTimeDuration::eq\" is called by urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.1 Equality Predicate Functions for more information.",
                "functionId": "eq<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:all-of": {
                "category": "Higher-order Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"all_of\" is called by urn:oasis:names:tc:xacml:1.0:function:all-of.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.12 Higher-order Bag Functions for more information.",
                "functionId": "all_of",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwAllOf",
                    "brief": "All values pass a test",
                    "camelCaseFunctionLabel": "allOf",
                    "category": "higher_order_array",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Returns true if all values in a list pass the predicate test.",
                    "functionId": "all_of",
                    "functionLabel": "all_of",
                    "functionSignature": "boolean((function (boolean)(...)) predicate, ...any args)",
                    "functionDeclaration": "/* All values pass a test */\nboolean (\n    (function (boolean)(...)) predicate,\n    ...any args)",
                    "parameters": [
                        {
                            "dataType": "function",
                            "dataTypeParameter": "(boolean)(...)",
                            "description": "This function is called for each value in the first list in args or until false is returned.  If no calls return false, the result is true.",
                            "minArgs": -1,
                            "name": "predicate",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        },
                        {
                            "description": "These are the parameters passed to predicate with the exception that the first list is passed one value at a time.  At least one list is required.",
                            "minArgs": 1,
                            "name": "args",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:all-of",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-mod": {
                "category": "Arithmetic Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::mod\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-mod.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.2 Arithmetic Functions for more information.",
                "functionId": "mod<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-mod",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-is-in": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::is_in\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-is-in.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "is_in<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-is-in",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:anyURI-intersection": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"anyURI::intersection\" is called by urn:oasis:names:tc:xacml:1.0:function:anyURI-intersection.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "intersection<anyURI>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:anyURI-intersection",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-bag-size": {
                "category": "Bag Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"yearMonthDuration_1_0::bag_size\" is called by urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-bag-size.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag_size<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-bag-size",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:boolean-at-least-one-member-of": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"boolean::at_least_one_member_of\" is called by urn:oasis:names:tc:xacml:1.0:function:boolean-at-least-one-member-of.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "at_least_one_member_of<boolean>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:boolean-at-least-one-member-of",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:double-equal": {
                "category": "Equality Predicate Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::eq\" is called by urn:oasis:names:tc:xacml:1.0:function:double-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.1 Equality Predicate Functions for more information.",
                "functionId": "eq<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:double-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:date-subset": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"date::subset\" is called by urn:oasis:names:tc:xacml:1.0:function:date-subset.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "subset<date>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:date-subset",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:hexBinary-bag": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"hexBinary::bag\" is called by urn:oasis:names:tc:xacml:1.0:function:hexBinary-bag.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag<hexBinary>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:hexBinary-bag",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:date-equal": {
                "category": "Equality Predicate Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"date::eq\" is called by urn:oasis:names:tc:xacml:1.0:function:date-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.1 Equality Predicate Functions for more information.",
                "functionId": "eq<date>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:date-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-is-in": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"rfc822Name::is_in\" is called by urn:oasis:names:tc:xacml:1.0:function:rfc822Name-is-in.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "is_in<rfc822Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-is-in",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:x500Name-match": {
                "category": "Special Match Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"x500Name::match\" is called by urn:oasis:names:tc:xacml:1.0:function:x500Name-match.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.14 Special Match Functions for more information.",
                "functionId": "match<x500Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:x500Name-match",
                "reverseParameters": true
            },
            "urn:oasis:names:tc:xacml:2.0:function:rfc822Name-regexp-match": {
                "category": "Regular-expression-based Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"rfc822Name::regexp_match\" is called by urn:oasis:names:tc:xacml:2.0:function:rfc822Name-regexp-match.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.13 Regular-expression-based Functions for more information.",
                "functionId": "regexp_match<rfc822Name>",
                "functionURI": "urn:oasis:names:tc:xacml:2.0:function:rfc822Name-regexp-match",
                "reverseParameters": true
            },
            "urn:oasis:names:tc:xacml:3.0:function:dateTime-subtract-yearMonthDuration": {
                "category": "Date and Time Arithmetic Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dateTime::subtract_yearMonthDuration\" is called by urn:oasis:names:tc:xacml:3.0:function:dateTime-subtract-yearMonthDuration.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.7 Date and Time Arithmetic Functions for more information.",
                "functionId": "subtract_yearMonthDuration<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:dateTime-subtract-yearMonthDuration",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-set-equals": {
                "category": "Set Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"yearMonthDuration_1_0::set_equals\" is called by urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-set-equals.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "set_equals<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-set-equals",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dateTime-greater-than-or-equal": {
                "category": "Non-numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dateTime::ge\" is called by urn:oasis:names:tc:xacml:1.0:function:dateTime-greater-than-or-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.8 Non-numeric Comparison Functions for more information.",
                "functionId": "ge<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dateTime-greater-than-or-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:hexBinary-equal": {
                "category": "Equality Predicate Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"hexBinary::eq\" is called by urn:oasis:names:tc:xacml:1.0:function:hexBinary-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.1 Equality Predicate Functions for more information.",
                "functionId": "eq<hexBinary>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:hexBinary-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-set-equals": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"yearMonthDuration::set_equals\" is called by urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-set-equals.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "set_equals<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-set-equals",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:x500Name-subset": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"x500Name::subset\" is called by urn:oasis:names:tc:xacml:1.0:function:x500Name-subset.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "subset<x500Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:x500Name-subset",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:time-subset": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"time::subset\" is called by urn:oasis:names:tc:xacml:1.0:function:time-subset.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "subset<time>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:time-subset",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:2.0:function:ipAddress-regexp-match": {
                "category": "Regular-expression-based Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"ipAddress::regexp_match\" is called by urn:oasis:names:tc:xacml:2.0:function:ipAddress-regexp-match.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.13 Regular-expression-based Functions for more information.",
                "functionId": "regexp_match<ipAddress>",
                "functionURI": "urn:oasis:names:tc:xacml:2.0:function:ipAddress-regexp-match",
                "reverseParameters": true
            },
            "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-bag-size": {
                "category": "Bag Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"dayTimeDuration_1_0::bag_size\" is called by urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-bag-size.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag_size<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-bag-size",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:x500Name-equal": {
                "category": "Equality Predicate Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"x500Name::eq\" is called by urn:oasis:names:tc:xacml:1.0:function:x500Name-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.1 Equality Predicate Functions for more information.",
                "functionId": "eq<x500Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:x500Name-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:dateTime-from-string": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::to_dateTime\" is called by urn:oasis:names:tc:xacml:3.0:function:dateTime-from-string.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_dateTime<string>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:dateTime-from-string",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:boolean-union": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"boolean::union\" is called by urn:oasis:names:tc:xacml:1.0:function:boolean-union.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "union<boolean>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:boolean-union",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:double-one-and-only": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::one_and_only\" is called by urn:oasis:names:tc:xacml:1.0:function:double-one-and-only.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "one_and_only<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:double-one-and-only",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:anyURI-equal": {
                "category": "Equality Predicate Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"anyURI::eq\" is called by urn:oasis:names:tc:xacml:1.0:function:anyURI-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.1 Equality Predicate Functions for more information.",
                "functionId": "eq<anyURI>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:anyURI-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-at-least-one-member-of": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"yearMonthDuration::at_least_one_member_of\" is called by urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-at-least-one-member-of.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "at_least_one_member_of<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-at-least-one-member-of",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-intersection": {
                "category": "Set Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"yearMonthDuration_1_0::intersection\" is called by urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-intersection.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "intersection<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-intersection",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-union": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::union\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-union.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "union<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-union",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:string-normalize-to-lower-case": {
                "category": "String Conversion Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::normalize_to_lower_case\" is called by urn:oasis:names:tc:xacml:1.0:function:string-normalize-to-lower-case.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.3 String Conversion Functions for more information.",
                "functionId": "normalize_to_lower_case<string>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:string-normalize-to-lower-case",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:anyURI-substring": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"anyURI::substring\" is called by urn:oasis:names:tc:xacml:3.0:function:anyURI-substring.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "substring<anyURI>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:anyURI-substring",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:string-regexp-match": {
                "category": "Regular-expression-based Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::regexp_match\" is called by urn:oasis:names:tc:xacml:1.0:function:string-regexp-match.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.13 Regular-expression-based Functions for more information.",
                "functionId": "regexp_match<string>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:string-regexp-match",
                "reverseParameters": true
            },
            "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-is-in": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"yearMonthDuration::is_in\" is called by urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-is-in.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "is_in<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-is-in",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:base64Binary-subset": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"base64Binary::subset\" is called by urn:oasis:names:tc:xacml:1.0:function:base64Binary-subset.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "subset<base64Binary>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:base64Binary-subset",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:2.0:function:time-in-range": {
                "category": "Non-numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"in_range<time>\" is called by urn:oasis:names:tc:xacml:2.0:function:time-in-range.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.8 Non-numeric Comparison Functions for more information.",
                "functionId": "in_range<time>",
                "functionURI": "urn:oasis:names:tc:xacml:2.0:function:time-in-range",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-union": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"rfc822Name::union\" is called by urn:oasis:names:tc:xacml:1.0:function:rfc822Name-union.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "union<rfc822Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-union",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-at-least-one-member-of": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dayTimeDuration::at_least_one_member_of\" is called by urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-at-least-one-member-of.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "at_least_one_member_of<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:dayTimeDuration-at-least-one-member-of",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:x500Name-from-string": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::to_x500Name\" is called by urn:oasis:names:tc:xacml:3.0:function:x500Name-from-string.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_x500Name<string>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:x500Name-from-string",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:base64Binary-is-in": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"base64Binary::is_in\" is called by urn:oasis:names:tc:xacml:1.0:function:base64Binary-is-in.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "is_in<base64Binary>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:base64Binary-is-in",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dateTime-is-in": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dateTime::is_in\" is called by urn:oasis:names:tc:xacml:1.0:function:dateTime-is-in.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "is_in<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dateTime-is-in",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-one-and-only": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"yearMonthDuration::one_and_only\" is called by urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-one-and-only.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "one_and_only<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-one-and-only",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:date-subtract-yearMonthDuration": {
                "category": "Date and Time Arithmetic Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"date::subtract_yearMonthDuration_1_0\" is called by urn:oasis:names:tc:xacml:1.0:function:date-subtract-yearMonthDuration.  This function is deprecated.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.4 for more information.",
                "functionId": "subtract_yearMonthDuration<date>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:date-subtract-yearMonthDuration",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-subtract": {
                "category": "Arithmetic Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::subtract\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-subtract.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.2 Arithmetic Functions for more information.",
                "functionId": "subtract<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-subtract",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:string-greater-than": {
                "category": "Non-numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::gt\" is called by urn:oasis:names:tc:xacml:1.0:function:string-greater-than.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.8 Non-numeric Comparison Functions for more information.",
                "functionId": "gt<string>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:string-greater-than",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:string-set-equals": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::set_equals\" is called by urn:oasis:names:tc:xacml:1.0:function:string-set-equals.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "set_equals<string>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:string-set-equals",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dateTime-subtract-yearMonthDuration": {
                "category": "Date and Time Arithmetic Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"dateTime::subtract_yearMonthDuration_1_0\" is called by urn:oasis:names:tc:xacml:1.0:function:dateTime-subtract-yearMonthDuration.  This function is deprecated.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.4 for more information.",
                "functionId": "subtract_yearMonthDuration<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dateTime-subtract-yearMonthDuration",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:date-less-than-or-equal": {
                "category": "Non-numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"date::le\" is called by urn:oasis:names:tc:xacml:1.0:function:date-less-than-or-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.8 Non-numeric Comparison Functions for more information.",
                "functionId": "le<date>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:date-less-than-or-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:base64Binary-intersection": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"base64Binary::intersection\" is called by urn:oasis:names:tc:xacml:1.0:function:base64Binary-intersection.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "intersection<base64Binary>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:base64Binary-intersection",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:string-from-dateTime": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dateTime::to_string\" is called by urn:oasis:names:tc:xacml:3.0:function:string-from-dateTime.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_string<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:string-from-dateTime",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:string-at-least-one-member-of": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::at_least_one_member_of\" is called by urn:oasis:names:tc:xacml:1.0:function:string-at-least-one-member-of.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "at_least_one_member_of<string>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:string-at-least-one-member-of",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:integer-from-string": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::to_integer\" is called by urn:oasis:names:tc:xacml:3.0:function:integer-from-string.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_integer<string>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:integer-from-string",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-union": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"yearMonthDuration::union\" is called by urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-union.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "union<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-union",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-subset": {
                "category": "Set Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"dayTimeDuration_1_0::subset\" is called by urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-subset.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "subset<dayTimeDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-subset",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:2.0:function:ipAddress-bag": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"ipAddress::bag\" is called by urn:oasis:names:tc:xacml:2.0:function:ipAddress-bag.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag<ipAddress>",
                "functionURI": "urn:oasis:names:tc:xacml:2.0:function:ipAddress-bag",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:anyURI-bag-size": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"anyURI::bag_size\" is called by urn:oasis:names:tc:xacml:1.0:function:anyURI-bag-size.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag_size<anyURI>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:anyURI-bag-size",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:2.0:function:dnsName-regexp-match": {
                "category": "Regular-expression-based Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dnsName::regexp_match\" is called by urn:oasis:names:tc:xacml:2.0:function:dnsName-regexp-match.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.13 Regular-expression-based Functions for more information.",
                "functionId": "regexp_match<dnsName>",
                "functionURI": "urn:oasis:names:tc:xacml:2.0:function:dnsName-regexp-match",
                "reverseParameters": true
            },
            "urn:oasis:names:tc:xacml:3.0:function:anyURI-ends-with": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"anyURI::ends_with\" is called by urn:oasis:names:tc:xacml:3.0:function:anyURI-ends-with.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "ends_with<anyURI>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:anyURI-ends-with",
                "reverseParameters": true
            },
            "urn:oasis:names:tc:xacml:1.0:function:hexBinary-set-equals": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"hexBinary::set_equals\" is called by urn:oasis:names:tc:xacml:1.0:function:hexBinary-set-equals.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "set_equals<hexBinary>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:hexBinary-set-equals",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dateTime-greater-than": {
                "category": "Non-numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dateTime::gt\" is called by urn:oasis:names:tc:xacml:1.0:function:dateTime-greater-than.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.8 Non-numeric Comparison Functions for more information.",
                "functionId": "gt<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dateTime-greater-than",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-intersection": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"rfc822Name::intersection\" is called by urn:oasis:names:tc:xacml:1.0:function:rfc822Name-intersection.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "intersection<rfc822Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-intersection",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:2.0:function:ipAddress-one-and-only": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"ipAddress::one_and_only\" is called by urn:oasis:names:tc:xacml:2.0:function:ipAddress-one-and-only.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "one_and_only<ipAddress>",
                "functionURI": "urn:oasis:names:tc:xacml:2.0:function:ipAddress-one-and-only",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:base64Binary-union": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"base64Binary::union\" is called by urn:oasis:names:tc:xacml:1.0:function:base64Binary-union.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "union<base64Binary>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:base64Binary-union",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dateTime-union": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dateTime::union\" is called by urn:oasis:names:tc:xacml:1.0:function:dateTime-union.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "union<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dateTime-union",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:boolean-equal": {
                "category": "Equality Predicate Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"boolean::eq\" is called by urn:oasis:names:tc:xacml:1.0:function:boolean-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.1 Equality Predicate Functions for more information.",
                "functionId": "eq<boolean>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:boolean-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:anyURI-contains": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"anyURI::contains\" is called by urn:oasis:names:tc:xacml:3.0:function:anyURI-contains.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "contains<anyURI>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:anyURI-contains",
                "reverseParameters": true
            },
            "urn:oasis:names:tc:xacml:1.0:function:dateTime-add-yearMonthDuration": {
                "category": "Date and Time Arithmetic Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"dateTime::add_yearMonthDuration_1_0\" is called by urn:oasis:names:tc:xacml:1.0:function:dateTime-add-yearMonthDuration.  This function is deprecated.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.4 for more information.",
                "functionId": "add_yearMonthDuration<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dateTime-add-yearMonthDuration",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:any-of-all": {
                "category": "Higher-order Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"any_of_all\" is called by urn:oasis:names:tc:xacml:1.0:function:any-of-all.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.12 Higher-order Bag Functions for more information.",
                "functionId": "any_of_all",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwAnyOfAll",
                    "brief": "Combinations of any in list1 and all in list2 true",
                    "camelCaseFunctionLabel": "anyOfAll",
                    "category": "higher_order_array",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Returns true if the result of calling predicate with all of the combination of values from list2 and any of the values of list1 returns true.",
                    "functionId": "any_of_all",
                    "functionLabel": "any_of_all",
                    "functionSignature": "boolean((function (boolean)(value1, value2)) predicate, list list1, list list2)",
                    "functionDeclaration": "/* Combinations of any in list1 and all in list2 true */\nboolean (\n    (function (boolean)(value1, value2)) predicate,\n    list list1,\n    list list2)",
                    "parameters": [
                        {
                            "dataType": "function",
                            "dataTypeParameter": "(boolean)(value1, value2)",
                            "description": "The predicate is passed two parameters, the first is a value from list1 and the second is a value from list2.",
                            "minArgs": -1,
                            "name": "predicate",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        },
                        {
                            "dataType": "array",
                            "minArgs": -1,
                            "name": "list1",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        },
                        {
                            "dataType": "array",
                            "minArgs": -1,
                            "name": "list2",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:any-of-all",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-subset": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::subset\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-subset.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "subset<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-subset",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:boolean-set-equals": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"boolean::set_equals\" is called by urn:oasis:names:tc:xacml:1.0:function:boolean-set-equals.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "set_equals<boolean>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:boolean-set-equals",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-match": {
                "category": "Special Match Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"rfc822Name::match\" is called by urn:oasis:names:tc:xacml:1.0:function:rfc822Name-match.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.14 Special Match Functions for more information.",
                "functionId": "match<rfc822Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-match",
                "reverseParameters": true
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-equal": {
                "category": "Equality Predicate Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::eq\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.1 Equality Predicate Functions for more information.",
                "functionId": "eq<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:string-from-integer": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::to_string\" is called by urn:oasis:names:tc:xacml:3.0:function:string-from-integer.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_string<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:string-from-integer",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:string-one-and-only": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::one_and_only\" is called by urn:oasis:names:tc:xacml:1.0:function:string-one-and-only.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "one_and_only<string>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:string-one-and-only",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-equal": {
                "category": "Equality Predicate Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"rfc822Name::eq\" is called by urn:oasis:names:tc:xacml:1.0:function:rfc822Name-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.1 Equality Predicate Functions for more information.",
                "functionId": "eq<rfc822Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:date-bag-size": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"date::bag_size\" is called by urn:oasis:names:tc:xacml:1.0:function:date-bag-size.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag_size<date>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:date-bag-size",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:map": {
                "category": "Higher-order Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"map\" is called by urn:oasis:names:tc:xacml:1.0:function:map.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.12 Higher-order Bag Functions for more information.",
                "functionId": "map",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwMap",
                    "brief": "Maps values of a list",
                    "camelCaseFunctionLabel": "map",
                    "category": "higher_order_array",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "This function creates a list of the results of calling functor with each value of the first list in args",
                    "functionId": "map",
                    "functionLabel": "map",
                    "functionSignature": "list((function ()(...)) functor, list list)",
                    "functionDeclaration": "/* Maps values of a list */\nlist (\n    (function ()(...)) functor,\n    list list)",
                    "parameters": [
                        {
                            "dataType": "function",
                            "dataTypeParameter": "()(...)",
                            "minArgs": -1,
                            "name": "functor",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        },
                        {
                            "dataType": "array",
                            "description": "These are the parameters passed to functor with the exception that the first list is passed one value at a time.  At least one list is required.",
                            "minArgs": -1,
                            "name": "array",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "array",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:map",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:double-intersection": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::intersection\" is called by urn:oasis:names:tc:xacml:1.0:function:double-intersection.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "intersection<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:double-intersection",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dateTime-one-and-only": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dateTime::one_and_only\" is called by urn:oasis:names:tc:xacml:1.0:function:dateTime-one-and-only.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "one_and_only<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dateTime-one-and-only",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:date-greater-than": {
                "category": "Non-numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"date::gt\" is called by urn:oasis:names:tc:xacml:1.0:function:date-greater-than.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.8 Non-numeric Comparison Functions for more information.",
                "functionId": "gt<date>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:date-greater-than",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:x500Name-bag-size": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"x500Name::bag_size\" is called by urn:oasis:names:tc:xacml:1.0:function:x500Name-bag-size.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag_size<x500Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:x500Name-bag-size",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:string-bag": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::bag\" is called by urn:oasis:names:tc:xacml:1.0:function:string-bag.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag<string>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:string-bag",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:anyURI-bag": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"anyURI::bag\" is called by urn:oasis:names:tc:xacml:1.0:function:anyURI-bag.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag<anyURI>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:anyURI-bag",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dateTime-subset": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dateTime::subset\" is called by urn:oasis:names:tc:xacml:1.0:function:dateTime-subset.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "subset<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dateTime-subset",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:anyURI-starts-with": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"anyURI::starts_with\" is called by urn:oasis:names:tc:xacml:3.0:function:anyURI-starts-with.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "starts_with<anyURI>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:anyURI-starts-with",
                "reverseParameters": true
            },
            "urn:oasis:names:tc:xacml:1.0:function:not": {
                "category": "Logical Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"not\" is called by urn:oasis:names:tc:xacml:1.0:function:not.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.5 Logical Functions for more information.",
                "functionId": "not",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwNot",
                    "brief": "Logical not",
                    "camelCaseFunctionLabel": "not",
                    "category": "logical",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Evaluates boolean arg1 returning boolean true if arg1 evaluates to false and false if arg1 evaluates to true.",
                    "functionId": "not",
                    "functionLabel": "not",
                    "functionSignature": "boolean(boolean arg)",
                    "functionDeclaration": "/* Logical not */\nboolean (\n    boolean arg)",
                    "op": "!",
                    "parameters": [
                        {
                            "dataType": "boolean",
                            "minArgs": -1,
                            "name": "arg",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:not",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:string-from-time": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"time::to_string\" is called by urn:oasis:names:tc:xacml:3.0:function:string-from-time.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_string<time>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:string-from-time",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:rfc822Name-from-string": {
                "category": "String Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"string::to_rfc822Name\" is called by urn:oasis:names:tc:xacml:3.0:function:rfc822Name-from-string.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.9 String Functions for more information.",
                "functionId": "to_rfc822Name<string>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:rfc822Name-from-string",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:2.0:function:x500Name-regexp-match": {
                "category": "Regular-expression-based Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"x500Name::regexp_match\" is called by urn:oasis:names:tc:xacml:2.0:function:x500Name-regexp-match.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.13 Regular-expression-based Functions for more information.",
                "functionId": "regexp_match<x500Name>",
                "functionURI": "urn:oasis:names:tc:xacml:2.0:function:x500Name-regexp-match",
                "reverseParameters": true
            },
            "urn:oasis:names:tc:xacml:1.0:function:base64Binary-bag": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"base64Binary::bag\" is called by urn:oasis:names:tc:xacml:1.0:function:base64Binary-bag.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag<base64Binary>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:base64Binary-bag",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:boolean-subset": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"boolean::subset\" is called by urn:oasis:names:tc:xacml:1.0:function:boolean-subset.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "subset<boolean>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:boolean-subset",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-intersection": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"yearMonthDuration::intersection\" is called by urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-intersection.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "intersection<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-intersection",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-equal": {
                "category": "Equality Predicate Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"yearMonthDuration::eq\" is called by urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.1 Equality Predicate Functions for more information.",
                "functionId": "eq<yearMonthDuration>",
                "functionURI": "urn:oasis:names:tc:xacml:3.0:function:yearMonthDuration-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:2.0:function:dnsName-one-and-only": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dnsName::one_and_only\" is called by urn:oasis:names:tc:xacml:2.0:function:dnsName-one-and-only.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "one_and_only<dnsName>",
                "functionURI": "urn:oasis:names:tc:xacml:2.0:function:dnsName-one-and-only",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:double-to-integer": {
                "category": "Numeric Data-Type Conversion Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::to_integer\" is called by urn:oasis:names:tc:xacml:1.0:function:double-to-integer.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.4 Numeric Data-Type Conversion Functions for more information.",
                "functionId": "to_integer<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:double-to-integer",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:time-bag": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"time::bag\" is called by urn:oasis:names:tc:xacml:1.0:function:time-bag.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag<time>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:time-bag",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:xpath-node-count": {
                "category": "XPath-based Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"xpath_node_count_1_0\" is called by urn:oasis:names:tc:xacml:1.0:function:xpath-node-count.  This function is deprecated.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.4 for more information.",
                "functionId": "xpath_node_count",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwXpathNodeCount",
                    "brief": "Number of nodes in node-set",
                    "camelCaseFunctionLabel": "xpathNodeCount",
                    "category": "xpathExpression",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "The number of nodes in a node-set.",
                    "functionId": "xpath_node_count",
                    "functionLabel": "xpath_node_count",
                    "functionSignature": "integer(xpathExpression nodeset)",
                    "functionDeclaration": "/* Number of nodes in node-set */\ninteger (\n    xpathExpression nodeset)",
                    "parameters": [
                        {
                            "dataType": "xpathExpression",
                            "minArgs": -1,
                            "name": "nodeset",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "integer",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:xpath-node-count",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:base64Binary-equal": {
                "category": "Equality Predicate Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"base64Binary::eq\" is called by urn:oasis:names:tc:xacml:1.0:function:base64Binary-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.1 Equality Predicate Functions for more information.",
                "functionId": "eq<base64Binary>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:base64Binary-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:double-subtract": {
                "category": "Arithmetic Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"double::subtract\" is called by urn:oasis:names:tc:xacml:1.0:function:double-subtract.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.2 Arithmetic Functions for more information.",
                "functionId": "subtract<double>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:double-subtract",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:dateTime-equal": {
                "category": "Equality Predicate Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dateTime::eq\" is called by urn:oasis:names:tc:xacml:1.0:function:dateTime-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.1 Equality Predicate Functions for more information.",
                "functionId": "eq<dateTime>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:dateTime-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:xpath-node-match": {
                "category": "XPath-based Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"xpath_node_match_1_0\" is called by urn:oasis:names:tc:xacml:1.0:function:xpath-node-match.  This function is deprecated.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.4 for more information.",
                "functionId": "xpath_node_match",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwXpathNodeMatch",
                    "brief": "Checks whether two node-sets or their children have an equal node",
                    "camelCaseFunctionLabel": "xpathNodeMatch",
                    "category": "xpathExpression",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Returns true if any of the nodes matched by nodeset1 are equal to any of the nodes matched by nodeset2 or their corresponding children.",
                    "functionId": "xpath_node_match",
                    "functionLabel": "xpath_node_match",
                    "functionSignature": "boolean(xpathExpression nodeset2, xpathExpression arg2)",
                    "functionDeclaration": "/* Checks whether two node-sets or their children have an equal node */\nboolean (\n    xpathExpression nodeset2,\n    xpathExpression arg2)",
                    "parameters": [
                        {
                            "dataType": "xpathExpression",
                            "minArgs": -1,
                            "name": "nodeset2",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        },
                        {
                            "dataType": "xpathExpression",
                            "minArgs": -1,
                            "name": "arg2",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:xpath-node-match",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:anyURI-at-least-one-member-of": {
                "category": "Set Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"anyURI::at_least_one_member_of\" is called by urn:oasis:names:tc:xacml:1.0:function:anyURI-at-least-one-member-of.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.11 Set Functions for more information.",
                "functionId": "at_least_one_member_of<anyURI>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:anyURI-at-least-one-member-of",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-bag-size": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"rfc822Name::bag_size\" is called by urn:oasis:names:tc:xacml:1.0:function:rfc822Name-bag-size.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag_size<rfc822Name>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:rfc822Name-bag-size",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:date-one-and-only": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"date::one_and_only\" is called by urn:oasis:names:tc:xacml:1.0:function:date-one-and-only.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "one_and_only<date>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:date-one-and-only",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:integer-less-than-or-equal": {
                "category": "Numeric Comparison Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"integer::le\" is called by urn:oasis:names:tc:xacml:1.0:function:integer-less-than-or-equal.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.6 Numeric Comparison Functions for more information.",
                "functionId": "le<integer>",
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:integer-less-than-or-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:xpath-node-equal": {
                "category": "XPath-based Functions",
                "deprecated": true,
                "description": "Adaptive Framework function \"xpath_node_eq_1_0\" is called by urn:oasis:names:tc:xacml:1.0:function:xpath-node-equal.  This function is deprecated.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.4 for more information.",
                "functionId": "xpath_node_eq",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwXpathNodeEq",
                    "brief": "Checks for equal",
                    "camelCaseFunctionLabel": "xpathNodeEq",
                    "category": "xpathExpression",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Checks for xpathExpression arg1 is equal to xpathExpression arg2 and return the boolean result.",
                    "functionId": "xpath_node_eq",
                    "functionLabel": "xpath_node_eq",
                    "functionSignature": "boolean(xpathExpression arg1, xpathExpression arg2)",
                    "functionDeclaration": "/* Checks for equal */\nboolean (\n    xpathExpression arg1,\n    xpathExpression arg2)",
                    "op": "==",
                    "parameters": [
                        {
                            "dataType": "xpathExpression",
                            "minArgs": -1,
                            "name": "arg1",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        },
                        {
                            "dataType": "xpathExpression",
                            "minArgs": -1,
                            "name": "arg2",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:xpath-node-equal",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:2.0:function:dnsName-bag": {
                "category": "Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"dnsName::bag\" is called by urn:oasis:names:tc:xacml:2.0:function:dnsName-bag.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.10 Bag Functions for more information.",
                "functionId": "bag<dnsName>",
                "functionURI": "urn:oasis:names:tc:xacml:2.0:function:dnsName-bag",
                "reverseParameters": false
            },
            "urn:oasis:names:tc:xacml:1.0:function:any-of-any": {
                "category": "Higher-order Bag Functions",
                "deprecated": false,
                "description": "Adaptive Framework function \"any_of_any\" is called by urn:oasis:names:tc:xacml:1.0:function:any-of-any.  See http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html Appendix A.3.12 Higher-order Bag Functions for more information.",
                "functionId": "any_of_any",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwAnyOfAny",
                    "brief": "Any combinations true",
                    "camelCaseFunctionLabel": "anyOfAny",
                    "category": "higher_order_array",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "This function returns true if the result of calling predicate with any of the combination of values from list1 and list2 returns true.",
                    "functionId": "any_of_any",
                    "functionLabel": "any_of_any",
                    "functionSignature": "boolean((function (boolean)(value1, value2)) predicate, list list1, list list2)",
                    "functionDeclaration": "/* Any combinations true */\nboolean (\n    (function (boolean)(value1, value2)) predicate,\n    list list1,\n    list list2)",
                    "parameters": [
                        {
                            "dataType": "function",
                            "dataTypeParameter": "(boolean)(value1, value2)",
                            "description": "The predicate is passed two parameters, the first is a value from list1 and the second is a value from list2.",
                            "minArgs": -1,
                            "name": "predicate",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        },
                        {
                            "dataType": "array",
                            "minArgs": -1,
                            "name": "list1",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        },
                        {
                            "dataType": "array",
                            "minArgs": -1,
                            "name": "list2",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": true,
                    "returns": {
                        "dataType": "boolean",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "functionURI": "urn:oasis:names:tc:xacml:1.0:function:any-of-any",
                "reverseParameters": false
            }
        },
        "xacmlPolicyCombiningAlgorithm": {
            "urn:oasis:names:tc:xacml:3.0:policy-combining-algorithm:ordered-permit-overrides": {
                "deprecated": false,
                "description": "Policy combining algorithm for permit overrides.",
                "functionId": "policy_ordered_permit_overrides",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwPolicyOrderedPermitOverrides",
                    "brief": "Policy combining algorithm - permit_overrides",
                    "camelCaseFunctionLabel": "policyOrderedPermitOverrides",
                    "category": "policy_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Policy combining algorithm for permit overrides.",
                    "functionId": "policy_ordered_permit_overrides",
                    "functionLabel": "policy_ordered_permit_overrides",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Policy combining algorithm - permit_overrides */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "policyCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:3.0:policy-combining-algorithm:ordered-permit-overrides"
            },
            "urn:oasis:names:tc:xacml:3.0:policy-combining-algorithm:deny-unless-permit": {
                "deprecated": false,
                "description": "Policy combining algorithm for deny unless permit.",
                "functionId": "policy_deny_unless_permit",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwPolicyDenyUnlessPermit",
                    "brief": "Policy combining algorithm - deny_unless_permit",
                    "camelCaseFunctionLabel": "policyDenyUnlessPermit",
                    "category": "policy_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Policy combining algorithm for deny unless permit.",
                    "functionId": "policy_deny_unless_permit",
                    "functionLabel": "policy_deny_unless_permit",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Policy combining algorithm - deny_unless_permit */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "policyCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:3.0:policy-combining-algorithm:deny-unless-permit"
            },
            "urn:oasis:names:tc:xacml:3.0:policy-combining-algorithm:permit-unless-deny": {
                "deprecated": false,
                "description": "Policy combining algorithm for permit unless deny.",
                "functionId": "policy_permit_unless_deny",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwPolicyPermitUnlessDeny",
                    "brief": "Policy combining algorithm - permit_unless_deny",
                    "camelCaseFunctionLabel": "policyPermitUnlessDeny",
                    "category": "policy_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Policy combining algorithm for permit unless deny.",
                    "functionId": "policy_permit_unless_deny",
                    "functionLabel": "policy_permit_unless_deny",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Policy combining algorithm - permit_unless_deny */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "policyCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:3.0:policy-combining-algorithm:permit-unless-deny"
            },
            "urn:oasis:names:tc:xacml:1.0:policy-combining-algorithm:only-one-applicable": {
                "deprecated": false,
                "description": "Policy combining algorithm for only one applicable.",
                "functionId": "policy_only_one_applicable",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwPolicyOnlyOneApplicable",
                    "brief": "Policy combining algorithm - only_one_applicable",
                    "camelCaseFunctionLabel": "policyOnlyOneApplicable",
                    "category": "policy_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Policy combining algorithm for only one applicable.",
                    "functionId": "policy_only_one_applicable",
                    "functionLabel": "policy_only_one_applicable",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Policy combining algorithm - only_one_applicable */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "policyCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:1.0:policy-combining-algorithm:only-one-applicable"
            },
            "urn:oasis:names:tc:xacml:1.0:policy-combining-algorithm:deny-overrides": {
                "deprecated": true,
                "description": "Policy combining algorithm for legacy policy deny overrides.",
                "functionId": "policy_deny_overrides_1_0",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwPolicyDenyOverrides10",
                    "brief": "Policy combining algorithm - legacy_policy_deny_overrides",
                    "camelCaseFunctionLabel": "policyDenyOverrides10",
                    "category": "policy_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Policy combining algorithm for legacy policy deny overrides.",
                    "functionId": "policy_deny_overrides_1_0",
                    "functionLabel": "policy_deny_overrides_1_0",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Policy combining algorithm - legacy_policy_deny_overrides */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "policyCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:1.0:policy-combining-algorithm:deny-overrides"
            },
            "urn:oasis:names:tc:xacml:1.0:policy-combining-algorithm:permit-overrides": {
                "deprecated": true,
                "description": "Policy combining algorithm for legacy policy permit overrides.",
                "functionId": "policy_permit_overrides_1_0",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwPolicyPermitOverrides10",
                    "brief": "Policy combining algorithm - legacy_policy_permit_overrides",
                    "camelCaseFunctionLabel": "policyPermitOverrides10",
                    "category": "policy_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Policy combining algorithm for legacy policy permit overrides.",
                    "functionId": "policy_permit_overrides_1_0",
                    "functionLabel": "policy_permit_overrides_1_0",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Policy combining algorithm - legacy_policy_permit_overrides */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "policyCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:1.0:policy-combining-algorithm:permit-overrides"
            },
            "urn:oasis:names:tc:xacml:3.0:policy-combining-algorithm:deny-overrides": {
                "deprecated": false,
                "description": "Policy combining algorithm for deny overrides.",
                "functionId": "policy_deny_overrides",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwPolicyDenyOverrides",
                    "brief": "Policy combining algorithm - deny_overrides",
                    "camelCaseFunctionLabel": "policyDenyOverrides",
                    "category": "policy_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Policy combining algorithm for deny overrides.",
                    "functionId": "policy_deny_overrides",
                    "functionLabel": "policy_deny_overrides",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Policy combining algorithm - deny_overrides */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "policyCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:3.0:policy-combining-algorithm:deny-overrides"
            },
            "urn:oasis:names:tc:xacml:1.0:policy-combining-algorithm:first-applicable": {
                "deprecated": false,
                "description": "Policy combining algorithm for first applicable.",
                "functionId": "policy_first_applicable",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwPolicyFirstApplicable",
                    "brief": "Policy combining algorithm - first_applicable",
                    "camelCaseFunctionLabel": "policyFirstApplicable",
                    "category": "policy_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Policy combining algorithm for first applicable.",
                    "functionId": "policy_first_applicable",
                    "functionLabel": "policy_first_applicable",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Policy combining algorithm - first_applicable */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "policyCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:1.0:policy-combining-algorithm:first-applicable"
            },
            "urn:oasis:names:tc:xacml:3.0:policy-combining-algorithm:permit-overrides": {
                "deprecated": false,
                "description": "Policy combining algorithm for permit overrides.",
                "functionId": "policy_permit_overrides",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwPolicyPermitOverrides",
                    "brief": "Policy combining algorithm - permit_overrides",
                    "camelCaseFunctionLabel": "policyPermitOverrides",
                    "category": "policy_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Policy combining algorithm for permit overrides.",
                    "functionId": "policy_permit_overrides",
                    "functionLabel": "policy_permit_overrides",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Policy combining algorithm - permit_overrides */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "policyCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:3.0:policy-combining-algorithm:permit-overrides"
            },
            "urn:oasis:names:tc:xacml:1.1:policy-combining-algorithm:ordered-deny-overrides": {
                "deprecated": true,
                "description": "Policy combining algorithm for legacy policy deny overrides.",
                "functionId": "policy_ordered_deny_overrides_1_1",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwPolicyOrderedDenyOverrides11",
                    "brief": "Policy combining algorithm - legacy_policy_deny_overrides",
                    "camelCaseFunctionLabel": "policyOrderedDenyOverrides11",
                    "category": "policy_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Policy combining algorithm for legacy policy deny overrides.",
                    "functionId": "policy_ordered_deny_overrides_1_1",
                    "functionLabel": "policy_ordered_deny_overrides_1_1",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Policy combining algorithm - legacy_policy_deny_overrides */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "policyCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:1.1:policy-combining-algorithm:ordered-deny-overrides"
            },
            "urn:oasis:names:tc:xacml:3.0:policy-combining-algorithm:ordered-deny-overrides": {
                "deprecated": false,
                "description": "Policy combining algorithm for deny overrides.",
                "functionId": "policy_ordered_deny_overrides",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwPolicyOrderedDenyOverrides",
                    "brief": "Policy combining algorithm - deny_overrides",
                    "camelCaseFunctionLabel": "policyOrderedDenyOverrides",
                    "category": "policy_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Policy combining algorithm for deny overrides.",
                    "functionId": "policy_ordered_deny_overrides",
                    "functionLabel": "policy_ordered_deny_overrides",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Policy combining algorithm - deny_overrides */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "policyCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:3.0:policy-combining-algorithm:ordered-deny-overrides"
            },
            "urn:oasis:names:tc:xacml:1.1:policy-combining-algorithm:ordered-permit-overrides": {
                "deprecated": true,
                "description": "Policy combining algorithm for legacy policy permit overrides.",
                "functionId": "policy_ordered_permit_overrides_1_1",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwPolicyOrderedPermitOverrides11",
                    "brief": "Policy combining algorithm - legacy_policy_permit_overrides",
                    "camelCaseFunctionLabel": "policyOrderedPermitOverrides11",
                    "category": "policy_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Policy combining algorithm for legacy policy permit overrides.",
                    "functionId": "policy_ordered_permit_overrides_1_1",
                    "functionLabel": "policy_ordered_permit_overrides_1_1",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Policy combining algorithm - legacy_policy_permit_overrides */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "policyCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:1.1:policy-combining-algorithm:ordered-permit-overrides"
            }
        },
        "xacmlRuleCombiningAlgorithm": {
            "urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:deny-overrides": {
                "deprecated": true,
                "description": "Rule combining algorithm for legacy rule deny overrides.",
                "functionId": "rule_deny_overrides_1_0",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwRuleDenyOverrides10",
                    "brief": "Rule combining algorithm - legacy_rule_deny_overrides",
                    "camelCaseFunctionLabel": "ruleDenyOverrides10",
                    "category": "rule_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Rule combining algorithm for legacy rule deny overrides.",
                    "functionId": "rule_deny_overrides_1_0",
                    "functionLabel": "rule_deny_overrides_1_0",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Rule combining algorithm - legacy_rule_deny_overrides */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "ruleCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:deny-overrides"
            },
            "urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:permit-overrides": {
                "deprecated": true,
                "description": "Rule combining algorithm for legacy rule permit overrides.",
                "functionId": "rule_permit_overrides_1_0",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwRulePermitOverrides10",
                    "brief": "Rule combining algorithm - legacy_rule_permit_overrides",
                    "camelCaseFunctionLabel": "rulePermitOverrides10",
                    "category": "rule_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Rule combining algorithm for legacy rule permit overrides.",
                    "functionId": "rule_permit_overrides_1_0",
                    "functionLabel": "rule_permit_overrides_1_0",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Rule combining algorithm - legacy_rule_permit_overrides */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "ruleCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:permit-overrides"
            },
            "urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:deny-overrides": {
                "deprecated": false,
                "description": "Rule combining algorithm for deny overrides.",
                "functionId": "rule_deny_overrides",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwRuleDenyOverrides",
                    "brief": "Rule combining algorithm - deny_overrides",
                    "camelCaseFunctionLabel": "ruleDenyOverrides",
                    "category": "rule_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Rule combining algorithm for deny overrides.",
                    "functionId": "rule_deny_overrides",
                    "functionLabel": "rule_deny_overrides",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Rule combining algorithm - deny_overrides */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "ruleCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:deny-overrides"
            },
            "urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:first-applicable": {
                "deprecated": false,
                "description": "Rule combining algorithm for first applicable.",
                "functionId": "rule_first_applicable",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwRuleFirstApplicable",
                    "brief": "Rule combining algorithm - first_applicable",
                    "camelCaseFunctionLabel": "ruleFirstApplicable",
                    "category": "rule_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Rule combining algorithm for first applicable.",
                    "functionId": "rule_first_applicable",
                    "functionLabel": "rule_first_applicable",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Rule combining algorithm - first_applicable */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "ruleCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:first-applicable"
            },
            "urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:permit-overrides": {
                "deprecated": false,
                "description": "Rule combining algorithm for permit overrides.",
                "functionId": "rule_permit_overrides",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwRulePermitOverrides",
                    "brief": "Rule combining algorithm - permit_overrides",
                    "camelCaseFunctionLabel": "rulePermitOverrides",
                    "category": "rule_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Rule combining algorithm for permit overrides.",
                    "functionId": "rule_permit_overrides",
                    "functionLabel": "rule_permit_overrides",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Rule combining algorithm - permit_overrides */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "ruleCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:permit-overrides"
            },
            "urn:oasis:names:tc:xacml:1.1:rule-combining-algorithm:ordered-deny-overrides": {
                "deprecated": true,
                "description": "Rule combining algorithm for legacy rule deny overrides.",
                "functionId": "rule_ordered_deny_overrides_1_1",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwRuleOrderedDenyOverrides11",
                    "brief": "Rule combining algorithm - legacy_rule_deny_overrides",
                    "camelCaseFunctionLabel": "ruleOrderedDenyOverrides11",
                    "category": "rule_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Rule combining algorithm for legacy rule deny overrides.",
                    "functionId": "rule_ordered_deny_overrides_1_1",
                    "functionLabel": "rule_ordered_deny_overrides_1_1",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Rule combining algorithm - legacy_rule_deny_overrides */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "ruleCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:1.1:rule-combining-algorithm:ordered-deny-overrides"
            },
            "urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:ordered-deny-overrides": {
                "deprecated": false,
                "description": "Rule combining algorithm for deny overrides.",
                "functionId": "rule_ordered_deny_overrides",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwRuleOrderedDenyOverrides",
                    "brief": "Rule combining algorithm - deny_overrides",
                    "camelCaseFunctionLabel": "ruleOrderedDenyOverrides",
                    "category": "rule_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Rule combining algorithm for deny overrides.",
                    "functionId": "rule_ordered_deny_overrides",
                    "functionLabel": "rule_ordered_deny_overrides",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Rule combining algorithm - deny_overrides */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "ruleCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:ordered-deny-overrides"
            },
            "urn:oasis:names:tc:xacml:1.1:rule-combining-algorithm:ordered-permit-overrides": {
                "deprecated": true,
                "description": "Rule combining algorithm for legacy rule permit overrides.",
                "functionId": "rule_ordered_permit_overrides_1_1",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwRuleOrderedPermitOverrides11",
                    "brief": "Rule combining algorithm - legacy_rule_permit_overrides",
                    "camelCaseFunctionLabel": "ruleOrderedPermitOverrides11",
                    "category": "rule_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Rule combining algorithm for legacy rule permit overrides.",
                    "functionId": "rule_ordered_permit_overrides_1_1",
                    "functionLabel": "rule_ordered_permit_overrides_1_1",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Rule combining algorithm - legacy_rule_permit_overrides */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "ruleCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:1.1:rule-combining-algorithm:ordered-permit-overrides"
            },
            "urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:ordered-permit-overrides": {
                "deprecated": false,
                "description": "Rule combining algorithm for permit overrides.",
                "functionId": "rule_ordered_permit_overrides",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwRuleOrderedPermitOverrides",
                    "brief": "Rule combining algorithm - permit_overrides",
                    "camelCaseFunctionLabel": "ruleOrderedPermitOverrides",
                    "category": "rule_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Rule combining algorithm for permit overrides.",
                    "functionId": "rule_ordered_permit_overrides",
                    "functionLabel": "rule_ordered_permit_overrides",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Rule combining algorithm - permit_overrides */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "ruleCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:ordered-permit-overrides"
            },
            "urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:deny-unless-permit": {
                "deprecated": false,
                "description": "Rule combining algorithm for deny unless permit.",
                "functionId": "rule_deny_unless_permit",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwRuleDenyUnlessPermit",
                    "brief": "Rule combining algorithm - deny_unless_permit",
                    "camelCaseFunctionLabel": "ruleDenyUnlessPermit",
                    "category": "rule_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Rule combining algorithm for deny unless permit.",
                    "functionId": "rule_deny_unless_permit",
                    "functionLabel": "rule_deny_unless_permit",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Rule combining algorithm - deny_unless_permit */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "ruleCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:deny-unless-permit"
            },
            "urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:permit-unless-deny": {
                "deprecated": false,
                "description": "Rule combining algorithm for permit unless deny.",
                "functionId": "rule_permit_unless_deny",
                "functionObject": {
                    "afwCamelCaseFunctionLabel": "afwRulePermitUnlessDeny",
                    "brief": "Rule combining algorithm - permit_unless_deny",
                    "camelCaseFunctionLabel": "rulePermitUnlessDeny",
                    "category": "rule_combining_algorithm",
                    "dataTypeMethodNumber": 0,
                    "deprecated": false,
                    "description": "Rule combining algorithm for permit unless deny.",
                    "functionId": "rule_permit_unless_deny",
                    "functionLabel": "rule_permit_unless_deny",
                    "functionSignature": "object(list policies)",
                    "functionDeclaration": "/* Rule combining algorithm - permit_unless_deny */\nobject (\n    list policies)",
                    "parameters": [
                        {
                            "dataType": "array",
                            "description": "List of _AdaptiveAuthorizationPolicy_ objects.",
                            "minArgs": -1,
                            "name": "policies",
                            "optional": false,
                            "polymorphicDataType": false,
                            "polymorphicDataTypeParameter": false
                        }
                    ],
                    "polymorphic": false,
                    "pure": false,
                    "returns": {
                        "dataType": "object",
                        "description": "Algorithm result.",
                        "minArgs": -1,
                        "optional": false,
                        "polymorphicDataType": false,
                        "polymorphicDataTypeParameter": false
                    },
                    "scriptSupportNumber": 0
                },
                "ruleCombiningAlgorithmURI": "urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:permit-unless-deny"
            }
        }
    },
    "status": "success"
}