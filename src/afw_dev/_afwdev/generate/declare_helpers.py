#! /usr/bin/env python3

##
# @file declare_helpers.py
# @ingroup afwdev_generate
#

import os
from _afwdev.generate import c
from _afwdev.common import msg, nfc, package

def generate(generated_by, options):

    prefix = options['prefix']
    generate_dir_path = options['generate_dir_path']
    generated_dir_path = options['generated_dir_path']
    exports = options['exports']
    uprefix = prefix.upper()
    filename = prefix + 'declare_helpers.h'
    srcdir = prefix[:-1]
    srcdir_path = '/src/'+ srcdir + '/ source'
    afw_package = package.get_afw_package(options)
    copyright = afw_package.get('copyright')
    msg.info('Generating ' + filename)
    os.makedirs(generated_dir_path, exist_ok=True)
    with nfc.open(generated_dir_path + filename, mode='w') as fd:
        c.write_h_prologue(fd, generated_by, 'Adaptive Framework Declare Helpers for ' + prefix, copyright, filename)
        c.write_doxygen_file_section(fd, filename, 'Adaptive Framework declare helpers for ' + prefix)
        
        fd.write('\n\n')
        fd.write('#include <apr_general.h>\n')

        fd.write('\n\n')
        fd.write('/**\n')
        fd.write(' * ' + uprefix + 'BEGIN_DECLARES goes before declares and \n')
        fd.write(' * ' + uprefix + 'END_DECLARES at end in ' + srcdir + '*.h files.\n')
        fd.write(' */\n')
        fd.write('#ifdef __cplusplus\n')
        fd.write('#define ' + uprefix + 'BEGIN_DECLARES extern "C" {\n')
        fd.write('#define ' + uprefix + 'END_DECLARES }\n')
        fd.write('#else\n')
        fd.write('#define ' + uprefix + 'BEGIN_DECLARES\n')
        fd.write('#define ' + uprefix + 'END_DECLARES\n')
        fd.write('#endif\n')

        fd.write('#if defined(WIN32)\n')
        fd.write('#error afw is not currently supported on Windows\n')
        fd.write('#endif\n')

        fd.write('\n\n')
        fd.write('/* #defines for declspec and calling convention. */\n')
        if exports:
            fd.write('#if defined(DOXYGEN) || !defined(WIN32)\n')
            fd.write('#define ' + uprefix + 'DECLSPEC_DECLARE extern\n')
            fd.write('#define ' + uprefix + 'DECLSPEC_DEFINE\n')
            fd.write('#define ' + uprefix + 'CALLING_CONVENTION\n')
            fd.write('#define ' + uprefix + 'CALLING_CONVENTION_ELLIPSIS\n')

            fd.write('#elif defined(' + uprefix + 'DECLARE_STATIC)\n')
            fd.write('#define ' + uprefix + 'DECLSPEC_DECLARE extern\n')
            fd.write('#define ' + uprefix + 'DECLSPEC_DEFINE\n')
            fd.write('#define ' + uprefix + 'CALLING_CONVENTION __stdcall\n')
            fd.write('#define ' + uprefix + 'CALLING_CONVENTION_ELLIPSIS __cdecl\n')

            fd.write('#elif defined(' + uprefix + 'DECLARE_EXPORT)\n')
            fd.write('#define ' + uprefix + 'DECLSPEC_DECLARE extern __declspec(dllexport)\n')
            fd.write('#define ' + uprefix + 'DECLSPEC_DEFINE __declspec(dllexport)\n')
            fd.write('#define ' + uprefix + 'CALLING_CONVENTION __stdcall\n')
            fd.write('#define ' + uprefix + 'CALLING_CONVENTION_ELLIPSIS __cdecl\n')

            fd.write('#else\n')
            fd.write('#define ' + uprefix + 'DECLSPEC_DECLARE extern __declspec(dllimport)\n')
            fd.write('#define ' + uprefix + 'DECLSPEC_DEFINE __declspec(dllimport)\n')
            fd.write('#define ' + uprefix + 'CALLING_CONVENTION __stdcall\n')
            fd.write('#define ' + uprefix + 'CALLING_CONVENTION_ELLIPSIS __cdecl\n')

            fd.write('#endif\n')
        else:
            fd.write('#define ' + uprefix + 'DECLSPEC_DECLARE extern\n')
            fd.write('#define ' + uprefix + 'DECLSPEC_DEFINE\n')
            fd.write('#define ' + uprefix + 'CALLING_CONVENTION\n')
            fd.write('#define ' + uprefix + 'CALLING_CONVENTION_ELLIPSIS\n')

        fd.write('\n\n')
        fd.write('/**\n')
        fd.write(' * @brief Declare an internal variable for ' + srcdir_path + '*.h files.\n')
        fd.write(' * @param type of variable\n')
        fd.write(' *\n')
        fd.write(' * Use this macro to supply the storage specifier of a variable in a .h file\n')
        fd.write(' * that is only intended to be accessed internally to a linked object.  There\n')
        fd.write(' * must be a corresponding ' + uprefix + 'DEFINE_INTERNAL_CONST_DATA()\n')
        fd.write(' * in a ' + srcdir_path + '*.h files.\n')
        fd.write(' * \n')
        fd.write(' * Any data declared this way is not considered part of the external API.\n')
        fd.write(' */\n')
        fd.write('#define ' + uprefix + 'DECLARE_INTERNAL_CONST_DATA(type) extern const type\n')

        fd.write('\n\n')
        fd.write('/**\n')
        fd.write(' * @brief Define an internal variable for ' + srcdir_path + '*.c files.\n')
        fd.write(' * @param type of variable\n')
        fd.write(' *\n')
        fd.write(' * Use this macro to supply the storage specifier of a variable in a .c files\n')
        fd.write(' * that is only intended to be accessed internally to a linked object.  There\n')
        fd.write(' * must be a corresponding ' + uprefix + 'DECLARE_INTERNAL_CONST_DATA()\n')
        fd.write(' * in a ' + srcdir_path + '*.h files.\n')
        fd.write(' * \n')
        fd.write(' * Any data defined this way is not considered part of the external API. \n') 
        fd.write(' */\n')
        fd.write('#define ' + uprefix + 'DEFINE_INTERNAL_CONST_DATA(type) const type\n')

        fd.write('\n\n')
        fd.write('/**\n')
        fd.write(' * @brief Declare an internal function for ' + srcdir_path + '*.h files.\n')
        fd.write(' * @param type of return value.\n')
        fd.write(' *\n')
        fd.write(' * Use this macro to supply the storage specifier of a function in a .h file\n')
        fd.write(' * that is only intended to be accessed internally to a linked object.  There\n')
        fd.write(' * must be a corresponding ' + uprefix + 'DEFINE_INTERNAL()\n')
        fd.write(' * in a ' + srcdir_path + '*.c files.\n')
        fd.write(' * \n')
        fd.write(' * Any function declared this way is not considered part of the external API.\n')
        fd.write(' */\n')
        fd.write('#define ' + uprefix + 'DECLARE_INTERNAL(type) extern type\n')

        fd.write('\n\n')
        fd.write('/**\n')
        fd.write(' * @brief Define an internal function for ' + srcdir_path + '*.c files.\n')
        fd.write(' * @param type of return value.\n')
        fd.write(' *\n')
        fd.write(' * Use this macro to supply the storage specifier of a function in a .c files\n')
        fd.write(' * that is only intended to be accessed internally to a linked object.  There\n')
        fd.write(' * must be a corresponding ' + uprefix + 'DECLARE_INTERNAL()\n')
        fd.write(' * in a ' + srcdir_path + '*.h files.\n')
        fd.write(' * \n')
        fd.write(' * Any function defined this way is not considered part of the external API. \n') 
        fd.write(' */\n')
        fd.write('#define ' + uprefix + 'DEFINE_INTERNAL(type) type\n')

        fd.write('\n\n')
        fd.write('/**\n')
        fd.write(' * @brief Declare a public ' + srcdir + ' function.\n')
        fd.write(' * @param type of return value.\n')
        fd.write(' *\n')
        fd.write(' * There must be a corresponding ' + uprefix + 'DEFINE()\n')
        fd.write(' * in a ' + srcdir_path + '*.c files.\n')
        fd.write(' *\n')
        fd.write(' * Example:\n')
        fd.write(' *\n')
        fd.write(' * const afw_utf8_t * ' + prefix + 'some_function(int a);\n')
        fd.write(' *\n')
        fd.write(' * is decorated this way:\n')
        fd.write(' *\n')
        fd.write(' * ' + uprefix + 'DECLARE(const afw_utf8_t *)\n')
        fd.write(' * ' + prefix + 'some_function(int a);\n')
        fd.write(' */\n')
        fd.write('#define ' + uprefix + 'DECLARE(type) \\\n')
        fd.write(uprefix + 'DECLSPEC_DECLARE \\\n')
        fd.write('type \\\n')
        fd.write(uprefix + 'CALLING_CONVENTION\n')

        fd.write('\n\n')
        fd.write('/**\n')
        fd.write(' * @brief Declare a public ' + srcdir + ' function with variable arguments.\n')
        fd.write(' * @param type of return value.\n')
        fd.write(' *\n')
        fd.write(' * There must be a corresponding ' + uprefix + 'DEFINE_ELLIPSIS()\n')
        fd.write(' * in a ' + srcdir_path + '*.c files.\n')
        fd.write(' *\n')
        fd.write(' * Example:\n')
        fd.write(' *\n')
        fd.write(' * const afw_utf8_t *\n')
        fd.write(' * ' + prefix + 'some_function(int a, ...);\n')
        fd.write(' *\n')
        fd.write(' * is decorated this way:\n')
        fd.write(' *\n')
        fd.write(' * ' + uprefix + 'DECLARE_ELLIPSIS(const afw_utf8_t *)\n')
        fd.write(' * ' + prefix + 'some_function(int a, ...);\n')
        fd.write(' */\n')
        fd.write('#define ' + uprefix + 'DECLARE_ELLIPSIS(type) \\\n')
        fd.write(uprefix + 'DECLSPEC_DECLARE \\\n')
        fd.write('type \\\n')
        fd.write(uprefix + 'CALLING_CONVENTION_ELLIPSIS\n')

        fd.write('\n\n')
        fd.write('/**\n')
        fd.write(' * @brief Declare a public ' + srcdir + ' variable.\n')
        fd.write(' * @param type of variable\n')
        fd.write(' *\n')
        fd.write(' * There must be a corresponding ' + uprefix + 'DEFINE_CONST_DATA\n')
        fd.write(' * in a ' + srcdir_path + '*.c files.\n')
        fd.write(' *\n')
        fd.write(' * Example:\n')
        fd.write(' *\n')
        fd.write(' * extern const afw_utf8_t *\n')
        fd.write(' * ' + prefix + 'a_string;\n')
        fd.write(' *\n')
        fd.write(' * is decorated this way:\n')
        fd.write(' *\n')
        fd.write(' * ' + uprefix + 'DECLARE_CONST_DATA(afw_utf8_t *)\n')
        fd.write(' * ' + prefix + 'a_string;\n')
        fd.write(' */\n')
        fd.write('#define ' + uprefix + 'DECLARE_CONST_DATA(type) \\\n')
        fd.write(uprefix + 'DECLSPEC_DECLARE \\\n')
        fd.write('const type\n')

        fd.write('\n\n')
        fd.write('/**\n')
        fd.write(' * @brief Define a public ' + srcdir + ' function.\n')
        fd.write(' * @param type of return value.\n')
        fd.write(' *\n')
        fd.write(' * There must be a corresponding ' + uprefix + 'DECLARE()\n')
        fd.write(' * in a ' + srcdir_path + '*.h files.\n')
        fd.write(' *\n')
        fd.write(' * Example:\n')
        fd.write(' *\n')
        fd.write(' * const afw_utf8_t *\n')
        fd.write(' * ' + prefix + 'some_function(int a) {...}\n')
        fd.write(' *\n')
        fd.write(' * is decorated this way:\n')
        fd.write(' *\n')
        fd.write(' * ' + uprefix + 'DEFINE(const afw_utf8_t *)\n')
        fd.write(' * ' + prefix + 'some_function(int a) {...}\n')
        fd.write(' */\n')
        fd.write('#define ' + uprefix + 'DEFINE(type) \\\n')
        fd.write(uprefix + 'DECLSPEC_DEFINE \\\n')
        fd.write('type \\\n')
        fd.write(uprefix + 'CALLING_CONVENTION\n')

        fd.write('\n\n')
        fd.write('/**\n')
        fd.write(' * @brief Define a public ' + srcdir + ' function with variable arguments.\n')
        fd.write(' * @param type of return value.\n')
        fd.write(' *\n')
        fd.write(' * There must be a corresponding ' + uprefix + 'DECLARE_ELLIPSIS()\n')
        fd.write(' * in a ' + srcdir_path + '*.h files.\n')
        fd.write(' *\n')
        fd.write(' * Example:\n')
        fd.write(' *\n')
        fd.write(' * const afw_utf8_t * \n')
        fd.write(' * ' + prefix + 'some_function(int a, ...) {...}\n')
        fd.write(' *\n')
        fd.write(' * is decorated this way:\n')
        fd.write(' *\n')
        fd.write(' * ' + uprefix + 'DEFINE_ELLIPSIS(const afw_utf8_t *) \n')
        fd.write(' * ' + prefix + 'some_function(int a, ...) {...}\n')
        fd.write(' */\n')
        fd.write('#define ' + uprefix + 'DEFINE_ELLIPSIS(type) \\\n')
        fd.write(uprefix + 'DECLSPEC_DEFINE \\\n')
        fd.write('type \\\n')
        fd.write(uprefix + 'CALLING_CONVENTION_ELLIPSIS\n')

        fd.write('\n\n')
        fd.write('/**\n')
        fd.write(' * @brief Define a public ' + srcdir + ' variable.\n')
        fd.write(' * @param type of variable\n')
        fd.write(' *\n')
        fd.write(' * There must be a corresponding ' + uprefix + 'DECLARE_CONST_DATA\n')
        fd.write(' * in a ' + srcdir_path + '*.h files.\n')
        fd.write(' *\n')
        fd.write(' * Example:\n')
        fd.write(' *\n')
        fd.write(' * const afw_utf8_t *\n')
        fd.write(' * ' + prefix + 'a_string;\n')
        fd.write(' *\n')
        fd.write(' * is decorated this way:\n')
        fd.write(' *\n')
        fd.write(' * ' + uprefix + 'DEFINE_CONST_DATA(afw_utf8_t *)\n')
        fd.write(' * ' + prefix + 'a_string;\n')
        fd.write(' */\n')
        fd.write('#define ' + uprefix + 'DEFINE_CONST_DATA(type) \\\n')
        fd.write(uprefix + 'DECLSPEC_DEFINE \\\n')
        fd.write('const type\n')


        #-----------------------------------------------
        fd.write('\n\n')
        fd.write('#define ' + uprefix + 'CALLBACK \\\n')
        fd.write(uprefix + 'CALLING_CONVENTION\n')

        fd.write('\n\n')
        fd.write('#define ' + uprefix + 'CALLBACK_ELLIPSIS \\\n')
        fd.write(uprefix + 'CALLING_CONVENTION_ELLIPSIS\n')

        fd.write('\n\n')
        fd.write('#ifdef WIN32\n')
        fd.write('#define ' + uprefix + 'DEFINE_DSO(type) __declspec(dllexport) type\n')
        fd.write('#else\n')
        fd.write('#define ' + uprefix + 'DEFINE_DSO(type) type\n')
        fd.write('#endif\n')

        fd.write('\n\n')
        fd.write('#ifdef ' + uprefix + 'DISABLE_INLINE\n')
        fd.write('#define ' + uprefix + 'HAS_INLINE 0\n')
        fd.write('#define ' + uprefix + 'INLINE\n')
        fd.write('#else\n')
        fd.write('#define ' + uprefix + 'HAS_INLINE APR_HAS_INLINE\n')
        fd.write('#define ' + uprefix + 'INLINE APR_INLINE\n')
        fd.write('#endif\n')

        fd.write('\n\n')
        fd.write('/** AFW Inline. */\n')
        fd.write('#define ' + uprefix + 'STATIC_INLINE static ' + uprefix + 'INLINE\n')
        fd.write('\n')
        fd.write('#define ' + uprefix + 'DECLARE_STATIC(type) static type\n')
        fd.write('\n')
        fd.write('#if defined(DOXYGEN)\n')
        fd.write('#define ' + uprefix + 'DEFINE_STATIC_INLINE(type) type\n')
        fd.write('#else\n')
        fd.write('#define ' + uprefix + 'DEFINE_STATIC_INLINE(type) ' + uprefix + 'STATIC_INLINE type\n')
        fd.write('#endif\n')
        fd.write('\n')

        c.write_h_epilogue(fd, filename)
